using System;
using Microsoft.EntityFrameworkCore;
namespace PortalAPI.Models
{
    public partial class AISContext : DbContext
    {
        public AISContext()
        {
        }
        public AISContext(DbContextOptions<AISContext> options) : base(options)
        {
        }
        //public virtual DbSet<TWEBWF_Projects> TWEBWF_Projects { get; set; }
        //public virtual DbSet<VM_Stage> VM_Stage { get; set; }
        //public virtual DbSet<VM_TwebWFEmployee> VM_TwebWFEmployee { get; set; }
        public virtual DbSet<V_Notification> V_Notification { get; set; }
        public virtual DbSet<V_GetNextStepUsers> V_GetNextStepUsers { get; set; }
        public virtual DbSet<SP_TicketingAPI_Employees> SP_TicketingAPI_Employees { get; set; }
        public virtual DbSet<SP_Vacation_Val> SP_Vacation_Val { get; set; }
        public virtual DbSet<SP_HRStatistics> SP_HRStatistics { get; set; }
        public virtual DbSet<SP_MainApps> SP_MainApps { get; set; }
        public virtual DbSet<SP_HRFingerPrintFinal> SP_HRFingerPrintFinal { get; set; }
        public virtual DbSet<SP_UserApps> SP_UserApps { get; set; }
        public virtual DbSet<SP_Inbox> SP_Inbox { get; set; }
        public virtual DbSet<SP_DashBoard_DirectorsLookup> SP_DashBoard_DirectorsLookup { get; set; }
        public virtual DbSet<SP_DashBoard_AccessCompany> SP_DashBoard_AccessCompany { get; set; }
        public virtual DbSet<SP_DashBoard_GetJobCategory> SP_DashBoard_GetJobCategory { get; set; }
        public virtual DbSet<SP_DashBoard_Projects> SP_DashBoard_Projects { get; set; }
        public virtual DbSet<SP_DashBoard_Accountant> SP_DashBoard_Accountant { get; set; }
        public virtual DbSet<SP_GetEmpByProj> SP_Getempbyproj { get; set; }
        public virtual DbSet<SP_GetEmpAttendByProj> SP_GetEmpAttendByProj { get; set; }
        public virtual DbSet<SP_GetCountEmp> SP_GetCountEmp { get; set; }
        public virtual DbSet<V_MyRequest> V_MyRequest { get; set; }
        public virtual DbSet<AccountsPermission> AccountsPermission { get; set; }
        public virtual DbSet<AccountsTable> AccountsTable { get; set; }
        public virtual DbSet<AcomAccommodation> AcomAccommodation { get; set; }
        public virtual DbSet<AcomAccommodationHousingType> AcomAccommodationHousingType { get; set; }
        public virtual DbSet<AcomAccommodationRequest> AcomAccommodationRequest { get; set; }
        public virtual DbSet<AcomAccommodationRequestD> AcomAccommodationRequestD { get; set; }
        public virtual DbSet<AcomAccommodationType> AcomAccommodationType { get; set; }
        public virtual DbSet<AcomHousing> AcomHousing { get; set; }
        public virtual DbSet<AcomJobTitle> AcomJobTitle { get; set; }
        public virtual DbSet<AcomKingOfProvider> AcomKingOfProvider { get; set; }
        public virtual DbSet<AcomLabor> AcomLabor { get; set; }
        public virtual DbSet<AcomProjectBudget> AcomProjectBudget { get; set; }
        public virtual DbSet<AcomProvider> AcomProvider { get; set; }
        public virtual DbSet<ActiveDirectory> ActiveDirectory { get; set; }
        public virtual DbSet<AisLog> AisLog { get; set; }
        public virtual DbSet<Appointments> Appointments { get; set; }
        public virtual DbSet<AppraisalSubtitle> AppraisalSubtitle { get; set; }
        public virtual DbSet<ApraisalTitle> ApraisalTitle { get; set; }
        public virtual DbSet<AppraisalEmp> AppraisalEmp { get; set; }
        public virtual DbSet<AttAttendance> AttAttendance { get; set; }
        public virtual DbSet<AttCheckinout> AttCheckinout { get; set; }
        public virtual DbSet<AttEmployee> AttEmployee { get; set; }
        public virtual DbSet<AttSetting> AttSetting { get; set; }
        public virtual DbSet<Attendances> Attendances { get; set; }
        public virtual DbSet<BasisDistribCostCenter> BasisDistribCostCenter { get; set; }
        public virtual DbSet<BimBuilding> BimBuilding { get; set; }
        public virtual DbSet<BimEffort> BimEffort { get; set; }
        public virtual DbSet<BimEffortSpecify> BimEffortSpecify { get; set; }
        public virtual DbSet<BimEffortSpecify2> BimEffortSpecify2 { get; set; }
        public virtual DbSet<BimEffortSpecify3> BimEffortSpecify3 { get; set; }
        public virtual DbSet<BimElevation> BimElevation { get; set; }
        public virtual DbSet<BimFloor> BimFloor { get; set; }
        public virtual DbSet<BimLevel> BimLevel { get; set; }
        public virtual DbSet<BimParcel> BimParcel { get; set; }
        public virtual DbSet<BimPart> BimPart { get; set; }
        public virtual DbSet<BimProjects> BimProjects { get; set; }
        public virtual DbSet<BimTransaction> BimTransaction { get; set; }
        public virtual DbSet<BimUsers> BimUsers { get; set; }
        public virtual DbSet<Blocks> Blocks { get; set; }
        public virtual DbSet<CAccCust> CAccCust { get; set; }
        public virtual DbSet<CDb> CDb { get; set; }
        public virtual DbSet<CDepartment> CDepartment { get; set; }
        public virtual DbSet<CEmp> CEmp { get; set; }
        public virtual DbSet<CForm> CForm { get; set; }
        public virtual DbSet<CFormConfirm> CFormConfirm { get; set; }
        public virtual DbSet<CFormConfirmUserD> CFormConfirmUserD { get; set; }
        public virtual DbSet<CFormConfirmUserM> CFormConfirmUserM { get; set; }
        public virtual DbSet<CFormPermision> CFormPermision { get; set; }
        public virtual DbSet<CGroup> CGroup { get; set; }
        public virtual DbSet<CGroupCustD> CGroupCustD { get; set; }
        public virtual DbSet<COperation> COperation { get; set; }
        public virtual DbSet<CStock> CStock { get; set; }
        public virtual DbSet<CSubGroup> CSubGroup { get; set; }
        public virtual DbSet<CTaxPlaceG> CTaxPlaceG { get; set; }
        public virtual DbSet<CTaxPlaceS> CTaxPlaceS { get; set; }
        public virtual DbSet<CUser> CUser { get; set; }
        public virtual DbSet<CUserDiscipline> CUserDiscipline { get; set; }
        public virtual DbSet<CView> CView { get; set; }
        public virtual DbSet<CYear> CYear { get; set; }
        public virtual DbSet<CallCenterM> CallCenterM { get; set; }
        public virtual DbSet<Candy> Candy { get; set; }
        public virtual DbSet<Careers> Careers { get; set; }
        public virtual DbSet<Case> Case { get; set; }
        public virtual DbSet<CashMMaster> CashMMaster { get; set; }
        public virtual DbSet<CashMOprDirBalance> CashMOprDirBalance { get; set; }
        public virtual DbSet<CashMProjectsBalance> CashMProjectsBalance { get; set; }
        public virtual DbSet<CashMUsers> CashMUsers { get; set; }
        public virtual DbSet<Cateries> Cateries { get; set; }
        public virtual DbSet<ChatUser> ChatUser { get; set; }
        public virtual DbSet<CheckChecks> CheckChecks { get; set; }
        public virtual DbSet<CheckLog> CheckLog { get; set; }
        public virtual DbSet<CheckSerials> CheckSerials { get; set; }
        public virtual DbSet<CheckStatus> CheckStatus { get; set; }
        public virtual DbSet<CheckType> CheckType { get; set; }
        public virtual DbSet<CheckVendorType> CheckVendorType { get; set; }
        public virtual DbSet<CheckVendors> CheckVendors { get; set; }
        public virtual DbSet<Closing> Closing { get; set; }
        public virtual DbSet<ConditionReport> ConditionReport { get; set; }
        public virtual DbSet<Conditions> Conditions { get; set; }
        public virtual DbSet<ContractForms> ContractForms { get; set; }
        public virtual DbSet<CoplegalCompany> CoplegalCompany { get; set; }
        public virtual DbSet<CoplegalDoccategory> CoplegalDoccategory { get; set; }
        public virtual DbSet<CoplegalDocs> CoplegalDocs { get; set; }
        public virtual DbSet<CoplegalFolder> CoplegalFolder { get; set; }
        public virtual DbSet<CstAdjustVendorM> CstAdjustVendorM { get; set; }
        public virtual DbSet<CstAgreementBqoRelation> CstAgreementBqoRelation { get; set; }
        public virtual DbSet<CstBudgetDirect> CstBudgetDirect { get; set; }
        public virtual DbSet<CstBudgetDirectM> CstBudgetDirectM { get; set; }
        public virtual DbSet<CstBudgetDirectProjectQty> CstBudgetDirectProjectQty { get; set; }
        public virtual DbSet<CstBudgetInDirect> CstBudgetInDirect { get; set; }
        public virtual DbSet<CstBudgetInDirectM> CstBudgetInDirectM { get; set; }
        public virtual DbSet<CstBudgetVoDirectD> CstBudgetVoDirectD { get; set; }
        public virtual DbSet<CstBudgetVoInDirectD> CstBudgetVoInDirectD { get; set; }
        public virtual DbSet<CstBudgetVoM> CstBudgetVoM { get; set; }
        public virtual DbSet<CstBudgetVoTopSheetAD> CstBudgetVoTopSheetAD { get; set; }
        public virtual DbSet<CstBudgetVoTopSheetBD> CstBudgetVoTopSheetBD { get; set; }
        public virtual DbSet<CstBudgetVoTopSheetCD> CstBudgetVoTopSheetCD { get; set; }
        public virtual DbSet<CstClientInvoiceApprovedD> CstClientInvoiceApprovedD { get; set; }
        public virtual DbSet<CstClientInvoiceApprovedM> CstClientInvoiceApprovedM { get; set; }
        public virtual DbSet<CstClientInvoiceSubmittedD> CstClientInvoiceSubmittedD { get; set; }
        public virtual DbSet<CstClientInvoiceSubmittedM> CstClientInvoiceSubmittedM { get; set; }
        public virtual DbSet<CstCompanyPerformanceCashFlow> CstCompanyPerformanceCashFlow { get; set; }
        public virtual DbSet<CstCompanyPerformanceD> CstCompanyPerformanceD { get; set; }
        public virtual DbSet<CstCompanyPerformanceM> CstCompanyPerformanceM { get; set; }
        public virtual DbSet<CstCompanyPerformanceMByMonth> CstCompanyPerformanceMByMonth { get; set; }
        public virtual DbSet<CstCompanyPerformanceResD> CstCompanyPerformanceResD { get; set; }
        public virtual DbSet<CstContactType> CstContactType { get; set; }
        public virtual DbSet<CstFalseAccountD> CstFalseAccountD { get; set; }
        public virtual DbSet<CstFalseAccountM> CstFalseAccountM { get; set; }
        public virtual DbSet<CstHeadOfficeAndBankInterestD> CstHeadOfficeAndBankInterestD { get; set; }
        public virtual DbSet<CstHeadOfficeAndBankInterestM> CstHeadOfficeAndBankInterestM { get; set; }
        public virtual DbSet<CstIrLog> CstIrLog { get; set; }
        public virtual DbSet<CstIrLogM> CstIrLogM { get; set; }
        public virtual DbSet<TWEBWFSubsidiaries> TWEBWFSubsidiaries { get; set; }

        public virtual DbSet<TWEBWFMedicalRequest> TWEBWFMedicalRequest { get; set; }

        public virtual DbSet<CstItemQtyAssumed> CstItemQtyAssumed { get; set; }
        public virtual DbSet<CstItemQtyExecutedBy> CstItemQtyExecutedBy { get; set; }
        public virtual DbSet<CstItemQtySubmitted> CstItemQtySubmitted { get; set; }
        public virtual DbSet<CstItemQtySubmittedSupplier> CstItemQtySubmittedSupplier { get; set; }
        public virtual DbSet<CstItemQtyWorkDoneToDate> CstItemQtyWorkDoneToDate { get; set; }
        public virtual DbSet<CstKpiList> CstKpiList { get; set; }
        public virtual DbSet<CstMaterial> CstMaterial { get; set; }
        public virtual DbSet<CstNewAgreementAddendumD> CstNewAgreementAddendumD { get; set; }
        public virtual DbSet<CstNewAgreementAddendumM> CstNewAgreementAddendumM { get; set; }
        public virtual DbSet<CstNewAgreementD> CstNewAgreementD { get; set; }
        public virtual DbSet<CstNewAgreementM> CstNewAgreementM { get; set; }
        public virtual DbSet<CstNewItemForCashD> CstNewItemForCashD { get; set; }
        public virtual DbSet<CstNewItemForCashM> CstNewItemForCashM { get; set; }
        public virtual DbSet<CstOverAllDataD> CstOverAllDataD { get; set; }
        public virtual DbSet<CstOverAllDataM> CstOverAllDataM { get; set; }
        public virtual DbSet<CstPartnershipType> CstPartnershipType { get; set; }
        public virtual DbSet<CstPfrD> CstPfrD { get; set; }
        public virtual DbSet<CstPfrM> CstPfrM { get; set; }
        public virtual DbSet<CstProcedureAdhereD> CstProcedureAdhereD { get; set; }
        public virtual DbSet<CstProcedureAdhereM> CstProcedureAdhereM { get; set; }
        public virtual DbSet<CstSafetyEvaluation> CstSafetyEvaluation { get; set; }
        public virtual DbSet<CstScCertificate> CstScCertificate { get; set; }
        public virtual DbSet<CstStoreDataD> CstStoreDataD { get; set; }
        public virtual DbSet<CstStoreDataM> CstStoreDataM { get; set; }
        public virtual DbSet<CstStoreSivD> CstStoreSivD { get; set; }
        public virtual DbSet<CstStoreSivM> CstStoreSivM { get; set; }
        public virtual DbSet<CstTarea> CstTarea { get; set; }
        public virtual DbSet<CstTdivision> CstTdivision { get; set; }
        public virtual DbSet<CstTexpTypeAmountD> CstTexpTypeAmountD { get; set; }
        public virtual DbSet<CstTexpTypeAmountD1> CstTexpTypeAmountD1 { get; set; }
        public virtual DbSet<CstTexpTypeAmountDAcc> CstTexpTypeAmountDAcc { get; set; }
        public virtual DbSet<CstTexpTypeAmountM> CstTexpTypeAmountM { get; set; }
        public virtual DbSet<CstTitem> CstTitem { get; set; }
        public virtual DbSet<CstTitemDistribution> CstTitemDistribution { get; set; }
        public virtual DbSet<CstTitemIndirect> CstTitemIndirect { get; set; }
        public virtual DbSet<CstTitemIndirectPeriods> CstTitemIndirectPeriods { get; set; }
        public virtual DbSet<CstTitemIndirectResource> CstTitemIndirectResource { get; set; }
        public virtual DbSet<CstTitemQtyApproved> CstTitemQtyApproved { get; set; }
        public virtual DbSet<CstTitemToResource> CstTitemToResource { get; set; }
        public virtual DbSet<CstTitemToTask> CstTitemToTask { get; set; }
        public virtual DbSet<CstTmainTrade> CstTmainTrade { get; set; }
        public virtual DbSet<CstTopSheetCatA> CstTopSheetCatA { get; set; }
        public virtual DbSet<CstTopSheetCatATrans> CstTopSheetCatATrans { get; set; }
        public virtual DbSet<CstTopSheetCatB> CstTopSheetCatB { get; set; }
        public virtual DbSet<CstTopSheetCatBTrans> CstTopSheetCatBTrans { get; set; }
        public virtual DbSet<CstTopSheetCatC> CstTopSheetCatC { get; set; }
        public virtual DbSet<CstTopSheetCatCTrans> CstTopSheetCatCTrans { get; set; }
        public virtual DbSet<CstTopSheetM> CstTopSheetM { get; set; }
        public virtual DbSet<CstTresource> CstTresource { get; set; }
        public virtual DbSet<CstTresourceGroup> CstTresourceGroup { get; set; }
        public virtual DbSet<CstTresourceGroupLevel2> CstTresourceGroupLevel2 { get; set; }
        public virtual DbSet<CstTresourceGroupLevel3> CstTresourceGroupLevel3 { get; set; }
        public virtual DbSet<CstTresourceMaterialD> CstTresourceMaterialD { get; set; }
        public virtual DbSet<CstTtask> CstTtask { get; set; }
        public virtual DbSet<CstTtrade> CstTtrade { get; set; }
        public virtual DbSet<CstTtransferAddingD> CstTtransferAddingD { get; set; }
        public virtual DbSet<CstTtransferArea> CstTtransferArea { get; set; }
        public virtual DbSet<CstTtransferD> CstTtransferD { get; set; }
        public virtual DbSet<CstTtransferM> CstTtransferM { get; set; }
        public virtual DbSet<CstTworkPackage> CstTworkPackage { get; set; }
        public virtual DbSet<CstVendorPaymentD> CstVendorPaymentD { get; set; }
        public virtual DbSet<CstVendorPaymentM> CstVendorPaymentM { get; set; }
        public virtual DbSet<CstnAgreementBqoRelation> CstnAgreementBqoRelation { get; set; }
        public virtual DbSet<CstnConstructionCategory> CstnConstructionCategory { get; set; }
        public virtual DbSet<CstnInvoiceDebitCreditNotesD> CstnInvoiceDebitCreditNotesD { get; set; }
        public virtual DbSet<CstnInvoiceDebitCreditNotesM> CstnInvoiceDebitCreditNotesM { get; set; }
        public virtual DbSet<CstnInvoiceEquipmentD> CstnInvoiceEquipmentD { get; set; }
        public virtual DbSet<CstnInvoiceEquipmentM> CstnInvoiceEquipmentM { get; set; }
        public virtual DbSet<CstnInvoiceManPowerD> CstnInvoiceManPowerD { get; set; }
        public virtual DbSet<CstnInvoiceManPowerM> CstnInvoiceManPowerM { get; set; }
        public virtual DbSet<CstnInvoiceScaffoldingD> CstnInvoiceScaffoldingD { get; set; }
        public virtual DbSet<CstnInvoiceScaffoldingM> CstnInvoiceScaffoldingM { get; set; }
        public virtual DbSet<CstnItemsExecutedByD> CstnItemsExecutedByD { get; set; }
        public virtual DbSet<CstnItemsExecutedByDD> CstnItemsExecutedByDD { get; set; }
        public virtual DbSet<CstnItemsProgressD> CstnItemsProgressD { get; set; }
        public virtual DbSet<CstnItemsWeightD> CstnItemsWeightD { get; set; }
        public virtual DbSet<CstnMaterialEq> CstnMaterialEq { get; set; }
        public virtual DbSet<CstnMaterialReqStepsName> CstnMaterialReqStepsName { get; set; }
        public virtual DbSet<CstnNewAgreementD> CstnNewAgreementD { get; set; }
        public virtual DbSet<CstnNewAgreementM> CstnNewAgreementM { get; set; }
        public virtual DbSet<CstnPfrD> CstnPfrD { get; set; }
        public virtual DbSet<CstnPfrM> CstnPfrM { get; set; }
        public virtual DbSet<CstnTexpTypeAmountD> CstnTexpTypeAmountD { get; set; }
        public virtual DbSet<CstnTexpTypeAmountM> CstnTexpTypeAmountM { get; set; }
        public virtual DbSet<CstnTmaterialRequisition> CstnTmaterialRequisition { get; set; }
        public virtual DbSet<CstnTmaterialRequisitionD> CstnTmaterialRequisitionD { get; set; }
        public virtual DbSet<CstnTresource> CstnTresource { get; set; }
        public virtual DbSet<CstnTresourceGroup> CstnTresourceGroup { get; set; }
        public virtual DbSet<CstnTresourceGroupLevel2> CstnTresourceGroupLevel2 { get; set; }
        public virtual DbSet<CstnTresourceGroupLevel3> CstnTresourceGroupLevel3 { get; set; }
        public virtual DbSet<CstnTresourceMaterialD> CstnTresourceMaterialD { get; set; }
        public virtual DbSet<CstnVendorFalseAccountD> CstnVendorFalseAccountD { get; set; }
        public virtual DbSet<CstnVendorFalseAccountM> CstnVendorFalseAccountM { get; set; }
        public virtual DbSet<CstnVendorPaymentD> CstnVendorPaymentD { get; set; }
        public virtual DbSet<CstnVendorPaymentEvalD> CstnVendorPaymentEvalD { get; set; }
        public virtual DbSet<CstnVendorPaymentEvalManualD> CstnVendorPaymentEvalManualD { get; set; }
        public virtual DbSet<CstnVendorPaymentEvalManualSteelD> CstnVendorPaymentEvalManualSteelD { get; set; }
        public virtual DbSet<CstnVendorPaymentEvalManualWoodD> CstnVendorPaymentEvalManualWoodD { get; set; }
        public virtual DbSet<CstnVendorPaymentEvalProcD> CstnVendorPaymentEvalProcD { get; set; }
        public virtual DbSet<CstnVendorPaymentLinksD> CstnVendorPaymentLinksD { get; set; }
        public virtual DbSet<CstnVendorPaymentLinksM> CstnVendorPaymentLinksM { get; set; }
        public virtual DbSet<CstnVendorPaymentM> CstnVendorPaymentM { get; set; }
        public virtual DbSet<CstnVendorPaymentManualAddD> CstnVendorPaymentManualAddD { get; set; }
        public virtual DbSet<CstnVendorPaymentManualD> CstnVendorPaymentManualD { get; set; }
        public virtual DbSet<CstnVendorPaymentManualDedD> CstnVendorPaymentManualDedD { get; set; }
        public virtual DbSet<CstnVendorPaymentManualM> CstnVendorPaymentManualM { get; set; }
        public virtual DbSet<CstnVendorPaymentManualSteelD> CstnVendorPaymentManualSteelD { get; set; }
        public virtual DbSet<CstnVendorPaymentManualSteelM> CstnVendorPaymentManualSteelM { get; set; }
        public virtual DbSet<CstnVendorPaymentManualWf> CstnVendorPaymentManualWf { get; set; }
        public virtual DbSet<CstnVendorPaymentManualWoodD> CstnVendorPaymentManualWoodD { get; set; }
        public virtual DbSet<CstnVendorPaymentManualWoodM> CstnVendorPaymentManualWoodM { get; set; }
        public virtual DbSet<CstnVendorPaymentStepsName> CstnVendorPaymentStepsName { get; set; }
        public virtual DbSet<CtnTposition> CtnTposition { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<DContractMaint> DContractMaint { get; set; }
        public virtual DbSet<DContractSalesM> DContractSalesM { get; set; }
        public virtual DbSet<DTypeG> DTypeG { get; set; }
        public virtual DbSet<TopManagement_Users> TopManagement_Users { get; set; }
        public virtual DbSet<DTypeGD> DTypeGD { get; set; }
        public virtual DbSet<DTypeGNon> DTypeGNon { get; set; }
        public virtual DbSet<DisciplineCode> DisciplineCode { get; set; }
        public virtual DbSet<EngPlanBuilding> EngPlanBuilding { get; set; }
        public virtual DbSet<EngPlanClients> EngPlanClients { get; set; }
        public virtual DbSet<EngPlanConsultant> EngPlanConsultant { get; set; }
        public virtual DbSet<EngPlanContracts> EngPlanContracts { get; set; }
        public virtual DbSet<EngPlanDevision> EngPlanDevision { get; set; }
        public virtual DbSet<EngPlanDiscipline> EngPlanDiscipline { get; set; }
        public virtual DbSet<EngPlanItems> EngPlanItems { get; set; }
        public virtual DbSet<EngPlanProjects> EngPlanProjects { get; set; }
        public virtual DbSet<EngPlanQs> EngPlanQs { get; set; }
        public virtual DbSet<EngPlanQsD> EngPlanQsD { get; set; }
        public virtual DbSet<EngPlanRoom> EngPlanRoom { get; set; }
        public virtual DbSet<EngPlanSubContractor> EngPlanSubContractor { get; set; }
        public virtual DbSet<EngPlanUnit> EngPlanUnit { get; set; }
        public virtual DbSet<EngPlanZone> EngPlanZone { get; set; }
        public virtual DbSet<EngPlaneFloor> EngPlaneFloor { get; set; }
        public virtual DbSet<FieldNames> FieldNames { get; set; }
        public virtual DbSet<Filter> Filter { get; set; }
        public virtual DbSet<Flash> Flash { get; set; }
        public virtual DbSet<FolderPath> FolderPath { get; set; }
        public virtual DbSet<Governorate> Governorate { get; set; }
        public virtual DbSet<HahcodingInventoryItem> HahcodingInventoryItem { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv1> HahcodingInventoryItemDiv1 { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv2> HahcodingInventoryItemDiv2 { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv2Temp> HahcodingInventoryItemDiv2Temp { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv3> HahcodingInventoryItemDiv3 { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv4> HahcodingInventoryItemDiv4 { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv5> HahcodingInventoryItemDiv5 { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv6> HahcodingInventoryItemDiv6 { get; set; }
        public virtual DbSet<HahcodingInventoryItemDiv7> HahcodingInventoryItemDiv7 { get; set; }
        public virtual DbSet<HahcodingInventoryItemSerial> HahcodingInventoryItemSerial { get; set; }
        public virtual DbSet<HahcodingInventoryItemSerialTemp> HahcodingInventoryItemSerialTemp { get; set; }
        public virtual DbSet<HahcodingTest> HahcodingTest { get; set; }
        public virtual DbSet<HahcodingUsers> HahcodingUsers { get; set; }
        public virtual DbSet<Hahcompany> Hahcompany { get; set; }
        public virtual DbSet<HatEmployee> HatEmployee { get; set; }
        public virtual DbSet<HatEmployeeHistory> HatEmployeeHistory { get; set; }
        public virtual DbSet<HatGrade> HatGrade { get; set; }
        public virtual DbSet<HatGroup> HatGroup { get; set; }
        public virtual DbSet<HatJobTitle> HatJobTitle { get; set; }
        public virtual DbSet<HatProject> HatProject { get; set; }
        public virtual DbSet<HatSalaryType> HatSalaryType { get; set; }
        public virtual DbSet<HrAccomplishments> HrAccomplishments { get; set; }
        public virtual DbSet<HrAccomplishmentsGroup> HrAccomplishmentsGroup { get; set; }
        public virtual DbSet<HrAppSource> HrAppSource { get; set; }
        public virtual DbSet<HrApplicationStatus> HrApplicationStatus { get; set; }
        public virtual DbSet<HrApproval> HrApproval { get; set; }
        public virtual DbSet<HrApprovalConfirm> HrApprovalConfirm { get; set; }
        public virtual DbSet<HrAssessment> HrAssessment { get; set; }
        public virtual DbSet<HrCareerLevel> HrCareerLevel { get; set; }
        public virtual DbSet<HrCity> HrCity { get; set; }
        public virtual DbSet<HrCompetencies> HrCompetencies { get; set; }
        public virtual DbSet<HrCompetenciesAssessmentD> HrCompetenciesAssessmentD { get; set; }
        public virtual DbSet<HrCountry> HrCountry { get; set; }
        public virtual DbSet<HrCountryJob> HrCountryJob { get; set; }
        public virtual DbSet<HrCourse> HrCourse { get; set; }
        public virtual DbSet<HrDegreeLevel> HrDegreeLevel { get; set; }
        public virtual DbSet<HrDiscipline> HrDiscipline { get; set; }
        public virtual DbSet<HrFingerPrintAtt> HrFingerPrintAtt { get; set; }
        public virtual DbSet<HrFingerPrintEffects> HrFingerPrintEffects { get; set; }
        public virtual DbSet<HrFingerPrintGroups> HrFingerPrintGroups { get; set; }
        public virtual DbSet<HrFingerPrintLogSendEmail> HrFingerPrintLogSendEmail { get; set; }
        public virtual DbSet<HrFingerPrintMachines> HrFingerPrintMachines { get; set; }
        public virtual DbSet<HrFingerPrintPayroll> HrFingerPrintPayroll { get; set; }
        public virtual DbSet<HrFingerPrintSetting> HrFingerPrintSetting { get; set; }
        public virtual DbSet<HrFingerPrintWorkingHour> HrFingerPrintWorkingHour { get; set; }
        public virtual DbSet<HrFunction> HrFunction { get; set; }
        public virtual DbSet<HrIndustry> HrIndustry { get; set; }
        public virtual DbSet<HrInterviewRequest> HrInterviewRequest { get; set; }
        public virtual DbSet<HrJobCategory> HrJobCategory { get; set; }
        public virtual DbSet<HrJobTitle> HrJobTitle { get; set; }
        public virtual DbSet<HrJobType> HrJobType { get; set; }
        public virtual DbSet<HrLangSkillLevel> HrLangSkillLevel { get; set; }
        public virtual DbSet<HrLanguage> HrLanguage { get; set; }
        public virtual DbSet<HrLanguageD> HrLanguageD { get; set; }
        public virtual DbSet<HrLocation> HrLocation { get; set; }
        public virtual DbSet<HrMajor> HrMajor { get; set; }
        public virtual DbSet<HrMaritalStatus> HrMaritalStatus { get; set; }
        public virtual DbSet<HrRecApprovalsConfirm> HrRecApprovalsConfirm { get; set; }
        public virtual DbSet<HrRecArea> HrRecArea { get; set; }
        public virtual DbSet<HrRecAuthentication> HrRecAuthentication { get; set; }
        public virtual DbSet<HrRecCities> HrRecCities { get; set; }
        public virtual DbSet<HrRecEmployee> HrRecEmployee { get; set; }
        public virtual DbSet<HrRecExitCategory> HrRecExitCategory { get; set; }
        public virtual DbSet<HrRecExitQuestion> HrRecExitQuestion { get; set; }
        public virtual DbSet<HrRecExitResault> HrRecExitResault { get; set; }
        public virtual DbSet<HrRecGroups> HrRecGroups { get; set; }
        public virtual DbSet<HrRecHacEmployee> HrRecHacEmployee { get; set; }
        public virtual DbSet<HrRecHistoryManPower> HrRecHistoryManPower { get; set; }
        public virtual DbSet<HrRecJobApply> HrRecJobApply { get; set; }
        public virtual DbSet<HrRecJobDescription> HrRecJobDescription { get; set; }
        public virtual DbSet<HrRecJobLevel> HrRecJobLevel { get; set; }
        public virtual DbSet<HrRecJobList> HrRecJobList { get; set; }
        public virtual DbSet<HrRecJobTitleDelete> HrRecJobTitleDelete { get; set; }
        public virtual DbSet<HrRecManPower> HrRecManPower { get; set; }
        public virtual DbSet<HrRecNotification> HrRecNotification { get; set; }
        public virtual DbSet<HrRecProjectBudget> HrRecProjectBudget { get; set; }
        public virtual DbSet<HrRecQualifications> HrRecQualifications { get; set; }
        public virtual DbSet<HrRecReqChange> HrRecReqChange { get; set; }
        public virtual DbSet<QMS_Users> QMS_Users { get; set; }
        public virtual DbSet<TWEBWF_ProjectsDirection> TWEBWF_ProjectsDirection { get; set; }
        public virtual DbSet<HrRecRequestRequired> HrRecRequestRequired { get; set; }
        public virtual DbSet<HrRecRequiredJobs> HrRecRequiredJobs { get; set; }
        public virtual DbSet<HrRecRequiredJobsDet> HrRecRequiredJobsDet { get; set; }
        public virtual DbSet<HrRecSubGroups> HrRecSubGroups { get; set; }
        public virtual DbSet<HrRecTree> HrRecTree { get; set; }
        public virtual DbSet<HrRecVacancies> HrRecVacancies { get; set; }
        public virtual DbSet<HrRecWagesEmp> HrRecWagesEmp { get; set; }
        public virtual DbSet<HrRecWagesSupervision> HrRecWagesSupervision { get; set; }
        public virtual DbSet<HrRecWebEducation> HrRecWebEducation { get; set; }
        public virtual DbSet<HrRecWebProfHist> HrRecWebProfHist { get; set; }
        public virtual DbSet<HrRecWebTraining> HrRecWebTraining { get; set; }
        public virtual DbSet<HrSeeker> HrSeeker { get; set; }
        public virtual DbSet<HrSeekerWeb> HrSeekerWeb { get; set; }
        public virtual DbSet<HrSkillsD> HrSkillsD { get; set; }
        public virtual DbSet<HrTargetIndustry> HrTargetIndustry { get; set; }
        public virtual DbSet<HrTecAssessment> HrTecAssessment { get; set; }
        public virtual DbSet<HrTecCriteria> HrTecCriteria { get; set; }
        public virtual DbSet<HrTecCriteriaD> HrTecCriteriaD { get; set; }
        public virtual DbSet<HrTicket> HrTicket { get; set; }
        public virtual DbSet<HrTicketAuthority> HrTicketAuthority { get; set; }
        public virtual DbSet<HrTicketCategory> HrTicketCategory { get; set; }
        public virtual DbSet<HrTicketCoordinator> HrTicketCoordinator { get; set; }
        public virtual DbSet<HrTicketLog> HrTicketLog { get; set; }
        public virtual DbSet<HrTicketSelectLev1> HrTicketSelectLev1 { get; set; }
        public virtual DbSet<HrTicketSelectLev2> HrTicketSelectLev2 { get; set; }
        public virtual DbSet<HrTicketSelectLev3> HrTicketSelectLev3 { get; set; }
        public virtual DbSet<HrTicketSubCategory> HrTicketSubCategory { get; set; }
        public virtual DbSet<HrVisaEmployeeAlgeria> HrVisaEmployeeAlgeria { get; set; }
        public virtual DbSet<HrWorkExperience> HrWorkExperience { get; set; }
        public virtual DbSet<ImportDData> ImportDData { get; set; }
        public virtual DbSet<ImportDKeys> ImportDKeys { get; set; }
        public virtual DbSet<ImportDSp> ImportDSp { get; set; }
        public virtual DbSet<ImportM> ImportM { get; set; }
        public virtual DbSet<InjuredPerson> InjuredPerson { get; set; }
        public virtual DbSet<InternalMeetingClass> InternalMeetingClass { get; set; }
        public virtual DbSet<InternalMeetingDirector> InternalMeetingDirector { get; set; }
        public virtual DbSet<InternalMeetingDocs> InternalMeetingDocs { get; set; }
        public virtual DbSet<InternalMeetingProjects> InternalMeetingProjects { get; set; }
        public virtual DbSet<InternalPhones> InternalPhones { get; set; }
        public virtual DbSet<ItContractArea> ItContractArea { get; set; }
        public virtual DbSet<ItContractCostelement> ItContractCostelement { get; set; }
        public virtual DbSet<ItContractM> ItContractM { get; set; }
        public virtual DbSet<ItContractPaymentType> ItContractPaymentType { get; set; }
        public virtual DbSet<ItContractSuppliers> ItContractSuppliers { get; set; }
        public virtual DbSet<ItPoEmpApprove> ItPoEmpApprove { get; set; }
        public virtual DbSet<ItSysRepStatistics> ItSysRepStatistics { get; set; }
        public virtual DbSet<ItincidentCauseAnalysis> ItincidentCauseAnalysis { get; set; }
        public virtual DbSet<ItincidentImpactService> ItincidentImpactService { get; set; }
        public virtual DbSet<ItincidentM> ItincidentM { get; set; }
        public virtual DbSet<ItincidentRecommend> ItincidentRecommend { get; set; }
        public virtual DbSet<ItphysicalCategories> ItphysicalCategories { get; set; }
        public virtual DbSet<ItphysicalDSites> ItphysicalDSites { get; set; }
        public virtual DbSet<ItphysicalDUsers> ItphysicalDUsers { get; set; }
        public virtual DbSet<ItphysicalHistory> ItphysicalHistory { get; set; }
        public virtual DbSet<ItphysicalM> ItphysicalM { get; set; }
        public virtual DbSet<ItphysicalTypes> ItphysicalTypes { get; set; }
        public virtual DbSet<ItphysicalUsers> ItphysicalUsers { get; set; }
        public virtual DbSet<ItsurveyCategory> ItsurveyCategory { get; set; }
        public virtual DbSet<ItsurveyDetails> ItsurveyDetails { get; set; }
        public virtual DbSet<ItsurveyMaster> ItsurveyMaster { get; set; }
        public virtual DbSet<ItsurveyQuestions> ItsurveyQuestions { get; set; }
        public virtual DbSet<ItsurveySurveys> ItsurveySurveys { get; set; }
        public virtual DbSet<LegalAffair> LegalAffair { get; set; }
        public virtual DbSet<LegalAffairType> LegalAffairType { get; set; }
        public virtual DbSet<LegalCharges> LegalCharges { get; set; }
        public virtual DbSet<LegalCustomers> LegalCustomers { get; set; }
        public virtual DbSet<LegalJudge> LegalJudge { get; set; }
        public virtual DbSet<LegalLawyers> LegalLawyers { get; set; }
        public virtual DbSet<LegelExpertOffices> LegelExpertOffices { get; set; }
        public virtual DbSet<LegelExpertsession> LegelExpertsession { get; set; }
        public virtual DbSet<LegelSessions> LegelSessions { get; set; }
        public virtual DbSet<MailMessage> MailMessage { get; set; }
        public virtual DbSet<MailReceiver> MailReceiver { get; set; }
        public virtual DbSet<MailSmtp> MailSmtp { get; set; }
        public virtual DbSet<MainAuthentication> MainAuthentication { get; set; }
        public virtual DbSet<MainAuthority> MainAuthority { get; set; }
        public virtual DbSet<MainCostCenter> MainCostCenter { get; set; }
        public virtual DbSet<MainGrades> MainGrades { get; set; }
        public virtual DbSet<MainLkBank> MainLkBank { get; set; }
        public virtual DbSet<MainLkCurrency> MainLkCurrency { get; set; }
        public virtual DbSet<MainLog> MainLog { get; set; }
        public virtual DbSet<MainPages> MainPages { get; set; }
        public virtual DbSet<MainProtect> MainProtect { get; set; }
        public virtual DbSet<MainProtectItems> MainProtectItems { get; set; }
        public virtual DbSet<MainSysGroup> MainSysGroup { get; set; }
        public virtual DbSet<MainSystems> MainSystems { get; set; }
        public virtual DbSet<MainUsers> MainUsers { get; set; }
        public virtual DbSet<MainUsersGroups> MainUsersGroups { get; set; }
        public virtual DbSet<ManPowerAssignTitles> ManPowerAssignTitles { get; set; }
        public virtual DbSet<ManPowerBudget> ManPowerBudget { get; set; }
        public virtual DbSet<ManPowerProjectDateLine> ManPowerProjectDateLine { get; set; }
        public virtual DbSet<MappingSheet> MappingSheet { get; set; }
        public virtual DbSet<MaterialRequestM> MaterialRequestM { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Migrations> Migrations { get; set; }
        public virtual DbSet<MobAreas> MobAreas { get; set; }
        public virtual DbSet<MobBlocks> MobBlocks { get; set; }
        public virtual DbSet<MobClass> MobClass { get; set; }
        public virtual DbSet<MobProjectDet> MobProjectDet { get; set; }
        public virtual DbSet<MobProjectDetBlocks> MobProjectDetBlocks { get; set; }
        public virtual DbSet<MobProjectM> MobProjectM { get; set; }
        public virtual DbSet<MsgError> MsgError { get; set; }
        public virtual DbSet<NegativeAllow> NegativeAllow { get; set; }
        public virtual DbSet<NewsEnferadCategory> NewsEnferadCategory { get; set; }
        public virtual DbSet<NonReport> NonReport { get; set; }
        public virtual DbSet<PaySlip> PaySlip { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<PrintDocGroupFilters> PrintDocGroupFilters { get; set; }
        public virtual DbSet<PrintDocGroupGroups> PrintDocGroupGroups { get; set; }
        public virtual DbSet<ProcStepsWithCompleted> ProcStepsWithCompleted { get; set; }
        public virtual DbSet<ProjTptItemsRelations> ProjTptItemsRelations { get; set; }
        public virtual DbSet<PublicMobilesData> PublicMobilesData { get; set; }
        public virtual DbSet<PurSupplyOrderD> PurSupplyOrderD { get; set; }
        public virtual DbSet<PurSupplyOrderM> PurSupplyOrderM { get; set; }
        public virtual DbSet<PurTitem> PurTitem { get; set; }
        public virtual DbSet<PurTlocalPurchaseOrderD> PurTlocalPurchaseOrderD { get; set; }
        public virtual DbSet<PurTlocalPurchaseOrderM> PurTlocalPurchaseOrderM { get; set; }
        public virtual DbSet<PurTmrcontrolsReviewD> PurTmrcontrolsReviewD { get; set; }
        public virtual DbSet<PurTmrcontrolsReviewM> PurTmrcontrolsReviewM { get; set; }
        public virtual DbSet<PurTproject> PurTproject { get; set; }
        public virtual DbSet<PurTsupplier> PurTsupplier { get; set; }
        public virtual DbSet<PurchasingAuthority> PurchasingAuthority { get; set; }
        public virtual DbSet<PurchasingOrderD> PurchasingOrderD { get; set; }
        public virtual DbSet<PurchasingOrderItemsD> PurchasingOrderItemsD { get; set; }
        public virtual DbSet<PurchasingOrderM> PurchasingOrderM { get; set; }
        public virtual DbSet<PurchasingOrderResourceD> PurchasingOrderResourceD { get; set; }
        public virtual DbSet<QualityAsmeForms> QualityAsmeForms { get; set; }
        public virtual DbSet<QualityAsmeProcedure> QualityAsmeProcedure { get; set; }
        public virtual DbSet<QualityIsoDepartment> QualityIsoDepartment { get; set; }
        public virtual DbSet<QualityIsoForms> QualityIsoForms { get; set; }
        public virtual DbSet<QualityIsoProcedure> QualityIsoProcedure { get; set; }
        public virtual DbSet<QuizAnswers> QuizAnswers { get; set; }
        public virtual DbSet<QuizQuestionCategory> QuizQuestionCategory { get; set; }
        public virtual DbSet<QuizQuestions> QuizQuestions { get; set; }
        public virtual DbSet<QuizQuiz> QuizQuiz { get; set; }
        public virtual DbSet<QuizStudentD> QuizStudentD { get; set; }
        public virtual DbSet<QuizStudentM> QuizStudentM { get; set; }
        public virtual DbSet<QuizTypes> QuizTypes { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<RelatedTableD> RelatedTableD { get; set; }
        public virtual DbSet<RelatedTableM> RelatedTableM { get; set; }
        public virtual DbSet<Resources> Resources { get; set; }
        public virtual DbSet<RoSalesD> RoSalesD { get; set; }
        public virtual DbSet<RoSalesM> RoSalesM { get; set; }
        public virtual DbSet<RoStocOutM> RoStocOutM { get; set; }
        public virtual DbSet<RoStockOutD> RoStockOutD { get; set; }
        public virtual DbSet<RoTcash> RoTcash { get; set; }
        public virtual DbSet<RoTcashIn> RoTcashIn { get; set; }
        public virtual DbSet<RoTcashOut> RoTcashOut { get; set; }
        public virtual DbSet<RoTclient> RoTclient { get; set; }
        public virtual DbSet<RoTitem> RoTitem { get; set; }
        public virtual DbSet<RoTpurchaseD> RoTpurchaseD { get; set; }
        public virtual DbSet<RoTpurchaseM> RoTpurchaseM { get; set; }
        public virtual DbSet<RoTrepresentative> RoTrepresentative { get; set; }
        public virtual DbSet<RoTspent> RoTspent { get; set; }
        public virtual DbSet<RoTstock> RoTstock { get; set; }
        public virtual DbSet<RoTsupplier> RoTsupplier { get; set; }
        public virtual DbSet<RoTunitType> RoTunitType { get; set; }
        public virtual DbSet<RplId> RplId { get; set; }
        public virtual DbSet<RplNon> RplNon { get; set; }
        public virtual DbSet<RplTrans> RplTrans { get; set; }
        public virtual DbSet<RplTransFrMainToSub> RplTransFrMainToSub { get; set; }
        public virtual DbSet<RulPurchase> RulPurchase { get; set; }
        public virtual DbSet<RulSales> RulSales { get; set; }
        public virtual DbSet<RulStock> RulStock { get; set; }
        public virtual DbSet<SafetyIncident> SafetyIncident { get; set; }
        public virtual DbSet<SafetyIncidentLocation> SafetyIncidentLocation { get; set; }
        public virtual DbSet<SafetyInjuredPersons> SafetyInjuredPersons { get; set; }
        public virtual DbSet<SapGroup> SapGroup { get; set; }
        public virtual DbSet<SapJobTitle> SapJobTitle { get; set; }
        public virtual DbSet<SapProjectFinance> SapProjectFinance { get; set; }
        public virtual DbSet<SaphrCodingAllocation> SaphrCodingAllocation { get; set; }
        public virtual DbSet<SaphrCodingArea> SaphrCodingArea { get; set; }
        public virtual DbSet<SaphrCodingCompany> SaphrCodingCompany { get; set; }
        public virtual DbSet<SaphrCodingCompanyAuth> SaphrCodingCompanyAuth { get; set; }
        public virtual DbSet<SaphrCodingDepartment> SaphrCodingDepartment { get; set; }
        public virtual DbSet<SaphrCodingPosition> SaphrCodingPosition { get; set; }
        public virtual DbSet<SaphrCodingRelation> SaphrCodingRelation { get; set; }
        public virtual DbSet<SaphrCodingRequests> SaphrCodingRequests { get; set; }
        public virtual DbSet<SaphrCodingRequestsD> SaphrCodingRequestsD { get; set; }
        public virtual DbSet<SaphrCodingSubType> SaphrCodingSubType { get; set; }
        public virtual DbSet<SaphrCodingTest> SaphrCodingTest { get; set; }
        public virtual DbSet<SaphrCodingType> SaphrCodingType { get; set; }
        public virtual DbSet<SaphrCodingUnit> SaphrCodingUnit { get; set; }
        public virtual DbSet<ScApprovalType> ScApprovalType { get; set; }
        public virtual DbSet<ScPayment> ScPayment { get; set; }
        public virtual DbSet<ScPaymentApproval> ScPaymentApproval { get; set; }
        public virtual DbSet<ScPaymentD> ScPaymentD { get; set; }
        public virtual DbSet<ScPaymentType> ScPaymentType { get; set; }
        public virtual DbSet<ScPaymentUsers> ScPaymentUsers { get; set; }
        public virtual DbSet<ScPaymentsAuthority> ScPaymentsAuthority { get; set; }
        public virtual DbSet<ScReviewD> ScReviewD { get; set; }
        public virtual DbSet<ScReviewM> ScReviewM { get; set; }
        public virtual DbSet<ScTypeOfWork> ScTypeOfWork { get; set; }
        public virtual DbSet<ScaffoldingNotesD> ScaffoldingNotesD { get; set; }
        public virtual DbSet<ScaffoldingNotesM> ScaffoldingNotesM { get; set; }
        public virtual DbSet<ScaffoldingOpeningBalanceD> ScaffoldingOpeningBalanceD { get; set; }
        public virtual DbSet<ScaffoldingPeakD> ScaffoldingPeakD { get; set; }
        public virtual DbSet<ScaffoldingPeakM> ScaffoldingPeakM { get; set; }
        public virtual DbSet<ScaffoldingPlanPoD> ScaffoldingPlanPoD { get; set; }
        public virtual DbSet<ScaffoldingPlanPoM> ScaffoldingPlanPoM { get; set; }
        public virtual DbSet<ScaffoldingPlanStoreD> ScaffoldingPlanStoreD { get; set; }
        public virtual DbSet<ScaffoldingPlanStoreM> ScaffoldingPlanStoreM { get; set; }
        public virtual DbSet<ScaffoldingPlanTransferFromProjectsD> ScaffoldingPlanTransferFromProjectsD { get; set; }
        public virtual DbSet<ScaffoldingPlanTransferFromProjectsM> ScaffoldingPlanTransferFromProjectsM { get; set; }
        public virtual DbSet<ScaffoldingReleaseD> ScaffoldingReleaseD { get; set; }
        public virtual DbSet<ScaffoldingRequiredD> ScaffoldingRequiredD { get; set; }
        public virtual DbSet<ScaffoldingStore> ScaffoldingStore { get; set; }
        public virtual DbSet<ScaffoldingSystem> ScaffoldingSystem { get; set; }
        public virtual DbSet<SdmProjectType> SdmProjectType { get; set; }
        public virtual DbSet<SdmProjects> SdmProjects { get; set; }
        public virtual DbSet<SdmRequest> SdmRequest { get; set; }
        public virtual DbSet<SdmRequestComments> SdmRequestComments { get; set; }
        public virtual DbSet<SdmResource> SdmResource { get; set; }
        public virtual DbSet<SdmTaskType> SdmTaskType { get; set; }
        public virtual DbSet<SdmTasks> SdmTasks { get; set; }
        public virtual DbSet<SdmTimeLine> SdmTimeLine { get; set; }
        public virtual DbSet<SettingBarCodePrint> SettingBarCodePrint { get; set; }
        public virtual DbSet<SettingBarcode> SettingBarcode { get; set; }
        public virtual DbSet<SettingBarcodeD> SettingBarcodeD { get; set; }
        public virtual DbSet<SettingBarcodeDD> SettingBarcodeDD { get; set; }
        public virtual DbSet<SettingGeneral> SettingGeneral { get; set; }
        public virtual DbSet<SettingMdl> SettingMdl { get; set; }
        public virtual DbSet<SettingMdlD> SettingMdlD { get; set; }
        public virtual DbSet<SettingTsystem> SettingTsystem { get; set; }
        public virtual DbSet<ShowColumn> ShowColumn { get; set; }
        public virtual DbSet<ShowColumnSum> ShowColumnSum { get; set; }
        public virtual DbSet<ShowHidden> ShowHidden { get; set; }
        public virtual DbSet<SuFields> SuFields { get; set; }
        public virtual DbSet<SuFieldsDb> SuFieldsDb { get; set; }
        public virtual DbSet<SuNon> SuNon { get; set; }
        public virtual DbSet<SuNonDb> SuNonDb { get; set; }
        public virtual DbSet<SubContractorMapping> SubContractorMapping { get; set; }
        public virtual DbSet<SurvSurvey> SurvSurvey { get; set; }
        public virtual DbSet<SurvSurveyTransactions> SurvSurveyTransactions { get; set; }
        public virtual DbSet<TableName> TableName { get; set; }
        public virtual DbSet<TableNameBasicId> TableNameBasicId { get; set; }
        public virtual DbSet<TableNameId> TableNameId { get; set; }
        public virtual DbSet<TableNameSettingId> TableNameSettingId { get; set; }
        public virtual DbSet<TableNameTrx> TableNameTrx { get; set; }
        public virtual DbSet<TalentAddTopic> TalentAddTopic { get; set; }
        public virtual DbSet<TalentClient> TalentClient { get; set; }
        public virtual DbSet<TalentCountry> TalentCountry { get; set; }
        public virtual DbSet<TalentCyclePhase> TalentCyclePhase { get; set; }
        public virtual DbSet<TalentDepartment> TalentDepartment { get; set; }
        public virtual DbSet<TalentEntryType> TalentEntryType { get; set; }
        public virtual DbSet<TalentLessonLearnedCategory> TalentLessonLearnedCategory { get; set; }
        public virtual DbSet<TalentLog> TalentLog { get; set; }
        public virtual DbSet<TalentLogSearch> TalentLogSearch { get; set; }
        public virtual DbSet<TalentProjectType> TalentProjectType { get; set; }
        public virtual DbSet<TalentRegion> TalentRegion { get; set; }
        public virtual DbSet<TalentResultCategory> TalentResultCategory { get; set; }
        public virtual DbSet<TalentScope> TalentScope { get; set; }
        public virtual DbSet<TalentTags> TalentTags { get; set; }
        public virtual DbSet<TalentUsers> TalentUsers { get; set; }
        public virtual DbSet<TalentUsersDelegat> TalentUsersDelegat { get; set; }
        public virtual DbSet<TalentWorkFlow> TalentWorkFlow { get; set; }
        public virtual DbSet<TalentWorkFlowSetting> TalentWorkFlowSetting { get; set; }
        public virtual DbSet<TbusinessType> TbusinessType { get; set; }
        public virtual DbSet<Tclient> Tclient { get; set; }
        public virtual DbSet<Tconsultant> Tconsultant { get; set; }
        public virtual DbSet<Tcontinent> Tcontinent { get; set; }
        public virtual DbSet<Tcost> Tcost { get; set; }
        public virtual DbSet<TcostType> TcostType { get; set; }
        public virtual DbSet<Tcountry> Tcountry { get; set; }
        public virtual DbSet<Tdriver> Tdriver { get; set; }
        public virtual DbSet<TEMPHATAttend> TEMPHATAttend { get; set; }
        public virtual DbSet<TEMPHATEmployee> TEMPHATEmployee { get; set; }
        public virtual DbSet<TEMPHATUsers> TEMPHATUsers { get; set; }
        public virtual DbSet<TempId> TempId { get; set; }
        public virtual DbSet<Temphiredate> Temphiredate { get; set; }
        public virtual DbSet<Tempw> Tempw { get; set; }
        public virtual DbSet<TenderCountry> TenderCountry { get; set; }
        public virtual DbSet<TenderD> TenderD { get; set; }
        public virtual DbSet<TenderDepartment> TenderDepartment { get; set; }
        public virtual DbSet<TenderDistrict> TenderDistrict { get; set; }
        public virtual DbSet<TenderEngineer> TenderEngineer { get; set; }
        public virtual DbSet<TenderM> TenderM { get; set; }
        public virtual DbSet<TenderProjectCategories> TenderProjectCategories { get; set; }
        public virtual DbSet<TenderProjectPhases> TenderProjectPhases { get; set; }
        public virtual DbSet<TenderRemarks> TenderRemarks { get; set; }
        public virtual DbSet<TenderStatus> TenderStatus { get; set; }
        public virtual DbSet<TenderTransactions> TenderTransactions { get; set; }
        public virtual DbSet<TenderUsers> TenderUsers { get; set; }
        public virtual DbSet<Tequipement> Tequipement { get; set; }
        public virtual DbSet<TequipementRecommendedItemD> TequipementRecommendedItemD { get; set; }
        public virtual DbSet<TequipmementD> TequipmementD { get; set; }
        public virtual DbSet<TequipmementDriversD> TequipmementDriversD { get; set; }
        public virtual DbSet<Test> Test { get; set; }
        public virtual DbSet<TestCars> TestCars { get; set; }
        public virtual DbSet<TestEmpD> TestEmpD { get; set; }
        public virtual DbSet<TestHatEmp> TestHatEmp { get; set; }
        public virtual DbSet<TestT1> TestT1 { get; set; }
        public virtual DbSet<Testt> Testt { get; set; }
        public virtual DbSet<TitleCode> TitleCode { get; set; }
        public virtual DbSet<TjobOrderD> TjobOrderD { get; set; }
        public virtual DbSet<TjobOrderM> TjobOrderM { get; set; }
        public virtual DbSet<TjobOrderMaintainD> TjobOrderMaintainD { get; set; }
        public virtual DbSet<TjobOrderMaintainM> TjobOrderMaintainM { get; set; }
        public virtual DbSet<TndrCurrency> TndrCurrency { get; set; }
        public virtual DbSet<TndrProjectInformation> TndrProjectInformation { get; set; }
        public virtual DbSet<TndrProjectInformationDetail> TndrProjectInformationDetail { get; set; }
        public virtual DbSet<TndrTarea> TndrTarea { get; set; }
        public virtual DbSet<TndrTboqname> TndrTboqname { get; set; }
        public virtual DbSet<TndrTbuilding> TndrTbuilding { get; set; }
        public virtual DbSet<TndrTcategory> TndrTcategory { get; set; }
        public virtual DbSet<TndrTdepartment> TndrTdepartment { get; set; }
        public virtual DbSet<TndrTdescription> TndrTdescription { get; set; }
        public virtual DbSet<TndrTitemDescription> TndrTitemDescription { get; set; }
        public virtual DbSet<TndrTitems> TndrTitems { get; set; }
        public virtual DbSet<TndrTitemsCatPermissionD> TndrTitemsCatPermissionD { get; set; }
        public virtual DbSet<TndrTitemsCatPermissionM> TndrTitemsCatPermissionM { get; set; }
        public virtual DbSet<TndrTitemsSetCategory> TndrTitemsSetCategory { get; set; }
        public virtual DbSet<TndrTitemsSetCategoryM> TndrTitemsSetCategoryM { get; set; }
        public virtual DbSet<TndrTproject> TndrTproject { get; set; }
        public virtual DbSet<TndrTsite> TndrTsite { get; set; }
        public virtual DbSet<TndrTsubCategory> TndrTsubCategory { get; set; }
        public virtual DbSet<TndrTuserCategoryD> TndrTuserCategoryD { get; set; }
        public virtual DbSet<TndrTuserCategoryM> TndrTuserCategoryM { get; set; }
        public virtual DbSet<TpettyD> TpettyD { get; set; }
        public virtual DbSet<TpettyM> TpettyM { get; set; }
        public virtual DbSet<TpettyUser> TpettyUser { get; set; }
        public virtual DbSet<Tpipes> Tpipes { get; set; }
        public virtual DbSet<TpipesD> TpipesD { get; set; }
        public virtual DbSet<TpipesFitter> TpipesFitter { get; set; }
        public virtual DbSet<TpipesWeld> TpipesWeld { get; set; }
        public virtual DbSet<Tport> Tport { get; set; }
        public virtual DbSet<TportType> TportType { get; set; }
        public virtual DbSet<TprAanApproval> TprAanApproval { get; set; }
        public virtual DbSet<TprAanApprovalAansupplier> TprAanApprovalAansupplier { get; set; }
        public virtual DbSet<TprAanApprovalManual> TprAanApprovalManual { get; set; }
        public virtual DbSet<TprAanApprovalSupplier> TprAanApprovalSupplier { get; set; }
        public virtual DbSet<TprAanM> TprAanM { get; set; }
        public virtual DbSet<TprAanNegotiationD> TprAanNegotiationD { get; set; }
        public virtual DbSet<TprBoqCostD> TprBoqCostD { get; set; }

        public virtual DbSet<TprBoqCostM> TprBoqCostM { get; set; }
        public virtual DbSet<TprBoqD> TprBoqD { get; set; }
        public virtual DbSet<TprBoqM> TprBoqM { get; set; }
        public virtual DbSet<TprBrand> TprBrand { get; set; }
        public virtual DbSet<TprComparisonFinalItemsD> TprComparisonFinalItemsD { get; set; }
        public virtual DbSet<TprComparisonFinalSuppliersD> TprComparisonFinalSuppliersD { get; set; }
        public virtual DbSet<TprComparisonNegotiationM> TprComparisonNegotiationM { get; set; }
        public virtual DbSet<TprComparisonNegotiationSuppliersD> TprComparisonNegotiationSuppliersD { get; set; }
        public virtual DbSet<TprComparisonQuotedFinalM> TprComparisonQuotedFinalM { get; set; }
        public virtual DbSet<TprComparisonQuotedItemsD> TprComparisonQuotedItemsD { get; set; }
        public virtual DbSet<TprComparisonQuotedItemsNegotiationD> TprComparisonQuotedItemsNegotiationD { get; set; }
        public virtual DbSet<TprComparisonQuotedM> TprComparisonQuotedM { get; set; }
        public virtual DbSet<TprComparisonQuotedSuppliersD> TprComparisonQuotedSuppliersD { get; set; }
        public virtual DbSet<TprContractAdminForm> TprContractAdminForm { get; set; }
        public virtual DbSet<TprContractApproval> TprContractApproval { get; set; }
        public virtual DbSet<TprEvalByOperationD> TprEvalByOperationD { get; set; }
        public virtual DbSet<TprEvalByOperationM> TprEvalByOperationM { get; set; }
        public virtual DbSet<TprEvalByProcD> TprEvalByProcD { get; set; }
        public virtual DbSet<TprEvalByProcD1> TprEvalByProcD1 { get; set; }
        public virtual DbSet<TprEvalByProcM> TprEvalByProcM { get; set; }
        public virtual DbSet<TprEvalD> TprEvalD { get; set; }
        public virtual DbSet<TprEvalM> TprEvalM { get; set; }
        public virtual DbSet<TprEvlParamter> TprEvlParamter { get; set; }
        public virtual DbSet<TprExpType> TprExpType { get; set; }
        public virtual DbSet<TprExpTypeCat> TprExpTypeCat { get; set; }
        public virtual DbSet<TprExpedPlanComments> TprExpedPlanComments { get; set; }
        public virtual DbSet<TprExpedPlanD> TprExpedPlanD { get; set; }
        public virtual DbSet<TprExpedPlanM> TprExpedPlanM { get; set; }
        public virtual DbSet<TprExpedPlanSteps> TprExpedPlanSteps { get; set; }
        public virtual DbSet<TprFrmEnquery> TprFrmEnquery { get; set; }
        public virtual DbSet<TprMainScope> TprMainScope { get; set; }
        public virtual DbSet<TprMileStones> TprMileStones { get; set; }
        public virtual DbSet<TprNotification> TprNotification { get; set; }
        public virtual DbSet<TprPlan> TprPlan { get; set; }
        public virtual DbSet<TprPlanActualDateD> TprPlanActualDateD { get; set; }
        public virtual DbSet<TprPlanActualDateM> TprPlanActualDateM { get; set; }
        public virtual DbSet<TprPlanAuth> TprPlanAuth { get; set; }
        public virtual DbSet<TprPlanContractInternalReview> TprPlanContractInternalReview { get; set; }
        public virtual DbSet<TprPlanD> TprPlanD { get; set; }
        public virtual DbSet<TprPlanExpdWorkFlow> TprPlanExpdWorkFlow { get; set; }
        public virtual DbSet<TprPlanLetterOfIntent> TprPlanLetterOfIntent { get; set; }
        public virtual DbSet<TprPlanLongLeadD> TprPlanLongLeadD { get; set; }
        public virtual DbSet<TprPlanLongLeadM> TprPlanLongLeadM { get; set; }
        public virtual DbSet<TprPlanMakeOrBuyAnalysis> TprPlanMakeOrBuyAnalysis { get; set; }
        public virtual DbSet<TprPlanManualD> TprPlanManualD { get; set; }
        public virtual DbSet<TprPlanManualM> TprPlanManualM { get; set; }
        public virtual DbSet<TprPlanRegertLetter> TprPlanRegertLetter { get; set; }
        public virtual DbSet<TprPlanRegertLetterD> TprPlanRegertLetterD { get; set; }
        public virtual DbSet<TprPlanRequestForQoutation> TprPlanRequestForQoutation { get; set; }
        public virtual DbSet<TprPlanSteps> TprPlanSteps { get; set; }
        public virtual DbSet<TprPlanStepsDescription> TprPlanStepsDescription { get; set; }
        public virtual DbSet<TprPlanStepsUsers> TprPlanStepsUsers { get; set; }
        public virtual DbSet<TprPlanStructD> TprPlanStructD { get; set; }
        public virtual DbSet<TprPlanStructM> TprPlanStructM { get; set; }
        public virtual DbSet<TprPlanSubcontractorSignature> TprPlanSubcontractorSignature { get; set; }
        public virtual DbSet<TprPlanSystemType> TprPlanSystemType { get; set; }
        public virtual DbSet<TprPlanTechinalSubmittalApproval> TprPlanTechinalSubmittalApproval { get; set; }
        public virtual DbSet<TprPlanTechnicalSubmittalDataToSite> TprPlanTechnicalSubmittalDataToSite { get; set; }
        public virtual DbSet<TprPlanType> TprPlanType { get; set; }
        public virtual DbSet<TprPlanUsers> TprPlanUsers { get; set; }
        public virtual DbSet<TprPlanWorkFlow> TprPlanWorkFlow { get; set; }
        public virtual DbSet<TprProjectManager> TprProjectManager { get; set; }
        public virtual DbSet<TprQuotationD1> TprQuotationD1 { get; set; }
        public virtual DbSet<TprQuotationD2> TprQuotationD2 { get; set; }
        public virtual DbSet<TprQuotationD3> TprQuotationD3 { get; set; }
        public virtual DbSet<TprQuotationM> TprQuotationM { get; set; }
        public virtual DbSet<TprRecommendClientD> TprRecommendClientD { get; set; }
        public virtual DbSet<TprRecommendM> TprRecommendM { get; set; }
        public virtual DbSet<TprRecommendTenderD> TprRecommendTenderD { get; set; }
        public virtual DbSet<TprSupermission> TprSupermission { get; set; }
        public virtual DbSet<TprSupermissionProject> TprSupermissionProject { get; set; }
        public virtual DbSet<TprSupermissionWp> TprSupermissionWp { get; set; }
        public virtual DbSet<TprTadPayment> TprTadPayment { get; set; }
        public virtual DbSet<TprTask> TprTask { get; set; }
        public virtual DbSet<TprTaskD> TprTaskD { get; set; }
        public virtual DbSet<TprTaskTemplate> TprTaskTemplate { get; set; }
        public virtual DbSet<TprTaskUserComments> TprTaskUserComments { get; set; }
        public virtual DbSet<TprTpaymentsOndelivery> TprTpaymentsOndelivery { get; set; }
        public virtual DbSet<TprTretention> TprTretention { get; set; }
        public virtual DbSet<TprTypeOfWork> TprTypeOfWork { get; set; }
        public virtual DbSet<TprTypeOfWorkProject> TprTypeOfWorkProject { get; set; }
        public virtual DbSet<TprVendorEvaluotionRequest> TprVendorEvaluotionRequest { get; set; }
        public virtual DbSet<TprVendorEvalutionUpdate> TprVendorEvalutionUpdate { get; set; }
        public virtual DbSet<TprVendorRecommendationClientD> TprVendorRecommendationClientD { get; set; }
        public virtual DbSet<TprVendorRecommendationCompanyD> TprVendorRecommendationCompanyD { get; set; }
        public virtual DbSet<TprVendorRecommendationEvalD> TprVendorRecommendationEvalD { get; set; }
        public virtual DbSet<TprVendorRecommendationM> TprVendorRecommendationM { get; set; }
        public virtual DbSet<TprVendorRecommendationTenderD> TprVendorRecommendationTenderD { get; set; }
        public virtual DbSet<TprVendorSelectionD> TprVendorSelectionD { get; set; }
        public virtual DbSet<TprVendorSelectionM> TprVendorSelectionM { get; set; }
        public virtual DbSet<TprWpagreementD> TprWpagreementD { get; set; }
        public virtual DbSet<TprWpagreementM> TprWpagreementM { get; set; }
        public virtual DbSet<TprWpagreementManualD> TprWpagreementManualD { get; set; }
        public virtual DbSet<Tproject> Tproject { get; set; }
        public virtual DbSet<TprojectCurrency> TprojectCurrency { get; set; }
        public virtual DbSet<TrackingPurchasingApproval> TrackingPurchasingApproval { get; set; }
        public virtual DbSet<TrackingPurchasingM> TrackingPurchasingM { get; set; }
        public virtual DbSet<TrackingPurchasingPoM> TrackingPurchasingPoM { get; set; }
        public virtual DbSet<TrainingEvaluationCategory> TrainingEvaluationCategory { get; set; }
        public virtual DbSet<TrainingEvaluationCourses> TrainingEvaluationCourses { get; set; }
        public virtual DbSet<TrainingEvaluationD> TrainingEvaluationD { get; set; }
        public virtual DbSet<TrainingEvaluationElements> TrainingEvaluationElements { get; set; }
        public virtual DbSet<TrainingEvaluationM> TrainingEvaluationM { get; set; }
        public virtual DbSet<Trank> Trank { get; set; }
        public virtual DbSet<TrkProcuremantComments> TrkProcuremantComments { get; set; }
        public virtual DbSet<TrkProcurement> TrkProcurement { get; set; }
        public virtual DbSet<TrkProcurementAppType> TrkProcurementAppType { get; set; }
        public virtual DbSet<TrkProcurementApproval> TrkProcurementApproval { get; set; }
        public virtual DbSet<TrkProcurementD> TrkProcurementD { get; set; }
        public virtual DbSet<TrkProcurementTerms> TrkProcurementTerms { get; set; }
        public virtual DbSet<TrkProcurementType> TrkProcurementType { get; set; }
        public virtual DbSet<TrkPurchasingApproval> TrkPurchasingApproval { get; set; }
        public virtual DbSet<TrkPurchasingContactPersons> TrkPurchasingContactPersons { get; set; }
        public virtual DbSet<TrkPurchasingD> TrkPurchasingD { get; set; }
        public virtual DbSet<TrkPurchasingGroupItems> TrkPurchasingGroupItems { get; set; }
        public virtual DbSet<TrkPurchasingItemAction> TrkPurchasingItemAction { get; set; }
        public virtual DbSet<TrkPurchasingItemInMr> TrkPurchasingItemInMr { get; set; }
        public virtual DbSet<TrkPurchasingItemStoreReply> TrkPurchasingItemStoreReply { get; set; }
        public virtual DbSet<TrkPurchasingItems> TrkPurchasingItems { get; set; }
        public virtual DbSet<TrkPurchasingM> TrkPurchasingM { get; set; }
        public virtual DbSet<TrkPurchasingPoD> TrkPurchasingPoD { get; set; }
        public virtual DbSet<TrkPurchasingPoM> TrkPurchasingPoM { get; set; }
        public virtual DbSet<TrkPurchasingPropNewItms> TrkPurchasingPropNewItms { get; set; }
        public virtual DbSet<TrkPurchasingPtM> TrkPurchasingPtM { get; set; }
        public virtual DbSet<TrkPurchasingQuotationD> TrkPurchasingQuotationD { get; set; }
        public virtual DbSet<TrkPurchasingQuotationM> TrkPurchasingQuotationM { get; set; }
        public virtual DbSet<TrkPurchasingSelectedSuppliers> TrkPurchasingSelectedSuppliers { get; set; }
        public virtual DbSet<TrkPurchasingSuppliers> TrkPurchasingSuppliers { get; set; }
        public virtual DbSet<TrkPurchasingTqD> TrkPurchasingTqD { get; set; }
        public virtual DbSet<TrkPurchasingTqM> TrkPurchasingTqM { get; set; }
        public virtual DbSet<TrkPurchasingUnits> TrkPurchasingUnits { get; set; }
        public virtual DbSet<TrkUsers> TrkUsers { get; set; }
        public virtual DbSet<TrkUsersPermission> TrkUsersPermission { get; set; }
        public virtual DbSet<Tsupplier> Tsupplier { get; set; }
        public virtual DbSet<TsupplierBrand> TsupplierBrand { get; set; }
        public virtual DbSet<TsupplierContact> TsupplierContact { get; set; }
        public virtual DbSet<TsupplierPhone> TsupplierPhone { get; set; }
        public virtual DbSet<TsupplierTypeCode> TsupplierTypeCode { get; set; }
        public virtual DbSet<TsupplierTypeCodeD> TsupplierTypeCodeD { get; set; }
        public virtual DbSet<TsupplierWorkPackage> TsupplierWorkPackage { get; set; }
        public virtual DbSet<Ttask> Ttask { get; set; }
        public virtual DbSet<TunitType> TunitType { get; set; }
        public virtual DbSet<TwebAchievement> TwebAchievement { get; set; }
        public virtual DbSet<TwebAnnounces> TwebAnnounces { get; set; }
        public virtual DbSet<TwebArea> TwebArea { get; set; }
        public virtual DbSet<TwebwfAreas> TwebwfAreas { get; set; }

        public virtual DbSet<TwebBenefits> TwebBenefits { get; set; }
        public virtual DbSet<TwebBenefitsCat> TwebBenefitsCat { get; set; }
        public virtual DbSet<TwebBuOrganization> TwebBuOrganization { get; set; }
        public virtual DbSet<TwebCity> TwebCity { get; set; }
        public virtual DbSet<TwebClipping> TwebClipping { get; set; }
        public virtual DbSet<TwebClippingVideo> TwebClippingVideo { get; set; }
        public virtual DbSet<TwebConAttendanceSummary> TwebConAttendanceSummary { get; set; }
        public virtual DbSet<TwebConAttendanceSummaryM> TwebConAttendanceSummaryM { get; set; }
        public virtual DbSet<TwebConJobList> TwebConJobList { get; set; }
        public virtual DbSet<TwebConJobListCat> TwebConJobListCat { get; set; }
        public virtual DbSet<TwebContactList> TwebContactList { get; set; }
        public virtual DbSet<TwebDepartment> TwebDepartment { get; set; }
        public virtual DbSet<TwebElearn> TwebElearn { get; set; }
        public virtual DbSet<TwebEmpDepartment> TwebEmpDepartment { get; set; }
        public virtual DbSet<TwebEmpGrade> TwebEmpGrade { get; set; }
        public virtual DbSet<TwebHrAttendanceSummary> TwebHrAttendanceSummary { get; set; }
        public virtual DbSet<TwebHrAttendanceSummaryM> TwebHrAttendanceSummaryM { get; set; }
        public virtual DbSet<TwebHrEmployee> TwebHrEmployee { get; set; }
        public virtual DbSet<TwebHrJobList> TwebHrJobList { get; set; }
        public virtual DbSet<TwebHrJobListCat> TwebHrJobListCat { get; set; }
        public virtual DbSet<TwebHrProject> TwebHrProject { get; set; }
        public virtual DbSet<TwebHrProjectCat> TwebHrProjectCat { get; set; }
        public virtual DbSet<TwebHrusers> TwebHrusers { get; set; }
        public virtual DbSet<TwebInfraStructureServices> TwebInfraStructureServices { get; set; }
        public virtual DbSet<TwebInternalServices> TwebInternalServices { get; set; }
        public virtual DbSet<TwebInternalTrainers> TwebInternalTrainers { get; set; }
        public virtual DbSet<TwebItEmployee> TwebItEmployee { get; set; }
        public virtual DbSet<TwebItawarenes> TwebItawarenes { get; set; }
        public virtual DbSet<TwebItbusinessProcess> TwebItbusinessProcess { get; set; }
        public virtual DbSet<TwebItcommitments> TwebItcommitments { get; set; }
        public virtual DbSet<TwebItkpi> TwebItkpi { get; set; }
        public virtual DbSet<TwebItpolicy> TwebItpolicy { get; set; }
        public virtual DbSet<TwebLog> TwebLog { get; set; }
        public virtual DbSet<TwebNews> TwebNews { get; set; }
        public virtual DbSet<TwebProjects> TwebProjects { get; set; }


        public virtual DbSet<TwebQuality> TwebQuality { get; set; }
        public virtual DbSet<TwebServiceRequest> TwebServiceRequest { get; set; }
        public virtual DbSet<TwebSubDepartment> TwebSubDepartment { get; set; }
        public virtual DbSet<TwebSummerTraining> TwebSummerTraining { get; set; }
        public virtual DbSet<TwebSupportServices> TwebSupportServices { get; set; }
        public virtual DbSet<TwebUser> TwebUser { get; set; }
        public virtual DbSet<TwebUserManagers> TwebUserManagers { get; set; }
        public virtual DbSet<TwebWfEmpEducation> TwebWfEmpEducation { get; set; }
        public virtual DbSet<TwebWfEmpInterest> TwebWfEmpInterest { get; set; }
        public virtual DbSet<TwebWfEmpLanguage> TwebWfEmpLanguage { get; set; }
        public virtual DbSet<TwebWfEmpSkillsD> TwebWfEmpSkillsD { get; set; }
        public virtual DbSet<TwebWfEmpWorkExperience> TwebWfEmpWorkExperience { get; set; }
        public virtual DbSet<TwebWfEmployee> TwebWfEmployee { get; set; }
        public virtual DbSet<Main_Departments> Main_Departments { get; set; }
        public virtual DbSet<Main_Functions> Main_Functions { get; set; }
        public virtual DbSet<PAY_Active_Month> PAY_Active_Month { get; set; }
        public virtual DbSet<PAY_Verification> PAY_Verification { get; set; }
        public virtual DbSet<TwebWfEmployeeExt> TwebWfEmployeeExt { get; set; }
        public virtual DbSet<TwebWfMoqAuthority> TwebWfMoqAuthority { get; set; }
        public virtual DbSet<TwebWfMoqEval> TwebWfMoqEval { get; set; }
        public virtual DbSet<TwebWfMoqEvalD> TwebWfMoqEvalD { get; set; }
        public virtual DbSet<TwebWfMoqEvalDOld> TwebWfMoqEvalDOld { get; set; }
        public virtual DbSet<TwebWfMoqEvalOld> TwebWfMoqEvalOld { get; set; }
        public virtual DbSet<TwebWfMoqMaster> TwebWfMoqMaster { get; set; }
        public virtual DbSet<TwebWfMoqMasterOld> TwebWfMoqMasterOld { get; set; }
        public virtual DbSet<TwebWfVacationBalance> TwebWfVacationBalance { get; set; }
        public virtual DbSet<TwebwfAchievementCategory> TwebwfAchievementCategory { get; set; }
        public virtual DbSet<TwebwfAchievementType> TwebwfAchievementType { get; set; }
        public virtual DbSet<TwebwfAchieverOfTheYear> TwebwfAchieverOfTheYear { get; set; }
        public virtual DbSet<TwebwfAlbums> TwebwfAlbums { get; set; }
        public virtual DbSet<TwebwfAlbumsDet> TwebwfAlbumsDet { get; set; }
        public virtual DbSet<TwebwfApprovalPathBusinessUnitD> TwebwfApprovalPathBusinessUnitD { get; set; }
        public virtual DbSet<TwebwfApprovalPathD> TwebwfApprovalPathD { get; set; }
        public virtual DbSet<TwebwfApprovalPathExceptionD> TwebwfApprovalPathExceptionD { get; set; }
        public virtual DbSet<TwebwfApprovalPathM> TwebwfApprovalPathM { get; set; }
        public virtual DbSet<TwebwfBusinessCard> TwebwfBusinessCard { get; set; }
        public virtual DbSet<TwebwfBusinessCardManagement> TwebwfBusinessCardManagement { get; set; }
        public virtual DbSet<TwebwfBusinessMission> TwebwfBusinessMission { get; set; }
        public virtual DbSet<TwebwfChangeManager> TwebwfChangeManager { get; set; }
        public virtual DbSet<TwebwfCodes> TwebwfCodes { get; set; }
        public virtual DbSet<TwebwfDepartment> TwebwfDepartment { get; set; }
        public virtual DbSet<TwebwfEmbassy> TwebwfEmbassy { get; set; }
        public virtual DbSet<TwebwfEmbassyLetter> TwebwfEmbassyLetter { get; set; }
        public virtual DbSet<TwebwfForgetSign> TwebwfForgetSign { get; set; }
        public virtual DbSet<TwebwfGetHrcode> TwebwfGetHrcode { get; set; }
        public virtual DbSet<TwebwfGrade> TwebwfGrade { get; set; }
        public virtual DbSet<TwebwfItaccessRight> TwebwfItaccessRight { get; set; }
        public virtual DbSet<TwebwfItapplicationItem> TwebwfItapplicationItem { get; set; }
        public virtual DbSet<TwebwfItassetsEquipments> TwebwfItassetsEquipments { get; set; }
        public virtual DbSet<TwebwfItdelivered> TwebwfItdelivered { get; set; }
        public virtual DbSet<TwebwfItdeliveredD> TwebwfItdeliveredD { get; set; }
        public virtual DbSet<TwebwfItdeliveryServices> TwebwfItdeliveryServices { get; set; }
        public virtual DbSet<TwebwfItexecutiveEquipments> TwebwfItexecutiveEquipments { get; set; }
        public virtual DbSet<TwebwfItgroupDescription> TwebwfItgroupDescription { get; set; }
        public virtual DbSet<TwebwfItgroups> TwebwfItgroups { get; set; }
        public virtual DbSet<TwebwfIthardWareItem> TwebwfIthardWareItem { get; set; }
        public virtual DbSet<TwebwfIthardWareItemtemp> TwebwfIthardWareItemtemp { get; set; }
        public virtual DbSet<TwebwfItincludePr> TwebwfItincludePr { get; set; }
        public virtual DbSet<TwebwfItincludePrD> TwebwfItincludePrD { get; set; }
        public virtual DbSet<TwebwfItitemTypes> TwebwfItitemTypes { get; set; }
        public virtual DbSet<TwebwfItnewUser> TwebwfItnewUser { get; set; }
        public virtual DbSet<TwebwfItnewUserApplicationD> TwebwfItnewUserApplicationD { get; set; }
        public virtual DbSet<TwebwfItnewUserHardWareD> TwebwfItnewUserHardWareD { get; set; }
        public virtual DbSet<TwebwfItnewUserServiceItemD> TwebwfItnewUserServiceItemD { get; set; }
        public virtual DbSet<TwebwfItnewUserSoftWareD> TwebwfItnewUserSoftWareD { get; set; }
        public virtual DbSet<TwebwfItrequestAccessRight> TwebwfItrequestAccessRight { get; set; }
        public virtual DbSet<TwebwfItrequestAccessRightD> TwebwfItrequestAccessRightD { get; set; }
        public virtual DbSet<TwebwfItrequestApplications> TwebwfItrequestApplications { get; set; }
        public virtual DbSet<TwebwfItrequestApplicationsD> TwebwfItrequestApplicationsD { get; set; }
        public virtual DbSet<TwebwfItrequestClose> TwebwfItrequestClose { get; set; }
        public virtual DbSet<TwebwfItrequestContract> TwebwfItrequestContract { get; set; }
        public virtual DbSet<TwebwfItrequestEquipment> TwebwfItrequestEquipment { get; set; }
        public virtual DbSet<TwebwfItrequestEquipmentD> TwebwfItrequestEquipmentD { get; set; }
        public virtual DbSet<TwebwfItrequestMobileService> TwebwfItrequestMobileService { get; set; }
        public virtual DbSet<TwebwfItserviceItem> TwebwfItserviceItem { get; set; }
        public virtual DbSet<TwebwfItsoftwareItem> TwebwfItsoftwareItem { get; set; }
        public virtual DbSet<TwebwfLocation> TwebwfLocation { get; set; }
        public virtual DbSet<TwebwfLogHrrequests> TwebwfLogHrrequests { get; set; }
        public virtual DbSet<TwebwfMapTitle> TwebwfMapTitle { get; set; }
        public virtual DbSet<TwebwfMissionLocation> TwebwfMissionLocation { get; set; }
        public virtual DbSet<TwebwfOfficialHoliday> TwebwfOfficialHoliday { get; set; }
        public virtual DbSet<TwebwfOprDirectors> TwebwfOprDirectors { get; set; }
        public virtual DbSet<TwebwfPermission> TwebwfPermission { get; set; }
        public virtual DbSet<TwebwfPriority> TwebwfPriority { get; set; }
        public virtual DbSet<TwebwfProjectSubType> TwebwfProjectSubType { get; set; }
        public virtual DbSet<TwebwfProjectTypes> TwebwfProjectTypes { get; set; }
        public virtual DbSet<TwebwfProjects> TwebwfProjects { get; set; }

        public virtual DbSet<TwebwfRss> TwebwfRss { get; set; }
        public virtual DbSet<TwebwfService> TwebwfService { get; set; }
        public virtual DbSet<TwebwfSingType> TwebwfSingType { get; set; }
        public virtual DbSet<TwebwfSupportEmployee> TwebwfSupportEmployee { get; set; }
        public virtual DbSet<TwebwfSupportTicket> TwebwfSupportTicket { get; set; }
        public virtual DbSet<TwebwfTickets> TwebwfTickets { get; set; }
        public virtual DbSet<TwebwfTitle> TwebwfTitle { get; set; }
        public virtual DbSet<TwebwfVacation> TwebwfVacation { get; set; }
        public virtual DbSet<TwebwfVacationTmp> TwebwfVacationTmp { get; set; }
        public virtual DbSet<TwebwfVacationType> TwebwfVacationType { get; set; }
        public virtual DbSet<TwebwfVideoportal> TwebwfVideoportal { get; set; }
        public virtual DbSet<TwebwfVideos> TwebwfVideos { get; set; }
        public virtual DbSet<TwebwfWorkFlow> TwebwfWorkFlow { get; set; }
        public virtual DbSet<Twebwfresidence> Twebwfresidence { get; set; }
        public virtual DbSet<TworkPackage> TworkPackage { get; set; }
        public virtual DbSet<TworkPackageNewWithCode> TworkPackageNewWithCode { get; set; }
        public virtual DbSet<TworkPackageProjet> TworkPackageProjet { get; set; }
        public virtual DbSet<TworkPackageWorkGroup> TworkPackageWorkGroup { get; set; }
        public virtual DbSet<TworkPackageWorkType> TworkPackageWorkType { get; set; }
        public virtual DbSet<TwsBStock> TwsBStock { get; set; }
        public virtual DbSet<TwsComplainsD> TwsComplainsD { get; set; }
        public virtual DbSet<TwsComplainsMaintainD> TwsComplainsMaintainD { get; set; }
        public virtual DbSet<TwsCountry> TwsCountry { get; set; }
        public virtual DbSet<TwsCustomer> TwsCustomer { get; set; }
        public virtual DbSet<TwsEquipementType> TwsEquipementType { get; set; }
        public virtual DbSet<TwsExternalProcess> TwsExternalProcess { get; set; }
        public virtual DbSet<TwsExternalProcessMaintain> TwsExternalProcessMaintain { get; set; }
        public virtual DbSet<TwsFuelD> TwsFuelD { get; set; }
        public virtual DbSet<TwsFuelM> TwsFuelM { get; set; }
        public virtual DbSet<TwsInspection> TwsInspection { get; set; }
        public virtual DbSet<TwsInspectionsD> TwsInspectionsD { get; set; }
        public virtual DbSet<TwsInspectionsMaintainD> TwsInspectionsMaintainD { get; set; }
        public virtual DbSet<TwsItem> TwsItem { get; set; }
        public virtual DbSet<TwsItemAlt> TwsItemAlt { get; set; }
        public virtual DbSet<TwsItemCat> TwsItemCat { get; set; }
        public virtual DbSet<TwsItemOpenBalance> TwsItemOpenBalance { get; set; }
        public virtual DbSet<TwsJob> TwsJob { get; set; }
        public virtual DbSet<TwsPrOrderD> TwsPrOrderD { get; set; }
        public virtual DbSet<TwsPrOrderM> TwsPrOrderM { get; set; }
        public virtual DbSet<TwsPurchaseD> TwsPurchaseD { get; set; }
        public virtual DbSet<TwsPurchaseM> TwsPurchaseM { get; set; }
        public virtual DbSet<TwsSalesD> TwsSalesD { get; set; }
        public virtual DbSet<TwsSalesM> TwsSalesM { get; set; }
        public virtual DbSet<TwsSalesReturnD> TwsSalesReturnD { get; set; }
        public virtual DbSet<TwsSalesReturnM> TwsSalesReturnM { get; set; }
        public virtual DbSet<TwsStockLocation> TwsStockLocation { get; set; }
        public virtual DbSet<TwsStockOrderD> TwsStockOrderD { get; set; }
        public virtual DbSet<TwsStockOrderM> TwsStockOrderM { get; set; }
        public virtual DbSet<TwsSupplier> TwsSupplier { get; set; }
        public virtual DbSet<TwsTechnican> TwsTechnican { get; set; }
        public virtual DbSet<TwsTechnicanD> TwsTechnicanD { get; set; }
        public virtual DbSet<TwsTechnicanMaintainD> TwsTechnicanMaintainD { get; set; }
        public virtual DbSet<TypeTaxDeduct> TypeTaxDeduct { get; set; }
        public virtual DbSet<TypeTaxDeductG> TypeTaxDeductG { get; set; }
        public virtual DbSet<TypesAcc> TypesAcc { get; set; }
        public virtual DbSet<TypesAccBak> TypesAccBak { get; set; }
        public virtual DbSet<TypesDepositChecks> TypesDepositChecks { get; set; }
        public virtual DbSet<University> University { get; set; }
        public virtual DbSet<VacancyApply> VacancyApply { get; set; }
        public virtual DbSet<WAG_MobilesMacAddress> WAG_MobilesMacAddress { get; set; }
        public virtual DbSet<WagApiAreas> WagApiAreas { get; set; }
        public virtual DbSet<WagApiFileVersion> WagApiFileVersion { get; set; }
        public virtual DbSet<WagAttendance> WagAttendance { get; set; }
        public virtual DbSet<WagApiAttendances> WagApiAttendances { get; set; }
        public virtual DbSet<WagApiBlocks> WagApiBlocks { get; set; }
        public virtual DbSet<WagApiMigrations> WagApiMigrations { get; set; }
        public virtual DbSet<WagApiModelHasPermissions> WagApiModelHasPermissions { get; set; }
        public virtual DbSet<WagApiModelHasRoles> WagApiModelHasRoles { get; set; }
        public virtual DbSet<WagApiPermissions> WagApiPermissions { get; set; }
        public virtual DbSet<WagApiRoles> WagApiRoles { get; set; }
        public virtual DbSet<WagApiUsers> WagApiUsers { get; set; }
        public virtual DbSet<WagApiProjectsUsers> WagApiProjectsUsers { get; set; }
        public virtual DbSet<WagAreaBuilding> WagAreaBuilding { get; set; }
        public virtual DbSet<WagAreaRegion> WagAreaRegion { get; set; }
        public virtual DbSet<WagAreaSegment> WagAreaSegment { get; set; }
        public virtual DbSet<WagBudget> WagBudget { get; set; }
        public virtual DbSet<WagCondition> WagCondition { get; set; }
        public virtual DbSet<WagEmployee> WagEmployee { get; set; }
        public virtual DbSet<WagEmployeeBlackList> WagEmployeeBlackList { get; set; }
        public virtual DbSet<WagEmployeeDeleted> WagEmployeeDeleted { get; set; }
        public virtual DbSet<WagEmployeeHistory> WagEmployeeHistory { get; set; }
        public virtual DbSet<WagGrade> WagGrade { get; set; }
        public virtual DbSet<WagGroup> WagGroup { get; set; }
        public virtual DbSet<WagGroupPolicy> WagGroupPolicy { get; set; }
        public virtual DbSet<WagMainCategory> WagMainCategory { get; set; }
        public virtual DbSet<WagMainTrade> WagMainTrade { get; set; }
        public virtual DbSet<WagMonths> WagMonths { get; set; }
        public virtual DbSet<WagSalaryType> WagSalaryType { get; set; }
        public virtual DbSet<WagSubCategory> WagSubCategory { get; set; }
        public virtual DbSet<WagSubTrade> WagSubTrade { get; set; }
        public virtual DbSet<WagUsers> WagUsers { get; set; }
        public virtual DbSet<WagWagesD> WagWagesD { get; set; }
        public virtual DbSet<WagWagesDeductions> WagWagesDeductions { get; set; }
        public virtual DbSet<WagWagesM> WagWagesM { get; set; }
        public virtual DbSet<_000contactListNew> _000contactListNew { get; set; }

        public virtual DbSet<TravelRequest> TravelRequest { get; set; }
        public virtual DbSet<TravelRequestService> TravelRequestService { get; set; }

        // Unable to generate entity type for table 'dbo.WAG_API_notifications'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.testtender'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WAG_API_notifications_projects'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WAG_API_orders'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WAG_API_password_resets'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.test100'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Sheet1$'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WAG_API_projects_resources'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TWebWF_Employee_temp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Sheet1$_FilterDatabase'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WAG_API_projects_users'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WAG_API_role_has_permissions'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TWeb_Apps_Services'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TestEmail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TWebEmp_Title'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TPipe_Rev'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ITPhysical_Test'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo._@TablesRelations'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.C_FormPermision1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.shrirt'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Sheet2$'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo._@Setting_Acc'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TWeb_Title'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TRplDeleted'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Safety_Investigate'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo._@TSystem'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TWorkPackage_bakup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.mm'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.IT_SysRep_Systems'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.UpdateLocation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaySlip_Month'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TRK_Purchasing_Actions'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TRK_Purchasing_PT_D'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TWebWF_VacationBalance_Test'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Tracking_Purchasing_PO_d'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo._@Setting_Stock'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sup$'. Please see the warning messages.

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                //                optionsBuilder.UseSqlServer("Server=portal.hassanallam.com;Database=AIS;UID=sa;PWD=HappS@2020;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity<AccountsPermission>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName })
                    .HasName("PK_Accountr_Permission");

                entity.ToTable("_@AccountsPermission");

                entity.Property(e => e.TableName).HasMaxLength(220);

                entity.Property(e => e.FieldName).HasMaxLength(220);
            });
            //modelBuilder.Entity<TwebWfEmployee>();
            modelBuilder.Entity<AccountsTable>(entity =>
            {
                entity.HasKey(e => e.AccountCode)
                    .HasName("PK_AccountPGroup");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountDescription).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.AccountPgroup)
                    .HasColumnName("AccountPGroup")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AcomAccommodation>(entity =>
            {
                entity.HasKey(e => e.AccommodationId)
                    .HasName("PK_ACC_Accommodation");

                entity.ToTable("ACOM_Accommodation");

                entity.Property(e => e.AccommodationId)
                    .HasColumnName("Accommodation_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccProviderId)
                    .HasColumnName("AccProvider_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AccommodationDesc)
                    .HasColumnName("Accommodation_Desc")
                    .HasMaxLength(500);

                entity.Property(e => e.AccommodationTypeId)
                    .HasColumnName("Accommodation_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.ContractEndDate).HasColumnType("datetime");

                entity.Property(e => e.ContractNo).HasMaxLength(50);

                entity.Property(e => e.ContractStartDate).HasColumnType("datetime");

                entity.Property(e => e.LocationId)
                    .HasColumnName("Location_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Mobile1).HasMaxLength(50);

                entity.Property(e => e.NoOfRooms).HasDefaultValueSql("((0))");

                entity.Property(e => e.PersonCapacity).HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResidenceId)
                    .HasColumnName("Residence_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TotalCost).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AcomAccommodationHousingType>(entity =>
            {
                entity.HasKey(e => e.AcomHousingTypeId);

                entity.ToTable("ACOM_Accommodation_Housing_Type");

                entity.Property(e => e.AcomHousingTypeId)
                    .HasColumnName("Acom_Housing_Type_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcomHousingTitle)
                    .IsRequired()
                    .HasColumnName("Acom_Housing_Title")
                    .HasMaxLength(200);
            });


            modelBuilder.Entity<TravelRequestService>(entity =>
            {
                entity.HasKey(e => e.servID)
                    .HasName("PK_TravelRequest_Services");

                entity.ToTable("TravelRequest_Services");

                entity.Property(e => e.servID)
                    .HasColumnName("serv_ID")
                    .ValueGeneratedNever();


                entity.Property(e => e.servname)
                    .IsRequired()
                    .HasColumnName("serv_name")
                    .HasMaxLength(20);

                entity.Property(e => e.Fieldname)
               .IsRequired()
               .HasColumnName("Field_name")
               .HasMaxLength(20);


            });



            modelBuilder.Entity<AcomAccommodationRequest>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("ACOM_Accommodation_Request");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.KindOfEmployeeEmp)
                    .HasColumnName("kindOfEmployee_Emp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KindOfEmployeeLabor)
                    .HasColumnName("kindOfEmployee_Labor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AcomAccommodationRequestD>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("ACOM_Accommodation_Request_d");

                entity.Property(e => e.RecordId).HasColumnName("Record_ID");

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.RequiredDate)
                    .HasColumnName("Required_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);
            });

            modelBuilder.Entity<AcomAccommodationType>(entity =>
            {
                entity.HasKey(e => e.AccommodationTypeId)
                    .HasName("PK_ACC_Accommodation_Type");

                entity.ToTable("ACOM_Accommodation_Type");

                entity.Property(e => e.AccommodationTypeId)
                    .HasColumnName("Accommodation_Type_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccommodationTypeName)
                    .HasColumnName("Accommodation_Type_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<AcomHousing>(entity =>
            {
                entity.HasKey(e => new { e.RequestNo, e.EmployeeNo, e.AccommodationId });

                entity.ToTable("ACOM_Housing");

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AccommodationId)
                    .HasColumnName("Accommodation_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AcomHousingTypeId).HasColumnName("Acom_Housing_Type_ID");

                entity.Property(e => e.AddDate)
                    .HasColumnName("Add_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequiredDate)
                    .HasColumnName("Required_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<AcomJobTitle>(entity =>
            {
                entity.HasKey(e => e.JobTitleId)
                    .HasName("PK_ACC_JobTitle");

                entity.ToTable("ACOM_JobTitle");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.JobTitleName)
                    .IsRequired()
                    .HasColumnName("Job_Title_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<AcomKingOfProvider>(entity =>
            {
                entity.HasKey(e => e.KindOfProviderId);

                entity.ToTable("ACOM_KingOfProvider");

                entity.Property(e => e.KindOfProviderId)
                    .HasColumnName("KindOfProvider_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.KindOfProviderName)
                    .IsRequired()
                    .HasColumnName("KindOfProvider_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<AcomLabor>(entity =>
            {
                entity.HasKey(e => e.EmployeeNo)
                    .HasName("PK_ACC_Employee");

                entity.ToTable("ACOM_Labor");

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IdCardNo)
                    .IsRequired()
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<AcomProjectBudget>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("PK_ACC_ProjectBudget");

                entity.ToTable("ACOM_ProjectBudget");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CurrentDurationInMonth).HasColumnName("Current_Duration_In_Month");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AcomProvider>(entity =>
            {
                entity.HasKey(e => e.AccProviderId)
                    .HasName("PK_ACC_Provider");

                entity.ToTable("ACOM_Provider");

                entity.Property(e => e.AccProviderId)
                    .HasColumnName("AccProvider_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccommodationTypeId)
                    .HasColumnName("Accommodation_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ContactPerson).HasMaxLength(500);

                entity.Property(e => e.KindOfProviderId)
                    .HasColumnName("KindOfProvider_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Mobile1).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.ProviderName)
                    .HasColumnName("Provider_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ResidenceId)
                    .HasColumnName("Residence_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ActiveDirectory>(entity =>
            {
                entity.HasKey(e => e.Acemail);

                entity.Property(e => e.Acemail)
                    .HasColumnName("ACEmail")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AclastEdit)
                    .HasColumnName("ACLastEdit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acpassword)
                    .HasColumnName("ACPassword")
                    .HasMaxLength(50);

                entity.Property(e => e.IsClosed).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AisLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Ais_Log");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.ActionState)
                    .HasColumnName("Action_State")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Appointments>(entity =>
            {
                entity.HasKey(e => e.UniqueId);

                entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.ResourceIds).HasColumnName("ResourceIDs");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Subject).HasMaxLength(50);
            });

            modelBuilder.Entity<AppraisalSubtitle>(entity =>
            {
                entity.ToTable("Appraisal_Subtitle");

                entity.Property(e => e.AppraisalSubTitleId).HasColumnName("Appraisal_subTitle_ID");

                entity.Property(e => e.AppraisalSubTitleName).HasColumnName("APPraisal_subTitle_name");

                entity.Property(e => e.Appraisalevel1Id).HasColumnName("Appraisalevel1_ID");
            });

            modelBuilder.Entity<ApraisalTitle>(entity =>
            {
                entity.HasKey(e => e.Appraisalevel1Id);

                entity.ToTable("Apraisal_Title");

                entity.Property(e => e.Appraisalevel1Id).HasColumnName("Appraisalevel1_ID");

                entity.Property(e => e.Appraisalevel1Name).HasColumnName("Appraisalevel1_Name");
            });


            modelBuilder.Entity<AppraisalEmp>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("ID");
                entity.ToTable("Appraisal_Emp");

                entity.Property(e => e.AppID).HasColumnName("App_ID");

                entity.Property(e => e.HrCode).HasColumnName("HrCode");

                entity.Property(e => e.Status).HasColumnName("Status");

                entity.Property(e => e.CompanyScore).HasColumnName("Company_Score");

                entity.Property(e => e.DepartmentScore).HasColumnName("Department_Score");

                entity.Property(e => e.Competencescore).HasColumnName("Competence_score");

                entity.Property(e => e.IndividualScore).HasColumnName("Individual_Score");
                entity.Property(e => e.Overallscore).HasColumnName("Overall_score");
                entity.Property(e => e.Trainingneeds).HasColumnName("Training_needs");
                entity.Property(e => e.Acknowledge1).HasColumnName("Acknowledge1");
                entity.Property(e => e.Acknowledge2).HasColumnName("Acknowledge2");
                entity.Property(e => e.InUser).HasColumnName("In_User");
                entity.Property(e => e.InDate).HasColumnName("In_Date");

            });
      

            modelBuilder.Entity<AttAttendance>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.Date })
                    .HasName("PK_ATT_Attendance_1");

                entity.ToTable("ATT_Attendance");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);
                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.CheckIn).HasColumnType("datetime");

                entity.Property(e => e.CheckOut).HasColumnType("datetime");
            });

            modelBuilder.Entity<AttCheckinout>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Checktime });

                entity.ToTable("ATT_CHECKINOUT");

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(20);

                entity.Property(e => e.Checktime)
                    .HasColumnName("CHECKTIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.Checktype)
                    .HasColumnName("CHECKTYPE")
                    .HasMaxLength(20);

                entity.Property(e => e.Memoinfo).HasMaxLength(50);

                entity.Property(e => e.Sensorid)
                    .HasColumnName("SENSORID")
                    .HasMaxLength(20);

                entity.Property(e => e.Sn)
                    .HasColumnName("SN")
                    .HasMaxLength(20);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Verifycode)
                    .HasColumnName("VERIFYCODE")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkCode).HasMaxLength(20);
            });

            modelBuilder.Entity<AttEmployee>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("ATT_Employee");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.FullName).HasMaxLength(500);

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasMaxLength(200);

                entity.Property(e => e.Userid)
                    .HasColumnName("USERID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<AttSetting>(entity =>
            {
                entity.HasKey(e => e.SettingId);

                entity.ToTable("ATT_Setting");

                entity.Property(e => e.SettingId).HasColumnName("Setting_ID");

                entity.Property(e => e.AccessDatabasePath).HasMaxLength(2000);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateDate).HasColumnType("date");

                entity.Property(e => e.ReadingIntimeValue).HasColumnName("ReadingINTimeValue");

                entity.Property(e => e.StartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Attendances>(entity =>
            {
                entity.ToTable("attendances");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.Follow).HasColumnName("follow");

                entity.Property(e => e.FollowComment)
                    .HasColumnName("follow_comment")
                    .HasMaxLength(510);

                entity.Property(e => e.FollowTime).HasColumnName("follow_time");

                entity.Property(e => e.IdNumber)
                    .IsRequired()
                    .HasColumnName("id_number")
                    .HasMaxLength(28);

                entity.Property(e => e.LeaveTime).HasColumnName("leave_time");

                entity.Property(e => e.ProjectId).HasColumnName("project_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<BasisDistribCostCenter>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("_@BasisDistrib_CostCenter");

                entity.Property(e => e.BasisDistribAr)
                    .HasColumnName("BasisDistrib_Ar")
                    .HasMaxLength(50);

                entity.Property(e => e.BasisDistribEn)
                    .HasColumnName("BasisDistrib_En")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BimBuilding>(entity =>
            {
                entity.HasKey(e => e.BuildingId);

                entity.ToTable("BIM_Building");

                entity.Property(e => e.BuildingId).HasColumnName("Building_ID");

                entity.Property(e => e.BuildingName)
                    .HasColumnName("Building_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ParcelId).HasColumnName("parcel_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimEffort>(entity =>
            {
                entity.HasKey(e => e.EffortId);

                entity.ToTable("BIM_Effort");

                entity.Property(e => e.EffortId).HasColumnName("Effort_ID");

                entity.Property(e => e.EffortDate)
                    .HasColumnName("Effort_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffortName)
                    .HasColumnName("Effort_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ElevId).HasColumnName("elev_ID");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.PartId).HasColumnName("Part_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimEffortSpecify>(entity =>
            {
                entity.HasKey(e => e.EffortSpecifyId);

                entity.ToTable("BIM_EffortSpecify");

                entity.Property(e => e.EffortSpecifyId).HasColumnName("EffortSpecify_ID");

                entity.Property(e => e.EffortId).HasColumnName("Effort_ID");

                entity.Property(e => e.EffortSpecifyDate)
                    .HasColumnName("EffortSpecify_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffortSpecifyName)
                    .HasColumnName("EffortSpecify_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InUser).HasMaxLength(20);

                entity.Property(e => e.PartId).HasColumnName("Part_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimEffortSpecify2>(entity =>
            {
                entity.HasKey(e => e.EffortSpecify2Id);

                entity.ToTable("BIM_EffortSpecify2");

                entity.Property(e => e.EffortSpecify2Id).HasColumnName("EffortSpecify2_ID");

                entity.Property(e => e.EffortId).HasColumnName("Effort_ID");

                entity.Property(e => e.EffortSpecify2Date)
                    .HasColumnName("EffortSpecify2_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffortSpecify2Name)
                    .HasColumnName("EffortSpecify2_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EffortSpecifyId).HasColumnName("EffortSpecify_ID");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.PartId).HasColumnName("Part_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimEffortSpecify3>(entity =>
            {
                entity.HasKey(e => e.EffortSpecify3Id);

                entity.ToTable("BIM_EffortSpecify3");

                entity.Property(e => e.EffortSpecify3Id).HasColumnName("EffortSpecify3_ID");

                entity.Property(e => e.EffortId).HasColumnName("Effort_ID");

                entity.Property(e => e.EffortSpecify2Id).HasColumnName("EffortSpecify2_ID");

                entity.Property(e => e.EffortSpecify3Name)
                    .HasColumnName("EffortSpecify3_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EffortSpecifyDate)
                    .HasColumnName("EffortSpecify_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffortSpecifyId).HasColumnName("EffortSpecify_ID");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InUser).HasMaxLength(20);

                entity.Property(e => e.PartId).HasColumnName("Part_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimElevation>(entity =>
            {
                entity.HasKey(e => e.ElevId);

                entity.ToTable("BIM_Elevation");

                entity.Property(e => e.ElevId).HasColumnName("elev_ID");

                entity.Property(e => e.BuildingId).HasColumnName("Building_ID");

                entity.Property(e => e.Elevname)
                    .HasColumnName("elevname")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.ParcelId).HasColumnName("parcel_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimFloor>(entity =>
            {
                entity.HasKey(e => e.FloorId);

                entity.ToTable("BIM_Floor");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.BuildingId).HasColumnName("Building_ID");

                entity.Property(e => e.FloorDate)
                    .HasColumnName("Floor_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FloorName)
                    .HasColumnName("Floor_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.ParcelId).HasColumnName("parcel_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId);

                entity.ToTable("BIM_Level");

                entity.Property(e => e.LevelId).HasColumnName("Level_ID");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.LevelName)
                    .HasColumnName("Level_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.PartDate)
                    .HasColumnName("Part_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimParcel>(entity =>
            {
                entity.HasKey(e => e.ParcelId);

                entity.ToTable("BIM_Parcel");

                entity.Property(e => e.ParcelId).HasColumnName("parcel_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ParcelName)
                    .HasColumnName("Parcel_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimPart>(entity =>
            {
                entity.HasKey(e => e.PartId);

                entity.ToTable("BIM_Part");

                entity.Property(e => e.PartId).HasColumnName("Part_ID");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.PartDate)
                    .HasColumnName("Part_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PartName)
                    .HasColumnName("Part_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<BimProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Bim_projects");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.UpdDate)
                    .HasColumnName("Upd_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdUser)
                    .HasColumnName("Upd_User")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<BimTransaction>(entity =>
            {
                entity.HasKey(e => e.TransId);

                entity.ToTable("BIM_Transaction");

                entity.Property(e => e.TransId).HasColumnName("Trans_ID");

                entity.Property(e => e.BuildingId).HasColumnName("Building_ID");

                entity.Property(e => e.EffortId).HasColumnName("Effort_ID");

                entity.Property(e => e.EffortSpecify2Id).HasColumnName("EffortSpecify2_ID");

                entity.Property(e => e.EffortSpecify3Id).HasColumnName("EffortSpecify3_ID");

                entity.Property(e => e.EffortSpecifyId).HasColumnName("EffortSpecify_ID");

                entity.Property(e => e.ElevId).HasColumnName("elev_ID");

                entity.Property(e => e.FloorId).HasColumnName("Floor_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.LevelId).HasColumnName("Level_ID");

                entity.Property(e => e.ParcelId).HasColumnName("parcel_ID");

                entity.Property(e => e.PartId).HasColumnName("Part_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.SheetName).HasMaxLength(50);

                entity.Property(e => e.TotalProgress).HasMaxLength(50);

                entity.Property(e => e.TransDate)
                    .HasColumnName("Trans_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<BimUsers>(entity =>
            {
                entity.HasKey(e => e.BimId);

                entity.ToTable("BIM_Users");

                entity.Property(e => e.BimId).HasColumnName("BIM_ID");

                entity.Property(e => e.BimUserCode)
                    .HasColumnName("BIM_UserCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);
            });

            modelBuilder.Entity<Blocks>(entity =>
            {
                entity.ToTable("blocks");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BlockFrom).HasColumnName("block_from");

                entity.Property(e => e.BlockTo).HasColumnName("block_to");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdNumber)
                    .IsRequired()
                    .HasColumnName("id_number")
                    .HasMaxLength(28);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CAccCust>(entity =>
            {
                entity.HasKey(e => e.AccId);

                entity.ToTable("C_Acc_Cust");

                entity.HasIndex(e => e.AccName)
                    .HasName("IX_C_Acc_Cust")
                    .IsUnique();

                entity.Property(e => e.AccId)
                    .HasColumnName("Acc_ID")
                    .HasMaxLength(25)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccName)
                    .IsRequired()
                    .HasColumnName("Acc_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.AutoInsuranceConCust)
                    .HasColumnName("Auto_InsuranceConCust")
                    .HasMaxLength(25);

                entity.Property(e => e.AutoInsuranceConCustChk)
                    .HasColumnName("Auto_InsuranceConCustChk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoInsuranceConCustName)
                    .HasColumnName("Auto_InsuranceConCust_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.AutoMkcust)
                    .HasColumnName("Auto_MKCust")
                    .HasMaxLength(25);

                entity.Property(e => e.AutoMkcustChk)
                    .HasColumnName("Auto_MKCustChk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoMkcustName)
                    .HasColumnName("Auto_MKCust_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.AutoPrePaidContCust)
                    .HasColumnName("Auto_PrePaidContCust")
                    .HasMaxLength(25);

                entity.Property(e => e.AutoPrePaidContCustChk)
                    .HasColumnName("Auto_PrePaidContCustChk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoPrePaidContCustName)
                    .HasColumnName("Auto_PrePaidContCust_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.AutoStorage)
                    .HasColumnName("Auto_Storage")
                    .HasMaxLength(25);

                entity.Property(e => e.AutoStorageChk)
                    .HasColumnName("Auto_StorageChk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoStorageName)
                    .HasColumnName("Auto_Storage_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.AutoTempDeduct)
                    .HasColumnName("Auto_TempDeduct")
                    .HasMaxLength(25);

                entity.Property(e => e.AutoTempDeductChk)
                    .HasColumnName("Auto_TempDeductChk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoTempDeductName)
                    .HasColumnName("Auto_TempDeduct_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChildId)
                    .HasColumnName("Child_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.ContectPerson).HasMaxLength(100);

                entity.Property(e => e.ContectPerson1).HasMaxLength(100);

                entity.Property(e => e.ContectPerson2).HasMaxLength(100);

                entity.Property(e => e.CreditPers)
                    .HasColumnName("Credit_Pers")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditVal)
                    .HasColumnName("Credit_Val")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrIdd)
                    .HasColumnName("Curr_IDD")
                    .HasMaxLength(5);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.GroupCustMId)
                    .HasColumnName("GroupCustM_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.GroupCustSId)
                    .HasColumnName("GroupCustS_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Levl).HasColumnName("levl");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ParentId)
                    .HasColumnName("Parent_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.TaxFileNoG)
                    .HasColumnName("TaxFileNo_g")
                    .HasMaxLength(40);

                entity.Property(e => e.TaxFileNoS)
                    .HasColumnName("TaxFileNo_s")
                    .HasMaxLength(40);

                entity.Property(e => e.TaxPlaceNameG)
                    .HasColumnName("TaxPlaceName_g")
                    .HasMaxLength(150);

                entity.Property(e => e.TaxPlaceNameS)
                    .HasColumnName("TaxPlaceName_s")
                    .HasMaxLength(150);

                entity.Property(e => e.Taxable).HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone).HasMaxLength(20);

                entity.Property(e => e.Telephone1).HasMaxLength(20);

                entity.Property(e => e.Telephone2).HasMaxLength(20);

                entity.Property(e => e.TypesAcc)
                    .IsRequired()
                    .HasColumnName("Types_Acc")
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<CDb>(entity =>
            {
                entity.HasKey(e => e.DbId)
                    .HasName("PK_DB");

                entity.ToTable("C_DB");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbName)
                    .HasColumnName("DB_name")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MainDb).HasColumnName("MainDB");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CDepartment>(entity =>
            {
                entity.HasKey(e => e.DepartmentId)
                    .HasName("PK_C_Management");

                entity.ToTable("C_Department");

                entity.HasIndex(e => e.DepartmentName)
                    .HasName("IX_C_Department")
                    .IsUnique();

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(10)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChildId)
                    .IsRequired()
                    .HasColumnName("Child_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentName)
                    .IsRequired()
                    .HasColumnName("Department_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Levl).HasColumnName("levl");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ParentId)
                    .HasColumnName("Parent_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.CDepartment)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_Department_C_DB");
            });

            modelBuilder.Entity<CEmp>(entity =>
            {
                entity.HasKey(e => e.EmpId)
                    .HasName("PK_C_Emp_1");

                entity.ToTable("C_Emp");

                entity.HasIndex(e => e.EmpName)
                    .HasName("IX_C_Emp")
                    .IsUnique();

                entity.Property(e => e.EmpId)
                    .HasColumnName("Emp_ID")
                    .HasMaxLength(6)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId)
                    .IsRequired()
                    .HasColumnName("Department_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasColumnName("Emp_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.CEmp)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_Emp_C_DB");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.CEmp)
                    .HasForeignKey(d => d.DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_C_Emp_C_Department");
            });

            modelBuilder.Entity<CForm>(entity =>
            {
                entity.HasKey(e => e.FormId);

                entity.ToTable("C_Form");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CanAdd)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanAddAttachment)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanDelete)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanNavigate)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanOpen)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanShowAttachment)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.CanUpdate)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanViewReport)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Confirm).HasDefaultValueSql("((0))");

                entity.Property(e => e.ConstDTypeG).HasColumnName("ConstD_TypeG");

                entity.Property(e => e.DTypeSfiledName)
                    .HasColumnName("D_TypeSFiledName")
                    .HasMaxLength(100);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DocNoFiledName)
                    .HasColumnName("Doc_NoFiledName")
                    .HasMaxLength(100);

                entity.Property(e => e.DontShowInSub).HasDefaultValueSql("((0))");

                entity.Property(e => e.DontShowInSubDb)
                    .HasColumnName("DontShowInSubDB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DontUseInReport).HasDefaultValueSql("((0))");

                entity.Property(e => e.FieldDTypeS)
                    .HasColumnName("Field_D_Type_s")
                    .HasMaxLength(220);

                entity.Property(e => e.FieldDTypeSName)
                    .HasColumnName("Field_D_Type_s_Name")
                    .HasMaxLength(220);

                entity.Property(e => e.FieldDTypeSTable)
                    .HasColumnName("Field_D_Type_s_Table")
                    .HasMaxLength(220);

                entity.Property(e => e.FormIndex).HasColumnName("Form_Index");

                entity.Property(e => e.FormText)
                    .HasColumnName("Form_Text")
                    .HasMaxLength(100);

                entity.Property(e => e.FormTextEn)
                    .HasColumnName("Form_Text_En")
                    .HasMaxLength(100);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MdlName)
                    .HasColumnName("Mdl_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.MenuId)
                    .HasColumnName("Menu_ID")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.SubMdlName)
                    .HasColumnName("SubMdl_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.TabelMasterName).HasMaxLength(220);

                entity.Property(e => e.Visible).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.CForm)
                    .HasForeignKey(d => d.MenuId)
                    .HasConstraintName("FK_C_Form__@Menu");
            });

            modelBuilder.Entity<CFormConfirm>(entity =>
            {
                entity.HasKey(e => e.FormId)
                    .HasName("PK__@Confirm_Forms");

                entity.ToTable("C_Form_Confirm");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1AllowDel)
                    .HasColumnName("Confirm1_AllowDel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1AllowTurn)
                    .HasColumnName("Confirm1_AllowTurn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1Name)
                    .HasColumnName("Confirm1_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.Confirm2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2AllowDel)
                    .HasColumnName("Confirm2_AllowDel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2AllowTurn)
                    .HasColumnName("Confirm2_AllowTurn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2Name)
                    .HasColumnName("Confirm2_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.Confirm3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm3AllowDel)
                    .HasColumnName("Confirm3_AllowDel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm3AllowTurn)
                    .HasColumnName("Confirm3_AllowTurn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm3Name)
                    .HasColumnName("Confirm3_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.Confirm4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm4AllowDel)
                    .HasColumnName("Confirm4_AllowDel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm4AllowTurn)
                    .HasColumnName("Confirm4_AllowTurn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm4Name)
                    .HasColumnName("Confirm4_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.Confirm5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm5AllowDel)
                    .HasColumnName("Confirm5_AllowDel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm5AllowTurn)
                    .HasColumnName("Confirm5_AllowTurn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm5Name)
                    .HasColumnName("Confirm5_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.Confirm6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm6AllowDel)
                    .HasColumnName("Confirm6_AllowDel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm6AllowTurn)
                    .HasColumnName("Confirm6_AllowTurn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm6Name)
                    .HasColumnName("Confirm6_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FormText)
                    .HasColumnName("Form_Text")
                    .HasMaxLength(100);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Form)
                    .WithOne(p => p.CFormConfirm)
                    .HasForeignKey<CFormConfirm>(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_C_Form_Confirm_C_Form");
            });

            modelBuilder.Entity<CFormConfirmUserD>(entity =>
            {
                entity.HasKey(e => new { e.FormId, e.ConfirmName, e.UserId });

                entity.ToTable("C_Form_ConfirmUser_d");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfirmName)
                    .HasColumnName("Confirm_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CFormConfirmUserD)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("FK_C_Form_ConfirmUser_d_C_Form_ConfirmUser_m");
            });

            modelBuilder.Entity<CFormConfirmUserM>(entity =>
            {
                entity.HasKey(e => e.FormId);

                entity.ToTable("C_Form_ConfirmUser_m");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Form)
                    .WithOne(p => p.CFormConfirmUserM)
                    .HasForeignKey<CFormConfirmUserM>(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_C_Form_ConfirmUser_m_C_Form_Confirm");
            });

            modelBuilder.Entity<CFormPermision>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.FormId });

                entity.ToTable("C_FormPermision");

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.CanAdd)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanAddAttachment)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanDelete)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanNavigate)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanOpen)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanShowAttachment).HasDefaultValueSql("((1))");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.CanUpdate)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanViewReport)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FormIndex).HasColumnName("Form_Index");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MenuId)
                    .HasColumnName("Menu_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.CFormPermision)
                    .HasForeignKey(d => d.FormId)
                    .HasConstraintName("FK_C_FormPermision_C_Form");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CFormPermision)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_C_FormPermision_C_Group");
            });

            modelBuilder.Entity<CGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("C_Group");

                entity.HasIndex(e => e.GroupName)
                    .HasName("IX_C_Group");

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasColumnName("Group_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CGroupCustD>(entity =>
            {
                entity.HasKey(e => new { e.GroupCustSId, e.GroupCustMId });

                entity.ToTable("C_GroupCust_d");

                entity.HasIndex(e => e.GroupCustSName)
                    .HasName("IX_C_GroupCust_d")
                    .IsUnique();

                entity.HasIndex(e => new { e.GroupCustMId, e.GroupCustSId })
                    .HasName("IX_C_GroupCust_d_1")
                    .IsUnique();

                entity.Property(e => e.GroupCustSId)
                    .HasColumnName("GroupCustS_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.GroupCustMId)
                    .HasColumnName("GroupCustM_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupCustSName)
                    .IsRequired()
                    .HasColumnName("GroupCustS_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<COperation>(entity =>
            {
                entity.HasKey(e => e.OpNo);

                entity.ToTable("C_Operation");

                entity.Property(e => e.OpNo)
                    .HasColumnName("Op_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.CenterId)
                    .HasColumnName("Center_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.CustId)
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(220);

                entity.Property(e => e.DescrpProject)
                    .HasColumnName("Descrp_Project")
                    .HasMaxLength(220);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PlaceProject)
                    .HasColumnName("Place_Project")
                    .HasMaxLength(220);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.COperation)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_Operation_C_DB");
            });

            modelBuilder.Entity<CStock>(entity =>
            {
                entity.HasKey(e => e.StockId);

                entity.ToTable("C_Stock");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasColumnName("Stock_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CSubGroup>(entity =>
            {
                entity.HasKey(e => e.SubGroupId);

                entity.ToTable("C_SubGroup");

                entity.Property(e => e.SubGroupId)
                    .HasColumnName("SubGroup_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupId)
                    .IsRequired()
                    .HasColumnName("Group_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.SubGroupName)
                    .IsRequired()
                    .HasColumnName("SubGroup_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CTaxPlaceG>(entity =>
            {
                entity.HasKey(e => e.TaxPlaceNameG);

                entity.ToTable("C_TaxPlace_g");

                entity.Property(e => e.TaxPlaceNameG)
                    .HasColumnName("TaxPlaceName_g")
                    .HasMaxLength(150)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.CTaxPlaceG)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_TaxPlace_g_C_DB");
            });

            modelBuilder.Entity<CTaxPlaceS>(entity =>
            {
                entity.HasKey(e => e.TaxPlaceNameS);

                entity.ToTable("C_TaxPlace_s");

                entity.Property(e => e.TaxPlaceNameS)
                    .HasColumnName("TaxPlaceName_s")
                    .HasMaxLength(150)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.CTaxPlaceS)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_TaxPlace_s_C_DB");
            });

            modelBuilder.Entity<CUser>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("C_User");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanOpenMailDepartment)
                    .HasColumnName("CanOpen_MailDepartment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.ConfirmMail).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contin).HasDefaultValueSql("((1))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.DisciplineCode)
                    .HasColumnName("Discipline_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Email)
                    .HasColumnName("EMail")
                    .HasMaxLength(300);

                entity.Property(e => e.GroupId)
                    .IsRequired()
                    .HasColumnName("Group_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Mobile).HasMaxLength(15);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProcClass)
                    .HasColumnName("PROC_Class")
                    .HasMaxLength(50);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.Signature).HasColumnType("image");

                entity.Property(e => e.SubGroup)
                    .HasColumnName("Sub_Group")
                    .HasMaxLength(20);

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasColumnName("User_Name")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.CUser)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_C_User_C_Department");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CUser)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_C_User_C_Group");
            });

            modelBuilder.Entity<CUserDiscipline>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.DisciplineCode });

                entity.ToTable("C_User_Discipline");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.DisciplineCode)
                    .HasColumnName("Discipline_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CUserDiscipline)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_C_User_Discipline_C_User_Discipline");
            });

            modelBuilder.Entity<CView>(entity =>
            {
                entity.HasKey(e => e.ViewId);

                entity.ToTable("_@C_View");

                entity.Property(e => e.ViewId)
                    .HasColumnName("View_ID")
                    .HasMaxLength(10)
                    .ValueGeneratedNever();

                entity.Property(e => e.MdlName)
                    .HasColumnName("Mdl_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.MenuId)
                    .HasColumnName("Menu_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SubMdlName)
                    .HasColumnName("SubMdl_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ViewText)
                    .HasColumnName("View_Text")
                    .HasMaxLength(220);

                entity.Property(e => e.ViewTextEn)
                    .HasColumnName("View_Text_En")
                    .HasMaxLength(220);
            });

            modelBuilder.Entity<CYear>(entity =>
            {
                entity.HasKey(e => e.FiscalYear);

                entity.ToTable("C_Year");

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.Closed).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.CYear)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_Year_C_DB");
            });

            modelBuilder.Entity<CallCenterM>(entity =>
            {
                entity.HasKey(e => e.CallNo);

                entity.ToTable("Call_Center_m");

                entity.Property(e => e.CallNo)
                    .HasColumnName("Call_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.CustId)
                    .IsRequired()
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MessageId).HasColumnName("Message_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Requirements)
                    .IsRequired()
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<Candy>(entity =>
            {
                entity.HasKey(e => e.Fserial);

                entity.ToTable("candy");

                entity.Property(e => e.Fserial).HasColumnName("fserial");

                entity.Property(e => e.Amount).HasMaxLength(500);

                entity.Property(e => e.Cur).HasMaxLength(50);

                entity.Property(e => e.Letter).HasMaxLength(50);

                entity.Property(e => e.MaterialNo).HasMaxLength(500);

                entity.Property(e => e.Mq)
                    .HasColumnName("MQ")
                    .HasMaxLength(50);

                entity.Property(e => e.Mr)
                    .HasColumnName("MR")
                    .HasMaxLength(50);

                entity.Property(e => e.Munit).HasMaxLength(50);

                entity.Property(e => e.Production).HasMaxLength(500);

                entity.Property(e => e.ProjectProfileDescription).HasMaxLength(500);

                entity.Property(e => e.Projectdefinition).HasMaxLength(500);

                entity.Property(e => e.Quantity).HasMaxLength(500);

                entity.Property(e => e.Rate).HasMaxLength(500);

                entity.Property(e => e.Resource).HasMaxLength(500);

                entity.Property(e => e.Serial).HasColumnName("serial");

                entity.Property(e => e.Unit).HasMaxLength(500);

                entity.Property(e => e.WbselementCode)
                    .HasColumnName("WBSelementCode")
                    .HasMaxLength(500);

                entity.Property(e => e.Wbslevel)
                    .HasColumnName("WBSLevel")
                    .HasMaxLength(500);

                entity.Property(e => e.WorkCenter).HasMaxLength(500);
            });

            modelBuilder.Entity<Careers>(entity =>
            {
                entity.ToTable("careers");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(40);

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.MaxSalary).HasColumnName("max_salary");

                entity.Property(e => e.MinSalary).HasColumnName("min_salary");

                entity.Property(e => e.SectionId).HasColumnName("section_id");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Case>(entity =>
            {
                entity.HasKey(e => e.Man);

                entity.ToTable("case");

                entity.Property(e => e.Man)
                    .HasColumnName("man")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Test)
                    .HasColumnName("test")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CashMMaster>(entity =>
            {
                entity.HasKey(e => e.CashId);

                entity.ToTable("CashM_Master");

                entity.Property(e => e.CashId).HasColumnName("Cash_ID");

                entity.Property(e => e.CashBalanceAmount).HasColumnName("Cash_BalanceAmount");

                entity.Property(e => e.CashBalanceDateFrom)
                    .HasColumnName("Cash_BalanceDateFrom")
                    .HasColumnType("date");

                entity.Property(e => e.CashBalanceDateTo)
                    .HasColumnName("Cash_BalanceDateTo")
                    .HasColumnType("date");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CashMOprDirBalance>(entity =>
            {
                entity.HasKey(e => e.OprDirId);

                entity.ToTable("CashM_OprDir_Balance");

                entity.Property(e => e.OprDirId).HasColumnName("OprDir_ID");

                entity.Property(e => e.CashId).HasColumnName("Cash_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.OprDirBalance).HasColumnName("OprDir_Balance");

                entity.Property(e => e.OprDirTotInvoice).HasColumnName("OprDir_TotInvoice");

                entity.Property(e => e.OprHrCode)
                    .IsRequired()
                    .HasColumnName("OPR_HrCode")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.CashMOprDirBalance)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_CashM_OprDir_Balance_CashM_Master");
            });

            modelBuilder.Entity<CashMProjectsBalance>(entity =>
            {
                entity.HasKey(e => e.CashProId);

                entity.ToTable("CashM_Projects_Balance");

                entity.Property(e => e.CashProId).HasColumnName("CashPro_ID");

                entity.Property(e => e.CashId).HasColumnName("Cash_ID");

                entity.Property(e => e.CashProBalance).HasColumnName("CashPro_Balance");

                entity.Property(e => e.CashProTotInvoice).HasColumnName("CashPro_TotInvoice");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.CashMProjectsBalance)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_CashM_Projects_Balance_CashM_Master");
            });

            modelBuilder.Entity<CashMUsers>(entity =>
            {
                entity.HasKey(e => e.CashUsers);

                entity.ToTable("CashM_Users");

                entity.Property(e => e.CashUsers).HasColumnName("Cash_Users");

                entity.Property(e => e.CashLevel).HasColumnName("Cash_Level");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HrCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Cateries>(entity =>
            {
                entity.ToTable("cateries");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChatUser>(entity =>
            {
                entity.HasKey(e => e.ChId);

                entity.ToTable("Chat_User");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChCode)
                    .HasColumnName("Ch_Code")
                    .HasMaxLength(4);

                entity.Property(e => e.ChTitle).HasMaxLength(20);

                entity.Property(e => e.ResvUser).HasMaxLength(4);

                entity.Property(e => e.SendUser).HasMaxLength(4);

                entity.Property(e => e.UserMessage).HasMaxLength(400);
            });

            modelBuilder.Entity<CheckChecks>(entity =>
            {
                entity.HasKey(e => e.ExchId)
                    .HasName("PK_Check_ExchangeReq_1");

                entity.ToTable("Check_Checks");

                entity.Property(e => e.ExchId).HasColumnName("Exch_ID");

                entity.Property(e => e.BankId).HasColumnName("Bank_ID");

                entity.Property(e => e.CheckDate)
                    .HasColumnName("Check_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CheckInDate)
                    .HasColumnName("Check_In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CheckInUser)
                    .HasColumnName("Check_In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.CheckNo)
                    .HasColumnName("Check_No")
                    .HasMaxLength(500);

                entity.Property(e => e.ContrcatNo).HasMaxLength(50);

                entity.Property(e => e.CurrencyId).HasColumnName("Currency_ID");

                entity.Property(e => e.DatePool)
                    .HasColumnName("Date_Pool")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelivereDate)
                    .HasColumnName("Delivere_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExchDesc)
                    .HasColumnName("Exch_Desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentTypeId).HasColumnName("Payment_Type_ID");

                entity.Property(e => e.PoolMasterCode).HasColumnName("Pool_MasterCode");

                entity.Property(e => e.ProCode)
                    .HasColumnName("Pro_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ReceiveDate)
                    .HasColumnName("Receive_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.TrkId).HasColumnName("TRK_ID");

                entity.Property(e => e.TrkSys)
                    .HasColumnName("TRK_SYS")
                    .HasMaxLength(3);

                entity.Property(e => e.UserPool)
                    .HasColumnName("User_Pool")
                    .HasMaxLength(50);

                entity.Property(e => e.VendId)
                    .HasColumnName("Vend_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.VendName)
                    .HasColumnName("Vend_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.WordAmount)
                    .HasColumnName("Word_Amount")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<CheckLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_ST_Log");

                entity.ToTable("Check_Log");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.ActionItem).HasColumnName("Action_Item");

                entity.Property(e => e.ActionItem1).HasColumnName("Action_Item1");

                entity.Property(e => e.ActionItem2).HasColumnName("Action_Item2");

                entity.Property(e => e.ActionState)
                    .HasColumnName("Action_State")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PageId).HasColumnName("Page_ID");

                entity.Property(e => e.SysId).HasColumnName("Sys_ID");

                entity.Property(e => e.UserId).HasColumnName("User_ID");
            });

            modelBuilder.Entity<CheckSerials>(entity =>
            {
                entity.HasKey(e => e.ChNo)
                    .HasName("PK_Check_No");

                entity.ToTable("Check_Serials");

                entity.Property(e => e.BankId).HasColumnName("Bank_ID");

                entity.Property(e => e.CheckNo)
                    .HasColumnName("Check_No")
                    .HasMaxLength(500);

                entity.Property(e => e.IsUsed).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CheckStatus>(entity =>
            {
                entity.HasKey(e => e.ChstId);

                entity.ToTable("Check_Status");

                entity.Property(e => e.ChstId)
                    .HasColumnName("CHST_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChstName)
                    .HasColumnName("CHST_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CheckType>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("Check_Type");

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.PaymentTypeId).HasColumnName("Payment_TypeID");

                entity.Property(e => e.TypeName)
                    .HasColumnName("Type_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CheckVendorType>(entity =>
            {
                entity.HasKey(e => e.VenTypId);

                entity.ToTable("Check_Vendor_Type");

                entity.Property(e => e.VenTypId).HasColumnName("VenTyp_ID");

                entity.Property(e => e.VenTypName)
                    .HasColumnName("VenTyp_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CheckVendors>(entity =>
            {
                entity.HasKey(e => e.VendId);

                entity.ToTable("Check_Vendors");

                entity.Property(e => e.VendId)
                    .HasColumnName("Vend_ID")
                    .HasMaxLength(10)
                    .ValueGeneratedNever();

                entity.Property(e => e.VendName)
                    .HasColumnName("Vend_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.VendType).HasColumnName("Vend_Type");
            });

            modelBuilder.Entity<Closing>(entity =>
            {
                entity.HasKey(e => e.SerlNo);

                entity.ToTable("_@Closing");

                entity.Property(e => e.SerlNo)
                    .HasColumnName("Serl_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.SpName)
                    .IsRequired()
                    .HasColumnName("Sp_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ConditionReport>(entity =>
            {
                entity.HasKey(e => e.FormId);

                entity.ToTable("_@ConditionReport");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(100)
                    .ValueGeneratedNever();

                entity.Property(e => e.ConditionFiled).HasMaxLength(100);

                entity.Property(e => e.Filter).HasMaxLength(300);

                entity.Property(e => e.FormText)
                    .HasColumnName("Form_Text")
                    .HasMaxLength(300);

                entity.Property(e => e.TableName).HasMaxLength(100);
            });

            modelBuilder.Entity<Conditions>(entity =>
            {
                entity.HasKey(e => new { e.ConditionTable, e.ConditionFiled });

                entity.ToTable("_@Conditions");

                entity.Property(e => e.ConditionTable).HasMaxLength(100);

                entity.Property(e => e.ConditionFiled).HasMaxLength(100);

                entity.Property(e => e.Filter).HasMaxLength(300);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ContractForms>(entity =>
            {
                entity.HasKey(e => e.FormId);

                entity.ToTable("_@Contract_Forms");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.HasOne(d => d.Form)
                    .WithOne(p => p.ContractForms)
                    .HasForeignKey<ContractForms>(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__@Contract_Forms_C_Form");
            });

            modelBuilder.Entity<CoplegalCompany>(entity =>
            {
                entity.HasKey(e => e.CompId);

                entity.ToTable("coplegal_company");

                entity.Property(e => e.CompId).HasColumnName("Comp_ID");

                entity.Property(e => e.CompName).HasColumnName("Comp_Name");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.Logo)
                    .HasColumnName("logo")
                    .HasMaxLength(50);

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);
            });

            modelBuilder.Entity<CoplegalDoccategory>(entity =>
            {
                entity.HasKey(e => e.DocCatId);

                entity.ToTable("coplegal_doccategory");

                entity.Property(e => e.DocCatId).HasColumnName("Doc_Cat_ID");

                entity.Property(e => e.CompId).HasColumnName("Comp_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);
            });

            modelBuilder.Entity<CoplegalDocs>(entity =>
            {
                entity.HasKey(e => e.DocId);

                entity.ToTable("coplegal_Docs");

                entity.Property(e => e.DocId).HasColumnName("Doc_ID");

                entity.Property(e => e.CompId).HasColumnName("Comp_ID");

                entity.Property(e => e.DocAttached)
                    .HasColumnName("Doc_Attached")
                    .HasMaxLength(500);

                entity.Property(e => e.DocCatId).HasColumnName("Doc_Cat_ID");

                entity.Property(e => e.DocName)
                    .HasColumnName("Doc_name")
                    .HasMaxLength(500);

                entity.Property(e => e.FoulderId).HasColumnName("foulder_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);
            });

            modelBuilder.Entity<CoplegalFolder>(entity =>
            {
                entity.HasKey(e => e.FoulderId);

                entity.ToTable("coplegal_folder");

                entity.Property(e => e.FoulderId).HasColumnName("foulder_ID");

                entity.Property(e => e.DocCatId).HasColumnName("Doc_Cat_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);
            });

            modelBuilder.Entity<CstAdjustVendorM>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("CST_Adjust_Vendor_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstAgreementBqoRelation>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo, e.BqoItem, e.TaskId });

                entity.ToTable("CST_AgreementBQO_Relation");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BqoItem)
                    .HasColumnName("BQO_Item")
                    .HasMaxLength(20);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstBudgetDirect>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ItemNo, e.ProjectId, e.ResourceId });

                entity.ToTable("CST_Budget_Direct");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ConQty).HasColumnName("Con_Qty");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MainTradeId)
                    .HasColumnName("MainTrade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceOutput).HasColumnName("Resource_Output");

                entity.Property(e => e.ResourceUnitCost).HasColumnName("Resource_UnitCost");

                entity.Property(e => e.TradeId)
                    .HasColumnName("Trade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId).HasColumnName("WorkPackage_ID");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstBudgetDirect)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_Budget_Direct_CST_Budget_Direct_m");
            });

            modelBuilder.Entity<CstBudgetDirectM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("CST_Budget_Direct_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.Submit).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstBudgetDirectProjectQty>(entity =>
            {
                entity.HasKey(e => new { e.ItemNo, e.ProjectId });

                entity.ToTable("CST_Budget_Direct_Project_Qty");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AppQty).HasColumnName("App_Qty");

                entity.Property(e => e.AppQtyCost).HasColumnName("App_Qty_Cost");

                entity.Property(e => e.AppQtySelling).HasColumnName("App_Qty_Selling");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ConQty).HasColumnName("Con_Qty");

                entity.Property(e => e.EstQtyCost).HasColumnName("Est_Qty_Cost");

                entity.Property(e => e.EstQtySelling).HasColumnName("Est_Qty_Selling");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RevQty).HasColumnName("Rev_Qty");

                entity.Property(e => e.RevQtyCost).HasColumnName("Rev_Qty_Cost");

                entity.Property(e => e.RevQtySelling).HasColumnName("Rev_Qty_Selling");

                entity.Property(e => e.SubQty).HasColumnName("Sub_Qty");

                entity.Property(e => e.SubQtyCost).HasColumnName("Sub_Qty_Cost");

                entity.Property(e => e.SubQtySelling).HasColumnName("Sub_Qty_Selling");
            });

            modelBuilder.Entity<CstBudgetInDirect>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ItemNo, e.ProjectId })
                    .HasName("PK_CST_Budget_InDirect_1");

                entity.ToTable("CST_Budget_InDirect");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ConQty).HasColumnName("Con_Qty");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceId)
                    .IsRequired()
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceOutput).HasColumnName("Resource_Output");

                entity.Property(e => e.ResourceUnitCost).HasColumnName("Resource_UnitCost");

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstBudgetInDirect)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_Budget_InDirect_CST_Budget_InDirect_m");
            });

            modelBuilder.Entity<CstBudgetInDirectM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("CST_Budget_InDirect_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.Submit).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstBudgetVoDirectD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ItemNo, e.ProjectId, e.ResourceId });

                entity.ToTable("CST_Budget_VO_Direct_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ConQty).HasColumnName("Con_Qty");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MainTradeId)
                    .HasColumnName("MainTrade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceOutput).HasColumnName("Resource_Output");

                entity.Property(e => e.ResourceUnitCost).HasColumnName("Resource_UnitCost");

                entity.Property(e => e.TradeId)
                    .HasColumnName("Trade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId).HasColumnName("WorkPackage_ID");

                entity.HasOne(d => d.CstBudgetVoM)
                    .WithMany(p => p.CstBudgetVoDirectD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_Budget_VO_Direct_d_CST_Budget_VO_m");
            });

            modelBuilder.Entity<CstBudgetVoInDirectD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ItemNo, e.ProjectId, e.ResourceId })
                    .HasName("PK_CST_Budget_VO_InDirect_d_1");

                entity.ToTable("CST_Budget_VO_InDirect_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ConQty).HasColumnName("Con_Qty");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceOutput).HasColumnName("Resource_Output");

                entity.Property(e => e.ResourceUnitCost).HasColumnName("Resource_UnitCost");

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.HasOne(d => d.CstBudgetVoM)
                    .WithMany(p => p.CstBudgetVoInDirectD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_Budget_VO_InDirect_d_CST_Budget_VO_m");
            });

            modelBuilder.Entity<CstBudgetVoM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId });

                entity.ToTable("CST_Budget_VO_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.Submit).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstBudgetVoTopSheetAD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.TopSheetCatAId, e.ProjectId });

                entity.ToTable("CST_Budget_VO_TopSheetA_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.TopSheetCatAId).HasColumnName("TopSheetCatA_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.HasOne(d => d.CstBudgetVoM)
                    .WithMany(p => p.CstBudgetVoTopSheetAD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_Budget_VO_TopSheetA_d_CST_Budget_VO_m");
            });

            modelBuilder.Entity<CstBudgetVoTopSheetBD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.TopSheetCatBId, e.ProjectId });

                entity.ToTable("CST_Budget_VO_TopSheetB_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.TopSheetCatBId).HasColumnName("TopSheetCatB_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstBudgetVoM)
                    .WithMany(p => p.CstBudgetVoTopSheetBD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_Budget_VO_TopSheetB_d_CST_Budget_VO_m");
            });

            modelBuilder.Entity<CstBudgetVoTopSheetCD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.TopSheetCatCId, e.ProjectId });

                entity.ToTable("CST_Budget_VO_TopSheetC_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.TopSheetCatCId).HasColumnName("TopSheetCatC_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.HasOne(d => d.CstBudgetVoM)
                    .WithMany(p => p.CstBudgetVoTopSheetCD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_Budget_VO_TopSheetC_d_CST_Budget_VO_m");
            });

            modelBuilder.Entity<CstClientInvoiceApprovedD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Month, e.Year, e.ItemNo });

                entity.ToTable("CST_ClientInvoice_Approved_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstClientInvoiceApprovedM)
                    .WithMany(p => p.CstClientInvoiceApprovedD)
                    .HasForeignKey(d => new { d.ProjectId, d.Month, d.Year })
                    .HasConstraintName("FK_CST_ClientInvoice_Approved_d_CST_ClientInvoice_Approved_m");
            });

            modelBuilder.Entity<CstClientInvoiceApprovedM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Month, e.Year });

                entity.ToTable("CST_ClientInvoice_Approved_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstClientInvoiceSubmittedD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Month, e.Year, e.ItemNo });

                entity.ToTable("CST_ClientInvoice_Submitted_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstClientInvoiceSubmittedM)
                    .WithMany(p => p.CstClientInvoiceSubmittedD)
                    .HasForeignKey(d => new { d.ProjectId, d.Month, d.Year })
                    .HasConstraintName("FK_CST_ClientInvoice_Submitted_d_CST_ClientInvoice_Submitted_m");
            });

            modelBuilder.Entity<CstClientInvoiceSubmittedM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Month, e.Year })
                    .HasName("PK_CST_ClientInvoice_Submitted");

                entity.ToTable("CST_ClientInvoice_Submitted_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstCompanyPerformanceCashFlow>(entity =>
            {
                entity.HasKey(e => e.CashItemId);

                entity.ToTable("CST_CompanyPerformance_CashFlow");

                entity.Property(e => e.CashItemId)
                    .HasColumnName("CashItem_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CashFlowName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstCompanyPerformanceD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CST_CompanyPerformance_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualProgress).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ApprovedDate).HasColumnType("date");

                entity.Property(e => e.CashIn).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CashOut).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CutOfdate)
                    .HasColumnName("CutOFDate")
                    .HasColumnType("date");

                entity.Property(e => e.DateOfSubmission).HasColumnType("date");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ForeCastWorkValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaidPaid).HasColumnType("date");

                entity.Property(e => e.PlannedProgress).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PlannedWorkValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SubmittedAmount).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.WorkDone).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstCompanyPerformanceM)
                    .WithOne(p => p.CstCompanyPerformanceD)
                    .HasForeignKey<CstCompanyPerformanceD>(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CST_CompanyPerformance_d_CST_CompanyPerformance_m");
            });

            modelBuilder.Entity<CstCompanyPerformanceM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CST_CompanyPerformance_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FirstInvoiceMonth).HasColumnName("FirstInvoice_Month");

                entity.Property(e => e.FirstInvoiceYear).HasColumnName("FirstInvoice_Year");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastInvoiceMonth).HasColumnName("LastInvoice_Month");

                entity.Property(e => e.LastInvoiceYear).HasColumnName("LastInvoice_Year");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstCompanyPerformanceMByMonth>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.ProjectId });

                entity.ToTable("CST_CompanyPerformance_m_ByMonth");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstCompanyPerformanceResD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CST_CompanyPerformance_Res_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstCompanyPerformanceM)
                    .WithOne(p => p.CstCompanyPerformanceResD)
                    .HasForeignKey<CstCompanyPerformanceResD>(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CST_CompanyPerformance_Res_d_CST_CompanyPerformance_Res_d");
            });

            modelBuilder.Entity<CstContactType>(entity =>
            {
                entity.HasKey(e => e.ContactTypeTypeId);

                entity.ToTable("CST_ContactType");

                entity.Property(e => e.ContactTypeTypeId)
                    .HasColumnName("ContactType_Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ContactTypeTypeName)
                    .HasColumnName("ContactType_Type_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstFalseAccountD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SupplierId, e.RecordId });

                entity.ToTable("CST_FalseAccount_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Comments).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstFalseAccountM)
                    .WithMany(p => p.CstFalseAccountD)
                    .HasForeignKey(d => new { d.ProjectId, d.SupplierId })
                    .HasConstraintName("FK_CST_FalseAccount_d_CST_FalseAccount_m");
            });

            modelBuilder.Entity<CstFalseAccountM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SupplierId });

                entity.ToTable("CST_FalseAccount_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstHeadOfficeAndBankInterestD>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.Month });

                entity.ToTable("CST_HeadOfficeAndBankInterest_d");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.YearNavigation)
                    .WithMany(p => p.CstHeadOfficeAndBankInterestD)
                    .HasForeignKey(d => d.Year)
                    .HasConstraintName("FK_CST_HeadOfficeAndBankInterest_d_CST_HeadOfficeAndBankInterest_m");
            });

            modelBuilder.Entity<CstHeadOfficeAndBankInterestM>(entity =>
            {
                entity.HasKey(e => e.Year);

                entity.ToTable("CST_HeadOfficeAndBankInterest_m");

                entity.Property(e => e.Year).ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<CstIrLog>(entity =>
            {
                entity.HasKey(e => new { e.Sn, e.ProjectId, e.RecordId });

                entity.ToTable("CST_IR_LOG");

                entity.Property(e => e.Sn).HasColumnName("SN");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Building).HasMaxLength(500);

                entity.Property(e => e.Code).HasMaxLength(500);

                entity.Property(e => e.Discipline).HasMaxLength(500);

                entity.Property(e => e.Floor).HasMaxLength(500);

                entity.Property(e => e.Grd).HasMaxLength(500);

                entity.Property(e => e.LocationArea)
                    .HasColumnName("Location_Area")
                    .HasMaxLength(500);

                entity.Property(e => e.LocationAxis)
                    .HasColumnName("Location_Axis")
                    .HasMaxLength(500);

                entity.Property(e => e.Part).HasMaxLength(500);

                entity.Property(e => e.Ref).HasMaxLength(500);

                entity.Property(e => e.WorkDescription)
                    .HasColumnName("Work_Description")
                    .HasMaxLength(500);

                entity.Property(e => e.WorkType)
                    .HasColumnName("Work_Type")
                    .HasMaxLength(500);

                entity.HasOne(d => d.CstIrLogM)
                    .WithMany(p => p.CstIrLog)
                    .HasForeignKey(d => new { d.Sn, d.ProjectId })
                    .HasConstraintName("FK_CST_IR_LOG_CST_IR_LOG_m");
            });

            modelBuilder.Entity<CstIrLogM>(entity =>
            {
                entity.HasKey(e => new { e.Sn, e.ProjectId });

                entity.ToTable("CST_IR_LOG_m");

                entity.Property(e => e.Sn).HasColumnName("SN");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("date");
            });







            modelBuilder.Entity<CstItemQtyAssumed>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo })
                    .HasName("PK_CST_Item_Qty_Assumed_1");

                entity.ToTable("CST_Item_Qty_Assumed");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AreaNoNavigation)
                    .WithMany(p => p.CstItemQtyAssumed)
                    .HasForeignKey(d => d.AreaNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CST_Item_Qty_Assumed_CST_TArea");
            });

            modelBuilder.Entity<CstItemQtyExecutedBy>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo, e.TaskId })
                    .HasName("PK_CST_Item_Qty_ExactedBy");

                entity.ToTable("CST_Item_Qty_ExecutedBy");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AreaNoNavigation)
                    .WithMany(p => p.CstItemQtyExecutedBy)
                    .HasForeignKey(d => d.AreaNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CST_Item_Qty_ExecutedBy_CST_TArea");
            });

            modelBuilder.Entity<CstItemQtySubmitted>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo })
                    .HasName("PK_CST_Item_Qty_Submitted_1");

                entity.ToTable("CST_Item_Qty_Submitted");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AreaNoNavigation)
                    .WithMany(p => p.CstItemQtySubmitted)
                    .HasForeignKey(d => d.AreaNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CST_Item_Qty_Submitted_CST_TArea");
            });

            modelBuilder.Entity<CstItemQtySubmittedSupplier>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo, e.TaskId });

                entity.ToTable("CST_Item_Qty_Submitted_Supplier");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AreaNoNavigation)
                    .WithMany(p => p.CstItemQtySubmittedSupplier)
                    .HasForeignKey(d => d.AreaNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CST_Item_Qty_Submitted_Supplier_CST_TArea");
            });

            modelBuilder.Entity<CstItemQtyWorkDoneToDate>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo, e.TaskId })
                    .HasName("PK_CST_Item_Qty_Submitted_Task");

                entity.ToTable("CST_Item_Qty_WorkDoneToDate");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AreaNoNavigation)
                    .WithMany(p => p.CstItemQtyWorkDoneToDate)
                    .HasForeignKey(d => d.AreaNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CST_Item_Qty_WorkDoneToDate_CST_TArea1");
            });

            modelBuilder.Entity<CstKpiList>(entity =>
            {
                entity.HasKey(e => e.KpiSerial);

                entity.ToTable("CST_KPI_List");

                entity.Property(e => e.KpiSerial)
                    .HasColumnName("KPI_Serial")
                    .ValueGeneratedNever();

                entity.Property(e => e.Group).HasMaxLength(50);

                entity.Property(e => e.GroupId)
                    .HasColumnName("GroupID")
                    .HasMaxLength(10);

                entity.Property(e => e.Kpi)
                    .HasColumnName("KPI")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstMaterial>(entity =>
            {
                entity.HasKey(e => e.MaterialId);

                entity.ToTable("CST_Material");

                entity.Property(e => e.MaterialId)
                    .HasColumnName("Material_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MaterialName)
                    .HasColumnName("Material_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(20);
            });

            modelBuilder.Entity<CstNewAgreementAddendumD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo, e.SupplierId });

                entity.ToTable("CST_NewAgreement_Addendum_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AggQty).HasColumnName("Agg_Qty");

                entity.Property(e => e.AggTotalCost).HasColumnName("Agg_Total_Cost");

                entity.Property(e => e.AggUnitCost).HasColumnName("Agg_Unit_Cost");

                entity.Property(e => e.BoqItem)
                    .HasColumnName("BOQ_Item")
                    .HasMaxLength(20);

                entity.Property(e => e.BoqItemId)
                    .HasColumnName("BOQ_Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget).HasColumnName("Unit_Budget");

                entity.HasOne(d => d.CstNewAgreementAddendumM)
                    .WithMany(p => p.CstNewAgreementAddendumD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_CST_NewAgreement_Addendum_d_CST_NewAgreement_Addendum_m");
            });

            modelBuilder.Entity<CstNewAgreementAddendumM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("CST_NewAgreement_Addendum_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AggTotalCost).HasColumnName("Agg_TotalCost");

                entity.Property(e => e.CostControlUseComment).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OldDocNo).HasColumnName("Old_Doc_No");
            });

            modelBuilder.Entity<CstNewAgreementD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo, e.SupplierId })
                    .HasName("PK_CST_NewAgreement_d_1");

                entity.ToTable("CST_NewAgreement_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AggQty).HasColumnName("Agg_Qty");

                entity.Property(e => e.AggTotalCost).HasColumnName("Agg_Total_Cost");

                entity.Property(e => e.AggUnitCost).HasColumnName("Agg_Unit_Cost");

                entity.Property(e => e.BoqItem)
                    .HasColumnName("BOQ_Item")
                    .HasMaxLength(20);

                entity.Property(e => e.BoqItemId)
                    .HasColumnName("BOQ_Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Select).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget).HasColumnName("Unit_Budget");

                entity.HasOne(d => d.CstNewAgreementM)
                    .WithMany(p => p.CstNewAgreementD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_CST_NewAgreement_d_CST_NewAgreement_m");
            });

            modelBuilder.Entity<CstNewAgreementM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_CST_NewAgreement_m_1");

                entity.ToTable("CST_NewAgreement_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountingNo).HasMaxLength(50);

                entity.Property(e => e.AggTotalCost).HasColumnName("Agg_TotalCost");

                entity.Property(e => e.CostControlUseComment).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpTypeActual)
                    .HasColumnName("EXP_Type_Actual")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaymentCondition)
                    .HasColumnName("Payment_Condition")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstNewItemForCashD>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.Month, e.CashItemId });

                entity.ToTable("CST_NewItemForCash_d");

                entity.Property(e => e.CashItemId).HasColumnName("CashItem_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<CstNewItemForCashM>(entity =>
            {
                entity.HasKey(e => e.Year);

                entity.ToTable("CST_NewItemForCash_m");

                entity.Property(e => e.Year).ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<CstOverAllDataD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CST_OverAllData_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualProgress).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CashIn).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CashOut).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.PlannedProgress).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PlannedWorkValue).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstOverAllDataD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_OverAllData_d_CST_OverAllData_m");
            });

            modelBuilder.Entity<CstOverAllDataM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("CST_OverAllData_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<CstPartnershipType>(entity =>
            {
                entity.HasKey(e => e.PartnershipTypeId);

                entity.ToTable("CST_PartnershipType");

                entity.Property(e => e.PartnershipTypeId)
                    .HasColumnName("Partnership_Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.PartnershipTypeName)
                    .HasColumnName("Partnership_Type_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstPfrD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.ExpType })
                    .HasName("PK_CST_PFR_d_1");

                entity.ToTable("CST_PFR_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PfrAmount).HasColumnName("PFR_Amount");

                entity.HasOne(d => d.CstPfrM)
                    .WithMany(p => p.CstPfrD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_PFR_d_CST_PFR_m");
            });

            modelBuilder.Entity<CstPfrM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId });

                entity.ToTable("CST_PFR_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.BudgetGrossMargin).HasColumnName("Budget_Gross_Margin");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExpectedRev).HasColumnName("Expected_Rev");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstProcedureAdhereD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month, e.Serial });

                entity.ToTable("CST_Procedure_Adhere_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IrlogAct)
                    .HasColumnName("IRLog_ACT")
                    .HasColumnType("date");

                entity.Property(e => e.IrlogPl)
                    .HasColumnName("IRLog_PL")
                    .HasColumnType("date");

                entity.Property(e => e.ManPowerAct)
                    .HasColumnName("ManPower_ACT")
                    .HasColumnType("date");

                entity.Property(e => e.ManPowerPl)
                    .HasColumnName("ManPower_PL")
                    .HasColumnType("date");

                entity.Property(e => e.PlanningAct)
                    .HasColumnName("Planning_ACT")
                    .HasColumnType("date");

                entity.Property(e => e.PlanningPl)
                    .HasColumnName("Planning_PL")
                    .HasColumnType("date");

                entity.Property(e => e.QsdataAct)
                    .HasColumnName("QSData_ACT")
                    .HasColumnType("date");

                entity.Property(e => e.QsdataPl)
                    .HasColumnName("QSData_PL")
                    .HasColumnType("date");

                entity.HasOne(d => d.CstProcedureAdhereM)
                    .WithMany(p => p.CstProcedureAdhereD)
                    .HasForeignKey(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CST_Procedure_Adhere_d_CST_Procedure_Adhere_m");
            });

            modelBuilder.Entity<CstProcedureAdhereM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CST_Procedure_Adhere_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstSafetyEvaluation>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("CST_Safety_Evaluation");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.EvalPerc).HasColumnName("Eval_Perc");
            });

            modelBuilder.Entity<CstScCertificate>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("CST_SC_Certificate");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AddedEquipment).HasColumnName("Added_Equipment");

                entity.Property(e => e.AddedLabor).HasColumnName("Added_Labor");

                entity.Property(e => e.AddedMaterial).HasColumnName("Added_Material");

                entity.Property(e => e.AddedOther).HasColumnName("Added_Other");

                entity.Property(e => e.AgreementNo).HasColumnName("Agreement_No");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeductedAccDeduction).HasColumnName("Deducted_Acc_Deduction");

                entity.Property(e => e.DeductedAdPaymentRecovery).HasColumnName("Deducted_AD_Payment_Recovery");

                entity.Property(e => e.DeductedCummAePayment).HasColumnName("Deducted_Cumm_Ae_Payment");

                entity.Property(e => e.DeductedPerformanceGuarantee).HasColumnName("Deducted_Performance_Guarantee");

                entity.Property(e => e.DeductedProjectDeduction).HasColumnName("Deducted_Project_Deduction");

                entity.Property(e => e.DeductedRelation).HasColumnName("Deducted_Relation");

                entity.Property(e => e.DeductedTaxes).HasColumnName("Deducted_Taxes");

                entity.Property(e => e.FinalActual).HasColumnName("Final_Actual");

                entity.Property(e => e.FinalAmount).HasColumnName("Final_Amount");

                entity.Property(e => e.FinalApp).HasColumnName("Final_App");

                entity.Property(e => e.FinalPaid).HasColumnName("Final_Paid");

                entity.Property(e => e.FinalProject).HasColumnName("Final_Project");

                entity.Property(e => e.FinalSubmit).HasColumnName("Final_Submit");

                entity.Property(e => e.MaterialOnSiteActual).HasColumnName("MaterialOnSite_Actual");

                entity.Property(e => e.MaterialOnSiteApp).HasColumnName("MaterialOnSite_App");

                entity.Property(e => e.MaterialOnSitePaid).HasColumnName("MaterialOnSite_Paid");

                entity.Property(e => e.MaterialOnSiteProject).HasColumnName("MaterialOnSite_Project");

                entity.Property(e => e.MaterialOnSiteSubmit).HasColumnName("MaterialOnSite_Submit");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.TotalAdded).HasColumnName("Total_Added");

                entity.Property(e => e.TotalDed).HasColumnName("Total_Ded");

                entity.Property(e => e.WorkDoneActual).HasColumnName("WorkDone_Actual");

                entity.Property(e => e.WorkDoneApp).HasColumnName("WorkDone_App");

                entity.Property(e => e.WorkDonePaid).HasColumnName("WorkDone_Paid");

                entity.Property(e => e.WorkDoneProject).HasColumnName("WorkDone_Project");

                entity.Property(e => e.WorkDoneSubmit).HasColumnName("WorkDone_Submit");
            });

            modelBuilder.Entity<CstStoreDataD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.RecordId });

                entity.ToTable("CST_StoreData_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.MaterialId)
                    .HasColumnName("Material_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Source).HasMaxLength(500);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");

                entity.Property(e => e.Vo).HasColumnName("VO");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstStoreDataD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_StoreData_d_CST_StoreData_m");
            });

            modelBuilder.Entity<CstStoreDataM>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("PK_CST_StoreData");

                entity.ToTable("CST_StoreData_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<CstStoreSivD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.RecordId });

                entity.ToTable("CST_Store_SIV_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.For).HasMaxLength(500);

                entity.Property(e => e.MaterialId)
                    .HasColumnName("Material_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.Vo).HasColumnName("VO");
            });

            modelBuilder.Entity<CstStoreSivM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("CST_Store_SIV_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<CstTarea>(entity =>
            {
                entity.HasKey(e => e.AreaNo);

                entity.ToTable("CST_TArea");

                entity.Property(e => e.AreaName)
                    .HasColumnName("Area_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstTdivision>(entity =>
            {
                entity.HasKey(e => e.DivisionId)
                    .HasName("PK_CTS_TDivision");

                entity.ToTable("CST_TDivision");

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DivisionName)
                    .HasColumnName("Division_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstTexpTypeAmountD>(entity =>
            {
                entity.HasKey(e => new { e.ExpType, e.ProjectId, e.Year, e.Month })
                    .HasName("PK_CST_TEXP_Type_Amount_d1");

                entity.ToTable("CST_TEXP_Type_Amount_d");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstTexpTypeAmountM)
                    .WithMany(p => p.CstTexpTypeAmountD)
                    .HasForeignKey(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CST_TEXP_Type_Amount_d_CST_TEXP_Type_Amount_m");
            });

            modelBuilder.Entity<CstTexpTypeAmountD1>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ExpType, e.ProjectId, e.Year, e.Month })
                    .HasName("PK_CST_TEXP_Type_Amount_d");

                entity.ToTable("CST_TEXP_Type_Amount_d--1");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstTexpTypeAmountDAcc>(entity =>
            {
                entity.HasKey(e => new { e.ExpType, e.ProjectId, e.Year, e.Month });

                entity.ToTable("CST_TEXP_Type_Amount_d_ACC");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstTexpTypeAmountM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month })
                    .HasName("PK_CST_TEXP_Type_Amount_m_1");

                entity.ToTable("CST_TEXP_Type_Amount_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstTitem>(entity =>
            {
                entity.HasKey(e => e.ItemNo)
                    .HasName("PK_CST_TItem_1");

                entity.ToTable("CST_TItem");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemType).HasDefaultValueSql("((0))");

                entity.Property(e => e.MainTradeId)
                    .HasColumnName("MainTrade_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OrgQty).HasColumnName("Org_Qty");

                entity.Property(e => e.OrgTotalCost).HasColumnName("Org_TotalCost");

                entity.Property(e => e.OrgTotalSelling).HasColumnName("Org_TotalSelling");

                entity.Property(e => e.OrgUnitCost).HasColumnName("Org_UnitCost");

                entity.Property(e => e.OrgUnitSelling).HasColumnName("Org_UnitSelling");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Select).HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeId)
                    .HasColumnName("Trade_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstTitemDistribution>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo });

                entity.ToTable("CST_TItem_Distribution");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstTitemIndirect>(entity =>
            {
                entity.HasKey(e => e.ItemNo)
                    .HasName("PK_CST_TItem_Indirect_1");

                entity.ToTable("CST_TItem_Indirect");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Desperation).HasDefaultValueSql("((100))");

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemUnit)
                    .HasColumnName("Item_Unit")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.Property(e => e.Wastage).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstTitemIndirectPeriods>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ItemNo, e.ResourceId, e.FromPeriod, e.ToPeriod });

                entity.ToTable("CST_TItem_Indirect_Periods");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.FromPeriod).HasColumnName("From_Period");

                entity.Property(e => e.ToPeriod).HasColumnName("To_Period");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstTitemIndirectResource>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ItemNo, e.ResourceId })
                    .HasName("PK_CST_TItem_Indirect_Resource_1");

                entity.ToTable("CST_TItem_Indirect_Resource");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceQty).HasColumnName("Resource_Qty");

                entity.Property(e => e.ResourceQtyPerTaskUnit).HasColumnName("Resource_Qty_Per_Task_Unit");

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.HasOne(d => d.ItemNoNavigation)
                    .WithMany(p => p.CstTitemIndirectResource)
                    .HasForeignKey(d => d.ItemNo)
                    .HasConstraintName("FK_CST_TItem_Indirect_Resource_CST_TItem_Indirect");
            });

            modelBuilder.Entity<CstTitemQtyApproved>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo });

                entity.ToTable("CST_TItem_Qty_Approved");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstTitemToResource>(entity =>
            {
                entity.HasKey(e => new { e.ItemNo, e.TaskId, e.ResourceId, e.RecordId })
                    .HasName("PK_CTS_TItemToResource");

                entity.ToTable("CST_TItemToResource");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceQty).HasColumnName("Resource_Qty");

                entity.Property(e => e.ResourceQtyPerTaskUnit).HasColumnName("Resource_Qty_Per_Task_Unit");

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.HasOne(d => d.CstTitemToTask)
                    .WithMany(p => p.CstTitemToResource)
                    .HasForeignKey(d => new { d.ItemNo, d.TaskId })
                    .HasConstraintName("FK_CST_TItemToResource_CST_TItemToTask");
            });

            modelBuilder.Entity<CstTitemToTask>(entity =>
            {
                entity.HasKey(e => new { e.ItemNo, e.TaskId })
                    .HasName("PK_CST_TItemToTask_1");

                entity.ToTable("CST_TItemToTask");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TaskQtyPerItemUnit).HasColumnName("Task_Qty_Per_Item_Unit");

                entity.Property(e => e.Unit).HasMaxLength(20);
            });

            modelBuilder.Entity<CstTmainTrade>(entity =>
            {
                entity.HasKey(e => e.MainTradeId);

                entity.ToTable("CST_TMainTrade");

                entity.Property(e => e.MainTradeId)
                    .HasColumnName("MainTrade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MainTradeNme)
                    .HasColumnName("MainTrade_Nme")
                    .HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstTopSheetCatA>(entity =>
            {
                entity.HasKey(e => e.TopSheetCatAId);

                entity.ToTable("CST_TopSheetCatA");

                entity.Property(e => e.TopSheetCatAId)
                    .HasColumnName("TopSheetCatA_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TopSheetCatAName)
                    .HasColumnName("TopSheetCatA_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstTopSheetCatATrans>(entity =>
            {
                entity.HasKey(e => new { e.TopSheetCatAId, e.ProjectId });

                entity.ToTable("CST_TopSheetCatA_Trans");

                entity.Property(e => e.TopSheetCatAId).HasColumnName("TopSheetCatA_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstTopSheetCatATrans)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_TopSheetCatA_Trans_CST_TopSheet_m");
            });

            modelBuilder.Entity<CstTopSheetCatB>(entity =>
            {
                entity.HasKey(e => e.TopSheetCatBId);

                entity.ToTable("CST_TopSheetCatB");

                entity.Property(e => e.TopSheetCatBId)
                    .HasColumnName("TopSheetCatB_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TopSheetCatBName)
                    .HasColumnName("TopSheetCatB_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstTopSheetCatBTrans>(entity =>
            {
                entity.HasKey(e => new { e.TopSheetCatBId, e.ProjectId });

                entity.ToTable("CST_TopSheetCatB_Trans");

                entity.Property(e => e.TopSheetCatBId).HasColumnName("TopSheetCatB_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstTopSheetCatBTrans)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_TopSheetCatB_Trans_CST_TopSheet_m");
            });

            modelBuilder.Entity<CstTopSheetCatC>(entity =>
            {
                entity.HasKey(e => e.TopSheetCatCId)
                    .HasName("PK_CST_TopSheetCatBRevised");

                entity.ToTable("CST_TopSheetCatC");

                entity.Property(e => e.TopSheetCatCId)
                    .HasColumnName("TopSheetCatC_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TopSheetCatCName)
                    .HasColumnName("TopSheetCatC_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstTopSheetCatCTrans>(entity =>
            {
                entity.HasKey(e => new { e.TopSheetCatCId, e.ProjectId })
                    .HasName("PK_CST_TopSheetCatBRevised_Trans");

                entity.ToTable("CST_TopSheetCatC_Trans");

                entity.Property(e => e.TopSheetCatCId).HasColumnName("TopSheetCatC_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CstTopSheetCatCTrans)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CST_TopSheetCatC_Trans_CST_TopSheet_m");
            });

            modelBuilder.Entity<CstTopSheetM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("CST_TopSheet_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.Submit).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstTresource>(entity =>
            {
                entity.HasKey(e => e.ResourceId);

                entity.ToTable("CST_TResource");

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ExpType)
                    .IsRequired()
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupId)
                    .IsRequired()
                    .HasColumnName("ResourceGroup_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceGroupL2Id)
                    .IsRequired()
                    .HasColumnName("ResourceGroupL2_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceGroupL3Id)
                    .IsRequired()
                    .HasColumnName("ResourceGroupL3_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceName)
                    .HasColumnName("Resource_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Temp)
                    .HasColumnName("temp")
                    .HasMaxLength(20);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstTresourceGroup>(entity =>
            {
                entity.HasKey(e => e.ResourceGroupId);

                entity.ToTable("CST_TResource_Group");

                entity.Property(e => e.ResourceGroupId)
                    .HasColumnName("ResourceGroup_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupName)
                    .HasColumnName("ResourceGroup_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstTresourceGroupLevel2>(entity =>
            {
                entity.HasKey(e => e.ResourceGroupL2Id)
                    .HasName("PK_CST_TResource_GroupLevel2_1");

                entity.ToTable("CST_TResource_GroupLevel2");

                entity.Property(e => e.ResourceGroupL2Id)
                    .HasColumnName("ResourceGroupL2_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupL2Name)
                    .HasColumnName("ResourceGroupL2_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstTresourceGroupLevel3>(entity =>
            {
                entity.HasKey(e => e.ResourceGroupL3Id)
                    .HasName("PK_CST_TResource_GroupLevel2");

                entity.ToTable("CST_TResource_GroupLevel3");

                entity.Property(e => e.ResourceGroupL3Id)
                    .HasColumnName("ResourceGroupL3_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupL3Name)
                    .HasColumnName("ResourceGroupL3_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.V)
                    .HasColumnName("v")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstTresourceMaterialD>(entity =>
            {
                entity.HasKey(e => new { e.ResourceId, e.MaterialId, e.RecordId });

                entity.ToTable("CST_TResource_Material_d");

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.MaterialId)
                    .HasColumnName("Material_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.CstTresourceMaterialD)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_CST_TResource_Material_d_CST_TResource");
            });

            modelBuilder.Entity<CstTtask>(entity =>
            {
                entity.HasKey(e => e.TaskId);

                entity.ToTable("CST_TTask");

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DivisionId)
                    .IsRequired()
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaskName)
                    .HasColumnName("Task_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Unit).HasMaxLength(20);
            });

            modelBuilder.Entity<CstTtrade>(entity =>
            {
                entity.HasKey(e => e.TradeId);

                entity.ToTable("CST_TTrade");

                entity.Property(e => e.TradeId)
                    .HasColumnName("Trade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TradeNme)
                    .HasColumnName("Trade_Nme")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstTtransferAddingD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.AreaNo, e.ResourceId });

                entity.ToTable("CST_TTransfer_Adding_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AreaNo).HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.HasOne(d => d.CstTtransferM)
                    .WithMany(p => p.CstTtransferAddingD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_TTransfer_Adding_d_CST_TTransfer_m");
            });

            modelBuilder.Entity<CstTtransferArea>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.RecordId })
                    .HasName("PK_CST_TChangeOrder_Area");

                entity.ToTable("CST_TTransfer_Area");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.HasOne(d => d.CstTtransferM)
                    .WithMany(p => p.CstTtransferArea)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_TTransfer_Area_CST_TTransfer_m");
            });

            modelBuilder.Entity<CstTtransferD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.AreaNo, e.ResourceId })
                    .HasName("PK_CST_TChangeOrder_d");

                entity.ToTable("CST_TTransfer_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AreaNo).HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.HasOne(d => d.CstTtransferM)
                    .WithMany(p => p.CstTtransferD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId })
                    .HasConstraintName("FK_CST_TTransfer_d_CST_TTransfer_m");
            });

            modelBuilder.Entity<CstTtransferM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId })
                    .HasName("PK_CST_TChangeOrder");

                entity.ToTable("CST_TTransfer_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstTworkPackage>(entity =>
            {
                entity.HasKey(e => e.WorkPackageId);

                entity.ToTable("CST_TWorkPackage");

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackage)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstVendorPaymentD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.ItemNo });

                entity.ToTable("CST_Vendor_Payment_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ReqQty).HasColumnName("Req_Qty");

                entity.Property(e => e.TotalCost).HasColumnName("Total_Cost");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitCost)
                    .HasColumnName("Unit_Cost")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstVendorPaymentM)
                    .WithMany(p => p.CstVendorPaymentD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_CST_Vendor_Payment_d_CST_Vendor_Payment_m");
            });

            modelBuilder.Entity<CstVendorPaymentM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_CST_Vendor_Payment _m");

                entity.ToTable("CST_Vendor_Payment_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .IsRequired()
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<CstnAgreementBqoRelation>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo, e.BqoItem });

                entity.ToTable("CSTN_AgreementBQO_Relation");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BqoItem)
                    .HasColumnName("BQO_Item")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstnConstructionCategory>(entity =>
            {
                entity.HasKey(e => e.ConstructionCategoryId);

                entity.ToTable("CSTN_ConstructionCategory");

                entity.Property(e => e.ConstructionCategoryId)
                    .HasColumnName("ConstructionCategory_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ConstructionCategoryName)
                    .HasColumnName("ConstructionCategory_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstnInvoiceDebitCreditNotesD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month, e.CostId, e.CostIdTo });

                entity.ToTable("CSTN_Invoice_DebitCreditNotes_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CostIdTo)
                    .HasColumnName("Cost_ID_To")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.CstnInvoiceDebitCreditNotesM)
                    .WithMany(p => p.CstnInvoiceDebitCreditNotesD)
                    .HasForeignKey(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CSTN_Invoice_DebitCreditNotes_d_CSTN_Invoice_DebitCreditNotes_m");
            });

            modelBuilder.Entity<CstnInvoiceDebitCreditNotesM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month })
                    .HasName("PK_CSTN_Invoice_DebitCreditNotes");

                entity.ToTable("CSTN_Invoice_DebitCreditNotes_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CstnInvoiceEquipmentD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month, e.CostId })
                    .HasName("PK_CSTN_Invoice_Equipments_d");

                entity.ToTable("CSTN_Invoice_Equipment_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstnInvoiceEquipmentM)
                    .WithMany(p => p.CstnInvoiceEquipmentD)
                    .HasForeignKey(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CSTN_Invoice_Equipments_d_CSTN_Invoice_Equipments_m");
            });

            modelBuilder.Entity<CstnInvoiceEquipmentM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month })
                    .HasName("PK_CSTN_Invoice_Equipments_m");

                entity.ToTable("CSTN_Invoice_Equipment_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CstnInvoiceManPowerD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month, e.PositionId });

                entity.ToTable("CSTN_Invoice_ManPower_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.PositionId)
                    .HasColumnName("Position_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstnInvoiceManPowerM)
                    .WithMany(p => p.CstnInvoiceManPowerD)
                    .HasForeignKey(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CSTN_Invoice_ManPower_d_CSTN_Invoice_ManPower_m");
            });

            modelBuilder.Entity<CstnInvoiceManPowerM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CSTN_Invoice_ManPower_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CstnInvoiceScaffoldingD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CSTN_Invoice_Scaffolding_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstnInvoiceScaffoldingM)
                    .WithMany(p => p.CstnInvoiceScaffoldingD)
                    .HasForeignKey(d => new { d.Year, d.Month })
                    .HasConstraintName("FK_CSTN_Invoice_Scaffolding_d_CSTN_Invoice_Scaffolding_m");
            });

            modelBuilder.Entity<CstnInvoiceScaffoldingM>(entity =>
            {
                entity.HasKey(e => new { e.Year, e.Month })
                    .HasName("PK_CSTN_Invoice_Scaffolding _m");

                entity.ToTable("CSTN_Invoice_Scaffolding_m");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CstnItemsExecutedByD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo });

                entity.ToTable("CSTN_Items_ExecutedBy_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstnItemsExecutedByDD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo, e.AgreementNo })
                    .HasName("PK_CSTN_Items_ExecutedBy_d_d_1");

                entity.ToTable("CSTN_Items_ExecutedBy_d_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.AgreementPer).HasColumnName("Agreement_Per");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.CstnItemsExecutedByD)
                    .WithMany(p => p.CstnItemsExecutedByDD)
                    .HasForeignKey(d => new { d.ProjectId, d.ItemNo, d.AreaNo })
                    .HasConstraintName("FK_CSTN_Items_ExecutedBy_d_d_CSTN_Items_ExecutedBy_d");
            });

            modelBuilder.Entity<CstnItemsProgressD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo });

                entity.ToTable("CSTN_Items_Progress_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstnItemsWeightD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ItemNo, e.AreaNo });

                entity.ToTable("CSTN_Items_Weight_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstnMaterialEq>(entity =>
            {
                entity.HasKey(e => e.MaterialId);

                entity.ToTable("CSTN_Material_EQ");

                entity.Property(e => e.MaterialId)
                    .HasColumnName("Material_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MaterialName)
                    .HasColumnName("Material_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(20);
            });

            modelBuilder.Entity<CstnMaterialReqStepsName>(entity =>
            {
                entity.HasKey(e => e.StepNo);

                entity.ToTable("CSTN_Material_Req_StepsName");

                entity.Property(e => e.StepNo)
                    .HasColumnName("Step_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.StepName)
                    .HasColumnName("Step_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstnNewAgreementD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("CSTN_NewAgreement_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AggQty).HasColumnName("Agg_Qty");

                entity.Property(e => e.AggTotalCost).HasColumnName("Agg_Total_Cost");

                entity.Property(e => e.AggUnitCost).HasColumnName("Agg_Unit_Cost");

                entity.Property(e => e.BoqItem)
                    .HasColumnName("BOQ_Item")
                    .HasMaxLength(20);

                entity.Property(e => e.BoqItemId)
                    .HasColumnName("BOQ_Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Select).HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget).HasColumnName("Unit_Budget");

                entity.HasOne(d => d.CstnNewAgreementM)
                    .WithMany(p => p.CstnNewAgreementD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_CSTN_NewAgreement_d_CSTN_NewAgreement_m");
            });

            modelBuilder.Entity<CstnNewAgreementM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("CSTN_NewAgreement_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountingNo).HasMaxLength(50);

                entity.Property(e => e.AggTotalCost).HasColumnName("Agg_TotalCost");

                entity.Property(e => e.CostControlUseComment).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpTypeActual)
                    .HasColumnName("EXP_Type_Actual")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaymentCondition)
                    .HasColumnName("Payment_Condition")
                    .HasMaxLength(500);

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstnPfrD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Month, e.Year, e.CostId, e.PfrNo });

                entity.ToTable("CSTN_PFR_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.PfrNo)
                    .HasColumnName("PFR_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CurrentBudget).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Forecast).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CstnPfrM)
                    .WithMany(p => p.CstnPfrD)
                    .HasForeignKey(d => new { d.ProjectId, d.Month, d.Year, d.PfrNo })
                    .HasConstraintName("FK_CSTN_PFR_d_CSTN_PFR_m");
            });

            modelBuilder.Entity<CstnPfrM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Month, e.Year, e.PfrNo })
                    .HasName("PK_CSTN_PFR_M");

                entity.ToTable("CSTN_PFR_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.PfrNo)
                    .HasColumnName("PFR_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CstnTexpTypeAmountD>(entity =>
            {
                entity.HasKey(e => new { e.ExpType, e.ProjectId, e.Year, e.Month });

                entity.ToTable("CSTN_TEXP_Type_Amount_d");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstnTexpTypeAmountM)
                    .WithMany(p => p.CstnTexpTypeAmountD)
                    .HasForeignKey(d => new { d.ProjectId, d.Year, d.Month })
                    .HasConstraintName("FK_CSTN_TEXP_Type_Amount_d_CSTN_TEXP_Type_Amount_m");
            });

            modelBuilder.Entity<CstnTexpTypeAmountM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.Year, e.Month });

                entity.ToTable("CSTN_TEXP_Type_Amount_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CstnTmaterialRequisition>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("CSTN_TMaterialRequisition");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActAmount)
                    .HasColumnName("Act_Amount")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ActQuantity)
                    .HasColumnName("Act_Quantity")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ApprovedVONot)
                    .HasColumnName("Approved_V_O_Not")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Assets).HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnName("Budget_Amount")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BudgetQuantity)
                    .HasColumnName("Budget_Quantity")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ceo)
                    .HasColumnName("CEO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CeoApproval)
                    .HasColumnName("CEO_Approval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChangeInForecast)
                    .HasColumnName("Change_In_Forecast")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ClientSpecificApprovalOrNot)
                    .HasColumnName("Client_Specific_Approval_OR_Not")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompetitiveBid)
                    .HasColumnName("Competitive_Bid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractRequiredOrNot)
                    .HasColumnName("Contract_Required_Or_Not")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ControlsAnalyst)
                    .HasColumnName("Controls_Analyst")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostControlManager)
                    .HasColumnName("CostControl_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostControlSenior)
                    .HasColumnName("CostControl_Senior")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.FixedPriceAgreementOrNot)
                    .HasColumnName("Fixed_Price_Agreement_OR_Not")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HacFactoryScope)
                    .HasColumnName("HAC_Factory_Scope")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IfVoApproved).HasColumnName("IF_VO_Approved");

                entity.Property(e => e.IfVoApprovedConcept).HasColumnName("IF_VO_Approved_Concept");

                entity.Property(e => e.IfVoNotSubmittedYet).HasColumnName("IF_VO_Not_Submitted_Yet");

                entity.Property(e => e.IfVoRejected).HasColumnName("IF_VO_Rejected");

                entity.Property(e => e.IfVoSubmitted).HasColumnName("IF_VO_Submitted");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastForecast)
                    .HasColumnName("Last_Forecast")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.MaterialCategory)
                    .HasColumnName("Material_Category")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mdoperation)
                    .HasColumnName("MDOperation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MrIsAttached)
                    .HasColumnName("MR_IS_Attached")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mrdate)
                    .HasColumnName("MRDate")
                    .HasColumnType("date");

                entity.Property(e => e.OperationApproval)
                    .HasColumnName("Operation_Approval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Others).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoIsAttached)
                    .HasColumnName("PO_IS_Attached")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoNumber)
                    .HasColumnName("PO_Number")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcDirector)
                    .HasColumnName("Proc_Director")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Procurement).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ReceivedDate).HasColumnType("date");

                entity.Property(e => e.SoleSource)
                    .HasColumnName("Sole_Source")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreApproval)
                    .HasColumnName("Store_Approval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SubcontractorScope).HasColumnName("Subcontractor_Scope");

                entity.Property(e => e.SupplyChainHead)
                    .HasColumnName("Supply_Chain_Head")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplyChainManager)
                    .HasColumnName("Supply_Chain_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("Total_Budget")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.VoLogSerial)
                    .HasColumnName("VO_LOG_Serial")
                    .HasMaxLength(20);

                entity.Property(e => e.WhereHouseAprovalDate)
                    .HasColumnName("WhereHouse_Aproval_Date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CstnTmaterialRequisitionD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo });

                entity.ToTable("CSTN_TMaterialRequisition_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.SubmitDate).HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.CstnTmaterialRequisitionD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_CSTN_TMaterialRequisition_d_CSTN_TMaterialRequisition_d");
            });

            modelBuilder.Entity<CstnTresource>(entity =>
            {
                entity.HasKey(e => e.ResourceId);

                entity.ToTable("CSTN_TResource");

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ExpType)
                    .IsRequired()
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupId)
                    .HasColumnName("ResourceGroup_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceGroupL2Id)
                    .HasColumnName("ResourceGroupL2_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceGroupL3Id)
                    .HasColumnName("ResourceGroupL3_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceName)
                    .HasColumnName("Resource_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Temp)
                    .HasColumnName("temp")
                    .HasMaxLength(20);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstnTresourceGroup>(entity =>
            {
                entity.HasKey(e => e.ResourceGroupId);

                entity.ToTable("CSTN_TResource_Group");

                entity.Property(e => e.ResourceGroupId)
                    .HasColumnName("ResourceGroup_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupName)
                    .HasColumnName("ResourceGroup_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstnTresourceGroupLevel2>(entity =>
            {
                entity.HasKey(e => e.ResourceGroupL2Id);

                entity.ToTable("CSTN_TResource_GroupLevel2");

                entity.Property(e => e.ResourceGroupL2Id)
                    .HasColumnName("ResourceGroupL2_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupL2Name)
                    .HasColumnName("ResourceGroupL2_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CstnTresourceGroupLevel3>(entity =>
            {
                entity.HasKey(e => e.ResourceGroupL3Id);

                entity.ToTable("CSTN_TResource_GroupLevel3");

                entity.Property(e => e.ResourceGroupL3Id)
                    .HasColumnName("ResourceGroupL3_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResourceGroupL3Name)
                    .HasColumnName("ResourceGroupL3_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.V)
                    .HasColumnName("v")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstnTresourceMaterialD>(entity =>
            {
                entity.HasKey(e => new { e.ResourceId, e.MaterialId, e.RecordId });

                entity.ToTable("CSTN_TResource_Material_d");

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.MaterialId)
                    .HasColumnName("Material_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.CstnTresourceMaterialD)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_CSTN_TResource_Material_d_CSTN_TResource");
            });

            modelBuilder.Entity<CstnVendorFalseAccountD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SupplierId, e.RecordId });

                entity.ToTable("CSTN_Vendor_FalseAccount_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstnVendorFalseAccountM)
                    .WithMany(p => p.CstnVendorFalseAccountD)
                    .HasForeignKey(d => new { d.ProjectId, d.SupplierId })
                    .HasConstraintName("FK_CSTN_Vendor_FalseAccount_d_CSTN_Vendor_FalseAccount_m");
            });

            modelBuilder.Entity<CstnVendorFalseAccountM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SupplierId });

                entity.ToTable("CSTN_Vendor_FalseAccount_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<CstnVendorPaymentD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.ItemNo, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualWd).HasColumnName("Actual_WD");

                entity.Property(e => e.AgrrementType).HasMaxLength(50);

                entity.Property(e => e.AppPerc).HasColumnName("App_Perc");

                entity.Property(e => e.AppQtyCost).HasColumnName("App_Qty_Cost");

                entity.Property(e => e.ApprovedByClient).HasColumnName("Approved_By_Client");

                entity.Property(e => e.BalanceQty).HasColumnName("Balance_Qty");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DoneByHac).HasColumnName("Done_By_Hac");

                entity.Property(e => e.ExecutedByScUnit).HasColumnName("Executed_by_SC_Unit");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaidByClient).HasColumnName("Paid_By_Client");

                entity.Property(e => e.PaidPerc).HasColumnName("Paid_Perc");

                entity.Property(e => e.ReqQty).HasColumnName("Req_Qty");

                entity.Property(e => e.RequiredBySite).HasColumnName("Required_By_Site");

                entity.Property(e => e.ScAppQty).HasColumnName("SC_App_Qty");

                entity.Property(e => e.ScPaidQty).HasColumnName("SC_Paid_Qty");

                entity.Property(e => e.ScSubQty).HasColumnName("SC_Sub_Qty");

                entity.Property(e => e.SubPerc).HasColumnName("Sub_Perc");

                entity.Property(e => e.SubQtyCost).HasColumnName("Sub_Qty_Cost");

                entity.Property(e => e.SubmittedToClient).HasColumnName("Submitted_To_Client");

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstnVendorPaymentM)
                    .WithMany(p => p.CstnVendorPaymentD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_d_CSTN_Vendor_Payment_m");
            });

            modelBuilder.Entity<CstnVendorPaymentEvalD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ParamterId });

                entity.ToTable("CSTN_Vendor_Payment_Eval_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstnVendorPaymentM)
                    .WithMany(p => p.CstnVendorPaymentEvalD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Eval_d_CSTN_Vendor_Payment_m");
            });

            modelBuilder.Entity<CstnVendorPaymentEvalManualD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ParamterId });

                entity.ToTable("CSTN_Vendor_Payment_Eval_Manual_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstnVendorPaymentManualM)
                    .WithMany(p => p.CstnVendorPaymentEvalManualD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Eval_Manual_d_CSTN_Vendor_Payment_Manual_m");
            });

            modelBuilder.Entity<CstnVendorPaymentEvalManualSteelD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ParamterId });

                entity.ToTable("CSTN_Vendor_Payment_Eval_Manual_Steel_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstnVendorPaymentManualSteelM)
                    .WithMany(p => p.CstnVendorPaymentEvalManualSteelD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Eval_Manual_Steel_d_CSTN_Vendor_Payment_Manual_Steel_m");
            });

            modelBuilder.Entity<CstnVendorPaymentEvalManualWoodD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ParamterId });

                entity.ToTable("CSTN_Vendor_Payment_Eval_Manual_Wood_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstnVendorPaymentManualWoodM)
                    .WithMany(p => p.CstnVendorPaymentEvalManualWoodD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Eval_Manual_Wood_d_CSTN_Vendor_Payment_Manual_Wood_m");
            });

            modelBuilder.Entity<CstnVendorPaymentEvalProcD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ParamterId });

                entity.ToTable("CSTN_Vendor_Payment_Eval_Proc_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CstnVendorPaymentLinksD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("CSTN_Vendor_Payment_Links_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AgrrementType).HasMaxLength(500);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CstnVendorPaymentLinksM)
                    .WithMany(p => p.CstnVendorPaymentLinksD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Links_d_CSTN_Vendor_Payment_Links_m");
            });

            modelBuilder.Entity<CstnVendorPaymentLinksM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId })
                    .HasName("PK_CST_Vendor_Payment_Links_m");

                entity.ToTable("CSTN_Vendor_Payment_Links_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<CstnVendorPaymentM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AddedEquipment).HasColumnName("Added_Equipment");

                entity.Property(e => e.AddedLabor).HasColumnName("Added_Labor");

                entity.Property(e => e.AddedMaterial).HasColumnName("Added_Material");

                entity.Property(e => e.AddedOther).HasColumnName("Added_Other");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeductedAccDeduction).HasColumnName("Deducted_Acc_Deduction");

                entity.Property(e => e.DeductedAdPaymentRecovery).HasColumnName("Deducted_AD_Payment_Recovery");

                entity.Property(e => e.DeductedCummAePayment).HasColumnName("Deducted_Cumm_Ae_Payment");

                entity.Property(e => e.DeductedPerformanceGuarantee).HasColumnName("Deducted_Performance_Guarantee");

                entity.Property(e => e.DeductedProjectDeduction).HasColumnName("Deducted_Project_Deduction");

                entity.Property(e => e.DeductedRelation).HasColumnName("Deducted_Relation");

                entity.Property(e => e.DeductedTaxes).HasColumnName("Deducted_Taxes");

                entity.Property(e => e.EquipmentByCost).HasColumnName("Equipment_ByCost");

                entity.Property(e => e.EquipmentByProject).HasColumnName("Equipment_ByProject");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalActual).HasColumnName("Final_Actual");

                entity.Property(e => e.FinalAmount).HasColumnName("Final_Amount");

                entity.Property(e => e.FinalApp).HasColumnName("Final_App");

                entity.Property(e => e.FinalPaid).HasColumnName("Final_Paid");

                entity.Property(e => e.FinalProject).HasColumnName("Final_Project");

                entity.Property(e => e.FinalSubmit).HasColumnName("Final_Submit");

                entity.Property(e => e.LaborByCost).HasColumnName("Labor_ByCost");

                entity.Property(e => e.LaborByProject).HasColumnName("Labor_ByProject");

                entity.Property(e => e.MaterialByCost).HasColumnName("Material_ByCost");

                entity.Property(e => e.MaterialByProject).HasColumnName("Material_ByProject");

                entity.Property(e => e.MaterialOnSiteActual).HasColumnName("MaterialOnSite_Actual");

                entity.Property(e => e.MaterialOnSiteActualAdjust).HasColumnName("MaterialOnSite_Actual_Adjust");

                entity.Property(e => e.MaterialOnSiteApp).HasColumnName("MaterialOnSite_App");

                entity.Property(e => e.MaterialOnSitePaid).HasColumnName("MaterialOnSite_Paid");

                entity.Property(e => e.MaterialOnSiteProject).HasColumnName("MaterialOnSite_Project");

                entity.Property(e => e.MaterialOnSiteSubmit).HasColumnName("MaterialOnSite_Submit");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OtherByByCost).HasColumnName("Other_ByByCost");

                entity.Property(e => e.OtherByProject).HasColumnName("Other_ByProject");

                entity.Property(e => e.PaymentPerc).HasColumnName("Payment_Perc");

                entity.Property(e => e.TotalAdded).HasColumnName("Total_Added");

                entity.Property(e => e.TotalDed).HasColumnName("Total_Ded");

                entity.Property(e => e.WorkDoneActual).HasColumnName("WorkDone_Actual");

                entity.Property(e => e.WorkDoneApp).HasColumnName("WorkDone_App");

                entity.Property(e => e.WorkDonePaid).HasColumnName("WorkDone_Paid");

                entity.Property(e => e.WorkDoneProject).HasColumnName("WorkDone_Project");

                entity.Property(e => e.WorkDoneSubmit).HasColumnName("WorkDone_Submit");
            });

            modelBuilder.Entity<CstnVendorPaymentManualAddD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.CostId });

                entity.ToTable("CSTN_Vendor_Payment_Manual_Add_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ConstructionCategoryId)
                    .IsRequired()
                    .HasColumnName("ConstructionCategory_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.HasOne(d => d.CstnVendorPaymentManualM)
                    .WithMany(p => p.CstnVendorPaymentManualAddD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Manual_Add_d_CSTN_Vendor_Payment_Manual_m");
            });

            modelBuilder.Entity<CstnVendorPaymentManualD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ItemNo })
                    .HasName("PK_CSTN_Vendor_Payment_Manual_d_1");

                entity.ToTable("CSTN_Vendor_Payment_Manual_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AgrrementType).HasMaxLength(50);

                entity.Property(e => e.Bcwp).HasColumnName("BCWP");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ReqQty).HasColumnName("Req_Qty");

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitOffer).HasColumnName("Unit_Offer");

                entity.HasOne(d => d.CstnVendorPaymentManualM)
                    .WithMany(p => p.CstnVendorPaymentManualD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Manual_d_CSTN_Vendor_Payment_Manual_m");
            });

            modelBuilder.Entity<CstnVendorPaymentManualDedD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_Ded_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ConstructionCategoryId)
                    .IsRequired()
                    .HasColumnName("ConstructionCategory_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.HasOne(d => d.CstnVendorPaymentManualM)
                    .WithMany(p => p.CstnVendorPaymentManualDedD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Manual_Ded_d_CSTN_Vendor_Payment_Manual_m");
            });

            modelBuilder.Entity<CstnVendorPaymentManualM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AddedEquipment).HasColumnName("Added_Equipment");

                entity.Property(e => e.AddedLabor).HasColumnName("Added_Labor");

                entity.Property(e => e.AddedMaterial).HasColumnName("Added_Material");

                entity.Property(e => e.AddedOther).HasColumnName("Added_Other");

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.ApprovedUser)
                    .HasColumnName("Approved_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CostId)
                    .IsRequired()
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DeductedAccDeduction).HasColumnName("Deducted_Acc_Deduction");

                entity.Property(e => e.DeductedAdPaymentRecovery).HasColumnName("Deducted_AD_Payment_Recovery");

                entity.Property(e => e.DeductedCummAePayment).HasColumnName("Deducted_Cumm_Ae_Payment");

                entity.Property(e => e.DeductedPerformanceGuarantee).HasColumnName("Deducted_Performance_Guarantee");

                entity.Property(e => e.DeductedProjectDeduction).HasColumnName("Deducted_Project_Deduction");

                entity.Property(e => e.DeductedRelation).HasColumnName("Deducted_Relation");

                entity.Property(e => e.DeductedTaxes).HasColumnName("Deducted_Taxes");

                entity.Property(e => e.EquipmentByCost).HasColumnName("Equipment_ByCost");

                entity.Property(e => e.EquipmentByProject).HasColumnName("Equipment_ByProject");

                entity.Property(e => e.ExpType)
                    .IsRequired()
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalActual).HasColumnName("Final_Actual");

                entity.Property(e => e.FinalAmount).HasColumnName("Final_Amount");

                entity.Property(e => e.FinalApp).HasColumnName("Final_App");

                entity.Property(e => e.FinalPaid).HasColumnName("Final_Paid");

                entity.Property(e => e.FinalProject).HasColumnName("Final_Project");

                entity.Property(e => e.FinalSubmit).HasColumnName("Final_Submit");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LaborByCost).HasColumnName("Labor_ByCost");

                entity.Property(e => e.LaborByProject).HasColumnName("Labor_ByProject");

                entity.Property(e => e.MaterialByCost).HasColumnName("Material_ByCost");

                entity.Property(e => e.MaterialByProject).HasColumnName("Material_ByProject");

                entity.Property(e => e.MaterialOnSiteActual).HasColumnName("MaterialOnSite_Actual");

                entity.Property(e => e.MaterialOnSiteActualAdjust).HasColumnName("MaterialOnSite_Actual_Adjust");

                entity.Property(e => e.MaterialOnSiteApp).HasColumnName("MaterialOnSite_App");

                entity.Property(e => e.MaterialOnSitePaid).HasColumnName("MaterialOnSite_Paid");

                entity.Property(e => e.MaterialOnSiteProject).HasColumnName("MaterialOnSite_Project");

                entity.Property(e => e.MaterialOnSiteSubmit).HasColumnName("MaterialOnSite_Submit");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OtherByByCost).HasColumnName("Other_ByByCost");

                entity.Property(e => e.OtherByProject).HasColumnName("Other_ByProject");

                entity.Property(e => e.PaymentPerc).HasColumnName("Payment_Perc");

                entity.Property(e => e.PerformanceGuarantee)
                    .HasColumnName("Performance_Guarantee")
                    .HasMaxLength(50);

                entity.Property(e => e.Prepared).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreparedUser)
                    .HasColumnName("Prepared_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Printed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Retention).HasMaxLength(50);

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.RevisedUser)
                    .HasColumnName("Revised_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Submitted).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubmittedUser)
                    .HasColumnName("Submitted_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TermsOfPayment).HasMaxLength(500);

                entity.Property(e => e.TotalAdded).HasColumnName("Total_Added");

                entity.Property(e => e.TotalByCost).HasColumnName("Total_ByCost");

                entity.Property(e => e.TotalDed).HasColumnName("Total_Ded");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.WorkDoneActual).HasColumnName("WorkDone_Actual");

                entity.Property(e => e.WorkDoneApp).HasColumnName("WorkDone_App");

                entity.Property(e => e.WorkDonePaid).HasColumnName("WorkDone_Paid");

                entity.Property(e => e.WorkDoneProject).HasColumnName("WorkDone_Project");

                entity.Property(e => e.WorkDoneSubmit).HasColumnName("WorkDone_Submit");

                entity.Property(e => e.WorkPackageOther)
                    .HasColumnName("WorkPackage_Other")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CstnVendorPaymentManualSteelD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ItemNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_Steel_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AgrrementType).HasMaxLength(50);

                entity.Property(e => e.Bcwp).HasColumnName("BCWP");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ReqQty).HasColumnName("Req_Qty");

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitOffer).HasColumnName("Unit_Offer");

                entity.HasOne(d => d.CstnVendorPaymentManualSteelM)
                    .WithMany(p => p.CstnVendorPaymentManualSteelD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Manual_Steel_d_CSTN_Vendor_Payment_Manual_Steel_m");
            });

            modelBuilder.Entity<CstnVendorPaymentManualSteelM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_Steel_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AddedEquipment).HasColumnName("Added_Equipment");

                entity.Property(e => e.AddedLabor).HasColumnName("Added_Labor");

                entity.Property(e => e.AddedMaterial).HasColumnName("Added_Material");

                entity.Property(e => e.AddedOther).HasColumnName("Added_Other");

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.ApprovedUser)
                    .HasColumnName("Approved_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DeductedAccDeduction).HasColumnName("Deducted_Acc_Deduction");

                entity.Property(e => e.DeductedAdPaymentRecovery).HasColumnName("Deducted_AD_Payment_Recovery");

                entity.Property(e => e.DeductedCummAePayment).HasColumnName("Deducted_Cumm_Ae_Payment");

                entity.Property(e => e.DeductedPerformanceGuarantee).HasColumnName("Deducted_Performance_Guarantee");

                entity.Property(e => e.DeductedProjectDeduction).HasColumnName("Deducted_Project_Deduction");

                entity.Property(e => e.DeductedRelation).HasColumnName("Deducted_Relation");

                entity.Property(e => e.DeductedTaxes).HasColumnName("Deducted_Taxes");

                entity.Property(e => e.EquipmentByCost).HasColumnName("Equipment_ByCost");

                entity.Property(e => e.EquipmentByProject).HasColumnName("Equipment_ByProject");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalActual).HasColumnName("Final_Actual");

                entity.Property(e => e.FinalAmount).HasColumnName("Final_Amount");

                entity.Property(e => e.FinalApp).HasColumnName("Final_App");

                entity.Property(e => e.FinalPaid).HasColumnName("Final_Paid");

                entity.Property(e => e.FinalProject).HasColumnName("Final_Project");

                entity.Property(e => e.FinalSubmit).HasColumnName("Final_Submit");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LaborByCost).HasColumnName("Labor_ByCost");

                entity.Property(e => e.LaborByProject).HasColumnName("Labor_ByProject");

                entity.Property(e => e.MaterialByCost).HasColumnName("Material_ByCost");

                entity.Property(e => e.MaterialByProject).HasColumnName("Material_ByProject");

                entity.Property(e => e.MaterialOnSiteActual).HasColumnName("MaterialOnSite_Actual");

                entity.Property(e => e.MaterialOnSiteActualAdjust).HasColumnName("MaterialOnSite_Actual_Adjust");

                entity.Property(e => e.MaterialOnSiteApp).HasColumnName("MaterialOnSite_App");

                entity.Property(e => e.MaterialOnSitePaid).HasColumnName("MaterialOnSite_Paid");

                entity.Property(e => e.MaterialOnSiteProject).HasColumnName("MaterialOnSite_Project");

                entity.Property(e => e.MaterialOnSiteSubmit).HasColumnName("MaterialOnSite_Submit");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OtherByByCost).HasColumnName("Other_ByByCost");

                entity.Property(e => e.OtherByProject).HasColumnName("Other_ByProject");

                entity.Property(e => e.PaymentPerc).HasColumnName("Payment_Perc");

                entity.Property(e => e.PerformanceGuarantee)
                    .HasColumnName("Performance_Guarantee")
                    .HasMaxLength(50);

                entity.Property(e => e.Prepared).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreparedUser)
                    .HasColumnName("Prepared_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Printed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Retention).HasMaxLength(50);

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.RevisedUser)
                    .HasColumnName("Revised_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Submitted).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubmittedUser)
                    .HasColumnName("Submitted_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TermsOfPayment).HasMaxLength(500);

                entity.Property(e => e.TotalAdded).HasColumnName("Total_Added");

                entity.Property(e => e.TotalByCost).HasColumnName("Total_ByCost");

                entity.Property(e => e.TotalDed).HasColumnName("Total_Ded");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.WorkDoneActual).HasColumnName("WorkDone_Actual");

                entity.Property(e => e.WorkDoneApp).HasColumnName("WorkDone_App");

                entity.Property(e => e.WorkDonePaid).HasColumnName("WorkDone_Paid");

                entity.Property(e => e.WorkDoneProject).HasColumnName("WorkDone_Project");

                entity.Property(e => e.WorkDoneSubmit).HasColumnName("WorkDone_Submit");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstnVendorPaymentManualWf>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_WF");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.SubmitDate).HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.HasOne(d => d.CstnVendorPaymentManualM)
                    .WithMany(p => p.CstnVendorPaymentManualWf)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Manual_WF_CSTN_Vendor_Payment_Manual_m");
            });

            modelBuilder.Entity<CstnVendorPaymentManualWoodD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo, e.ItemNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_Wood_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AgrrementType).HasMaxLength(50);

                entity.Property(e => e.Bcwp).HasColumnName("BCWP");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ReqQty).HasColumnName("Req_Qty");

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitOffer).HasColumnName("Unit_Offer");

                entity.HasOne(d => d.CstnVendorPaymentManualWoodM)
                    .WithMany(p => p.CstnVendorPaymentManualWoodD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId, d.AgreementNo })
                    .HasConstraintName("FK_CSTN_Vendor_Payment_Manual_Wood_d_CSTN_Vendor_Payment_Manual_Wood_m");
            });

            modelBuilder.Entity<CstnVendorPaymentManualWoodM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.AgreementNo });

                entity.ToTable("CSTN_Vendor_Payment_Manual_Wood_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AddedEquipment).HasColumnName("Added_Equipment");

                entity.Property(e => e.AddedLabor).HasColumnName("Added_Labor");

                entity.Property(e => e.AddedMaterial).HasColumnName("Added_Material");

                entity.Property(e => e.AddedOther).HasColumnName("Added_Other");

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.ApprovedUser)
                    .HasColumnName("Approved_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DeductedAccDeduction).HasColumnName("Deducted_Acc_Deduction");

                entity.Property(e => e.DeductedAdPaymentRecovery).HasColumnName("Deducted_AD_Payment_Recovery");

                entity.Property(e => e.DeductedCummAePayment).HasColumnName("Deducted_Cumm_Ae_Payment");

                entity.Property(e => e.DeductedPerformanceGuarantee).HasColumnName("Deducted_Performance_Guarantee");

                entity.Property(e => e.DeductedProjectDeduction).HasColumnName("Deducted_Project_Deduction");

                entity.Property(e => e.DeductedRelation).HasColumnName("Deducted_Relation");

                entity.Property(e => e.DeductedTaxes).HasColumnName("Deducted_Taxes");

                entity.Property(e => e.EquipmentByCost).HasColumnName("Equipment_ByCost");

                entity.Property(e => e.EquipmentByProject).HasColumnName("Equipment_ByProject");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalActual).HasColumnName("Final_Actual");

                entity.Property(e => e.FinalAmount).HasColumnName("Final_Amount");

                entity.Property(e => e.FinalApp).HasColumnName("Final_App");

                entity.Property(e => e.FinalPaid).HasColumnName("Final_Paid");

                entity.Property(e => e.FinalProject).HasColumnName("Final_Project");

                entity.Property(e => e.FinalSubmit).HasColumnName("Final_Submit");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LaborByCost).HasColumnName("Labor_ByCost");

                entity.Property(e => e.LaborByProject).HasColumnName("Labor_ByProject");

                entity.Property(e => e.MaterialByCost).HasColumnName("Material_ByCost");

                entity.Property(e => e.MaterialByProject).HasColumnName("Material_ByProject");

                entity.Property(e => e.MaterialOnSiteActual).HasColumnName("MaterialOnSite_Actual");

                entity.Property(e => e.MaterialOnSiteActualAdjust).HasColumnName("MaterialOnSite_Actual_Adjust");

                entity.Property(e => e.MaterialOnSiteApp).HasColumnName("MaterialOnSite_App");

                entity.Property(e => e.MaterialOnSitePaid).HasColumnName("MaterialOnSite_Paid");

                entity.Property(e => e.MaterialOnSiteProject).HasColumnName("MaterialOnSite_Project");

                entity.Property(e => e.MaterialOnSiteSubmit).HasColumnName("MaterialOnSite_Submit");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OtherByByCost).HasColumnName("Other_ByByCost");

                entity.Property(e => e.OtherByProject).HasColumnName("Other_ByProject");

                entity.Property(e => e.PaymentPerc).HasColumnName("Payment_Perc");

                entity.Property(e => e.PerformanceGuarantee)
                    .HasColumnName("Performance_Guarantee")
                    .HasMaxLength(50);

                entity.Property(e => e.Prepared).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreparedUser)
                    .HasColumnName("Prepared_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Printed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Retention).HasMaxLength(50);

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");

                entity.Property(e => e.RevisedUser)
                    .HasColumnName("Revised_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Submitted).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubmittedUser)
                    .HasColumnName("Submitted_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TermsOfPayment).HasMaxLength(500);

                entity.Property(e => e.TotalAdded).HasColumnName("Total_Added");

                entity.Property(e => e.TotalByCost).HasColumnName("Total_ByCost");

                entity.Property(e => e.TotalDed).HasColumnName("Total_Ded");

                entity.Property(e => e.TotalReq).HasColumnName("Total_Req");

                entity.Property(e => e.WorkDoneActual).HasColumnName("WorkDone_Actual");

                entity.Property(e => e.WorkDoneApp).HasColumnName("WorkDone_App");

                entity.Property(e => e.WorkDonePaid).HasColumnName("WorkDone_Paid");

                entity.Property(e => e.WorkDoneProject).HasColumnName("WorkDone_Project");

                entity.Property(e => e.WorkDoneSubmit).HasColumnName("WorkDone_Submit");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CstnVendorPaymentStepsName>(entity =>
            {
                entity.HasKey(e => e.StepNo);

                entity.ToTable("CSTN_Vendor_Payment_StepsName");

                entity.Property(e => e.StepNo)
                    .HasColumnName("Step_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.StepName)
                    .HasColumnName("Step_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<CtnTposition>(entity =>
            {
                entity.HasKey(e => e.PositionId);

                entity.ToTable("CTN_TPosition");

                entity.Property(e => e.PositionId)
                    .HasColumnName("Position_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.PositionName)
                    .HasColumnName("Position_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasIndex(e => e.CurrencyName)
                    .HasName("IX_C_Currency")
                    .IsUnique();

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5)
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrencyName)
                    .IsRequired()
                    .HasColumnName("Currency_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.CurrencySubName)
                    .HasColumnName("Currency_Sub_Name")
                    .HasMaxLength(25);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.Shortcut).HasMaxLength(50);

                entity.HasOne(d => d.Db)
                    .WithMany(p => p.Currency)
                    .HasForeignKey(d => d.DbId)
                    .HasConstraintName("FK_C_Currency_C_DB");
            });

            modelBuilder.Entity<DContractMaint>(entity =>
            {
                entity.HasKey(e => new { e.ContractMaintId, e.ContractNo });

                entity.ToTable("D_ContractMaint");

                entity.Property(e => e.ContractMaintId).HasColumnName("ContractMaint_ID");

                entity.Property(e => e.ContractNo).HasColumnName("Contract_No");

                entity.Property(e => e.AutoRenewed).HasColumnName("Auto_Renewed");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1User)
                    .HasColumnName("Confirm1_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2User)
                    .HasColumnName("Confirm2_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm3User)
                    .HasColumnName("Confirm3_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm4User)
                    .HasColumnName("Confirm4_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm5User)
                    .HasColumnName("Confirm5_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm6User)
                    .HasColumnName("Confirm6_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ContractVal)
                    .HasColumnName("Contract_Val")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CustId)
                    .IsRequired()
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasColumnName("Cust_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.EffectiveDate)
                    .HasColumnName("Effective_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmergencyVisitsNo).HasColumnName("EmergencyVisits_No");

                entity.Property(e => e.FiscalYear)
                    .IsRequired()
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasColumnName("Item_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.LocalRplDate)
                    .HasColumnName("Local_RplDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModelId)
                    .IsRequired()
                    .HasColumnName("Model_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.PreventiveVisitsNo).HasColumnName("PreventiveVisits_No");

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasColumnName("Serial_Number")
                    .HasMaxLength(50);

                entity.Property(e => e.TerminateContract).HasColumnName("Terminate_Contract");

                entity.Property(e => e.VisitVal)
                    .HasColumnName("Visit_Val")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<DContractSalesM>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.ContractNo });

                entity.ToTable("D_ContractSales_m");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.ContractNo).HasColumnName("Contract_No");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1User)
                    .HasColumnName("Confirm1_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2User)
                    .HasColumnName("Confirm2_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm3User)
                    .HasColumnName("Confirm3_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm4User)
                    .HasColumnName("Confirm4_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm5User)
                    .HasColumnName("Confirm5_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Confirm6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm6User)
                    .HasColumnName("Confirm6_User")
                    .HasMaxLength(4);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.CustId)
                    .IsRequired()
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(25);

                entity.Property(e => e.CustName)
                    .HasColumnName("Cust_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DeliveryPeriod)
                    .HasColumnName("Delivery_Period")
                    .HasMaxLength(100);

                entity.Property(e => e.DiscountPerc)
                    .HasColumnName("Discount_Perc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExitPricing).HasColumnName("Exit_Pricing");

                entity.Property(e => e.FiscalYear)
                    .IsRequired()
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LocalRplDate)
                    .HasColumnName("Local_RplDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.NotifyContractNo).HasColumnName("NotifyContract_No");

                entity.Property(e => e.OfferNo).HasColumnName("Offer_No");

                entity.Property(e => e.PassWord).HasMaxLength(25);

                entity.Property(e => e.PolicyId)
                    .IsRequired()
                    .HasColumnName("Policy_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReceivePlace)
                    .HasColumnName("Receive_Place")
                    .HasMaxLength(100);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.SalesMenId)
                    .HasColumnName("SalesMen_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.Val).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Vcurr)
                    .HasColumnName("VCurr")
                    .HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.DContractSalesM)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_D_ContractSales_m_C_Currency");
            });

            modelBuilder.Entity<DTypeG>(entity =>
            {
                entity.HasKey(e => e.TabelMasterName)
                    .HasName("PK__@D_Type_G_1");

                entity.ToTable("_@D_Type_G");

                entity.HasIndex(e => e.DTypeG1)
                    .HasName("IX__@D_Type_G")
                    .IsUnique();

                entity.HasIndex(e => e.Descrp)
                    .HasName("IX__@D_Type_G_1")
                    .IsUnique();

                entity.HasIndex(e => e.DescrpEn)
                    .HasName("IX__@D_Type_G_2")
                    .IsUnique();

                entity.Property(e => e.TabelMasterName)
                    .HasMaxLength(220)
                    .ValueGeneratedNever();

                entity.Property(e => e.DTypeG1).HasColumnName("D_Type_G");

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(220);

                entity.Property(e => e.DescrpEn)
                    .HasColumnName("Descrp_En")
                    .HasMaxLength(220);

                entity.Property(e => e.FieldDTypeS)
                    .HasColumnName("Field_D_Type_s")
                    .HasMaxLength(220);

                entity.Property(e => e.FieldDTypeSName)
                    .HasColumnName("Field_D_Type_s_Name")
                    .HasMaxLength(220);

                entity.Property(e => e.FieldDTypeSTable)
                    .HasColumnName("Field_D_Type_s_Table")
                    .HasMaxLength(220);

                entity.Property(e => e.HasCenterId).HasColumnName("HasCenter_ID");

                entity.Property(e => e.HasExWorkOrderNo).HasColumnName("HasExWorkOrder_No");

                entity.Property(e => e.HasInWorkOrderNo).HasColumnName("HasInWorkOrder_No");

                entity.Property(e => e.HasOpNo).HasColumnName("HasOp_No");

                entity.Property(e => e.HasPoGl).HasColumnName("HasPO_GL");

                entity.Property(e => e.MultiDTypeS).HasColumnName("Multi_D_Type_s");

                entity.Property(e => e.SpName).HasMaxLength(50);

                entity.Property(e => e.TabelMasterNameView)
                    .HasColumnName("TabelMasterName_View")
                    .HasMaxLength(220);
            });

            modelBuilder.Entity<DTypeGD>(entity =>
            {
                entity.HasKey(e => new { e.TabelMasterName, e.RecordId });

                entity.ToTable("_@D_Type_G_d");

                entity.Property(e => e.TabelMasterName).HasMaxLength(220);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.FieldName).HasMaxLength(50);
            });

            modelBuilder.Entity<DTypeGNon>(entity =>
            {
                entity.HasKey(e => new { e.TabelMasterName, e.FieldDTypeS });

                entity.ToTable("_@D_Type_G_Non");

                entity.Property(e => e.TabelMasterName).HasMaxLength(220);

                entity.Property(e => e.FieldDTypeS)
                    .HasColumnName("Field_D_Type_s")
                    .HasMaxLength(220);
            });

            modelBuilder.Entity<DisciplineCode>(entity =>
            {
                entity.HasKey(e => e.DisciplineCode1);

                entity.ToTable("Discipline_Code");

                entity.Property(e => e.DisciplineCode1)
                    .HasColumnName("Discipline_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Discipline).HasMaxLength(50);

                entity.Property(e => e.Test)
                    .HasColumnName("test")
                    .HasMaxLength(4);

                entity.Property(e => e.UserDeputy)
                    .HasColumnName("User_Deputy")
                    .HasMaxLength(4);

                entity.Property(e => e.UserManager)
                    .HasColumnName("User_Manager")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanBuilding>(entity =>
            {
                entity.HasKey(e => e.BuId);

                entity.ToTable("EngPlan_Building");

                entity.Property(e => e.BuId).HasColumnName("Bu_ID");

                entity.Property(e => e.BuDesc)
                    .HasColumnName("Bu_Desc")
                    .HasMaxLength(100);

                entity.Property(e => e.BuInDate)
                    .HasColumnName("Bu_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BuInUser)
                    .HasColumnName("Bu_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.BuName)
                    .HasColumnName("Bu_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.BuUpDate)
                    .HasColumnName("Bu_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BuUpUser)
                    .HasColumnName("Bu_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanClients>(entity =>
            {
                entity.HasKey(e => e.ClientId)
                    .HasName("PK_Engineering_plan_Clients");

                entity.ToTable("EngPlan_Clients");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.ClientDesc).HasMaxLength(50);

                entity.Property(e => e.ClientInDate)
                    .HasColumnName("Client_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ClientInUser)
                    .HasColumnName("Client_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ClientUpUser)
                    .HasColumnName("Client_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ClientUpdate)
                    .HasColumnName("Client_Update")
                    .HasColumnType("datetime");

                entity.Property(e => e.Clientname).HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanConsultant>(entity =>
            {
                entity.HasKey(e => e.ConsultantId)
                    .HasName("PK_Engineering_plan_Consultant");

                entity.ToTable("EngPlan_Consultant");

                entity.Property(e => e.ConsultantId).HasColumnName("ConsultantID");

                entity.Property(e => e.ConsultantDesc).HasMaxLength(50);

                entity.Property(e => e.ConsultantInDate)
                    .HasColumnName("Consultant_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ConsultantInUser)
                    .HasColumnName("Consultant_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ConsultantUpDate)
                    .HasColumnName("Consultant_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ConsultantUpUser)
                    .HasColumnName("Consultant_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.Consultantname).HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanContracts>(entity =>
            {
                entity.HasKey(e => e.ContId);

                entity.ToTable("EngPlan_Contracts");

                entity.Property(e => e.ContId).HasColumnName("Cont_ID");

                entity.Property(e => e.ContDesc)
                    .HasColumnName("Cont_Desc")
                    .HasMaxLength(100);

                entity.Property(e => e.ContInDate)
                    .HasColumnName("Cont_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ContInUser)
                    .HasColumnName("Cont_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ContName)
                    .HasColumnName("Cont_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ContUpDate)
                    .HasColumnName("Cont_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ContUpUser)
                    .HasColumnName("Cont_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanDevision>(entity =>
            {
                entity.HasKey(e => e.DevId);

                entity.ToTable("EngPlan_Devision");

                entity.Property(e => e.DevId).HasColumnName("dev_ID");

                entity.Property(e => e.DevCode)
                    .HasColumnName("dev_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.DevInDate)
                    .HasColumnName("dev_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DevInUser)
                    .HasColumnName("dev_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.DevName)
                    .HasColumnName("dev_name")
                    .HasMaxLength(50);

                entity.Property(e => e.DevUpDate)
                    .HasColumnName("dev_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DevUpUser)
                    .HasColumnName("dev_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanDiscipline>(entity =>
            {
                entity.HasKey(e => e.DiscId);

                entity.ToTable("EngPlan_Discipline");

                entity.Property(e => e.DiscId).HasColumnName("Disc_ID");

                entity.Property(e => e.DiscDesc)
                    .HasColumnName("Disc_Desc")
                    .HasMaxLength(50);

                entity.Property(e => e.DiscInDate)
                    .HasColumnName("Disc_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscInUser)
                    .HasColumnName("Disc_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.DiscName)
                    .HasColumnName("Disc_name")
                    .HasMaxLength(50);

                entity.Property(e => e.DiscUpDate)
                    .HasColumnName("Disc_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DiscUpUser)
                    .HasColumnName("Disc_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanItems>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("EngPlan_Items");

                entity.Property(e => e.ItemId).HasColumnName("Item_ID");

                entity.Property(e => e.ItemDesc)
                    .HasColumnName("Item_Desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemInDate)
                    .HasColumnName("Item_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemInUser)
                    .HasColumnName("Item_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemName)
                    .HasColumnName("Item_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemUpDate)
                    .HasColumnName("Item_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemUpUser)
                    .HasColumnName("Item_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("PK_Engineering_plan_Projects");

                entity.ToTable("EngPlan_Projects");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ClientId).HasColumnName("ClientID");

                entity.Property(e => e.ConsultantId).HasColumnName("ConsultantID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectName)
                    .HasColumnName("Project_name")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdDate)
                    .HasColumnName("Upd_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdUser)
                    .HasColumnName("Upd_user")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanQs>(entity =>
            {
                entity.HasKey(e => e.QsId);

                entity.ToTable("EngPlan_QS");

                entity.Property(e => e.QsId).HasColumnName("QS_ID");

                entity.Property(e => e.BuId).HasColumnName("Bu_ID");

                entity.Property(e => e.ContId).HasColumnName("Cont_ID");

                entity.Property(e => e.DevId).HasColumnName("dev_ID");

                entity.Property(e => e.DiscId).HasColumnName("Disc_ID");

                entity.Property(e => e.FlId).HasColumnName("FL_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemId).HasColumnName("Item_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RoId).HasColumnName("Ro_ID");

                entity.Property(e => e.SubContractorId).HasColumnName("SubContractor_ID");

                entity.Property(e => e.UnId).HasColumnName("Un_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoId).HasColumnName("Zo_ID");
            });

            modelBuilder.Entity<EngPlanQsD>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("EngPlan_QS_D");

                entity.Property(e => e.Serial).HasColumnName("serial");

                entity.Property(e => e.Head1).HasMaxLength(50);

                entity.Property(e => e.Head2).HasMaxLength(50);

                entity.Property(e => e.Horiz1)
                    .HasColumnName("horiz1")
                    .HasMaxLength(50);

                entity.Property(e => e.Horiz2)
                    .HasColumnName("horiz2")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(50);

                entity.Property(e => e.QsId).HasColumnName("QS_ID");

                entity.Property(e => e.Segmant).HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanRoom>(entity =>
            {
                entity.HasKey(e => e.RoId);

                entity.ToTable("EngPlan_Room");

                entity.Property(e => e.RoId).HasColumnName("Ro_ID");

                entity.Property(e => e.RoDesc)
                    .HasColumnName("Ro_Desc")
                    .HasMaxLength(100);

                entity.Property(e => e.RoInDate)
                    .HasColumnName("Ro_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RoInUser)
                    .HasColumnName("Ro_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.RoName)
                    .HasColumnName("Ro_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.RoUpDate)
                    .HasColumnName("Ro_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RoUpUser)
                    .HasColumnName("Ro_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanSubContractor>(entity =>
            {
                entity.HasKey(e => e.SubContractorId);

                entity.ToTable("EngPlan_SubContractor");

                entity.Property(e => e.SubContractorId).HasColumnName("SubContractor_ID");

                entity.Property(e => e.SubContractorAddress)
                    .HasColumnName("SubContractor_Address")
                    .HasMaxLength(50);

                entity.Property(e => e.SubContractorEmail)
                    .HasColumnName("SubContractor_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.SubContractorInDate)
                    .HasColumnName("SubContractor_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SubContractorInUser)
                    .HasColumnName("SubContractor_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.SubContractorName)
                    .HasColumnName("SubContractor_name")
                    .HasMaxLength(50);

                entity.Property(e => e.SubContractorPhone)
                    .HasColumnName("SubContractor_Phone")
                    .HasMaxLength(50);

                entity.Property(e => e.SubContractorUpDate)
                    .HasColumnName("SubContractor_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubContractorUpUser)
                    .HasColumnName("SubContractor_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanUnit>(entity =>
            {
                entity.HasKey(e => e.UnId);

                entity.ToTable("EngPlan_Unit");

                entity.Property(e => e.UnId).HasColumnName("Un_ID");

                entity.Property(e => e.UnDesc)
                    .HasColumnName("Un_Desc")
                    .HasMaxLength(100);

                entity.Property(e => e.UnInDate)
                    .HasColumnName("Un_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UnInUser)
                    .HasColumnName("Un_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.UnName)
                    .HasColumnName("Un_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.UnNoOfColumn).HasColumnName("Un_NoOfColumn");

                entity.Property(e => e.UnUpDate)
                    .HasColumnName("Un_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UnUpUser)
                    .HasColumnName("Un_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlanZone>(entity =>
            {
                entity.HasKey(e => e.ZoId);

                entity.ToTable("EngPlan_Zone");

                entity.Property(e => e.ZoId).HasColumnName("Zo_ID");

                entity.Property(e => e.ZoDesc)
                    .HasColumnName("Zo_Desc")
                    .HasMaxLength(100);

                entity.Property(e => e.ZoInDate)
                    .HasColumnName("Zo_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ZoInUser)
                    .HasColumnName("Zo_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoName)
                    .HasColumnName("Zo_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoUpDate)
                    .HasColumnName("Zo_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ZoUpUser)
                    .HasColumnName("Zo_UpUser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<EngPlaneFloor>(entity =>
            {
                entity.HasKey(e => e.FlId);

                entity.ToTable("EngPlane_Floor");

                entity.Property(e => e.FlId).HasColumnName("FL_ID");

                entity.Property(e => e.FlDesc)
                    .HasColumnName("FL_Desc")
                    .HasMaxLength(100);

                entity.Property(e => e.FlInDate)
                    .HasColumnName("FL_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FlInUser)
                    .HasColumnName("FL_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.FlName)
                    .HasColumnName("FL_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.FlUpDate)
                    .HasColumnName("FL_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FlUpUser)
                    .HasColumnName("FL_UpUser")
                    .HasMaxLength(50);
            });


            modelBuilder.Entity<FieldNames>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.EngName });

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.EngName).HasMaxLength(100);

                entity.Property(e => e.ArName).HasMaxLength(100);

                entity.Property(e => e.EnName).HasMaxLength(100);
            });

            modelBuilder.Entity<Filter>(entity =>
            {
                entity.HasKey(e => e.PageId);

                entity.Property(e => e.PageId).HasColumnName("Page_ID");

                entity.Property(e => e.Field1).HasMaxLength(50);

                entity.Property(e => e.Field10).HasMaxLength(50);

                entity.Property(e => e.Field2).HasMaxLength(50);

                entity.Property(e => e.Field3).HasMaxLength(50);

                entity.Property(e => e.Field4).HasMaxLength(50);

                entity.Property(e => e.Field5).HasMaxLength(50);

                entity.Property(e => e.Field6).HasMaxLength(50);

                entity.Property(e => e.Field7).HasMaxLength(50);

                entity.Property(e => e.Field8).HasMaxLength(50);

                entity.Property(e => e.Field9).HasMaxLength(50);

                entity.Property(e => e.Hfield1)
                    .HasColumnName("HField1")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield10)
                    .HasColumnName("HField10")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield2)
                    .HasColumnName("HField2")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield3)
                    .HasColumnName("HField3")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield4)
                    .HasColumnName("HField4")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield5)
                    .HasColumnName("HField5")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield6)
                    .HasColumnName("HField6")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield7)
                    .HasColumnName("HField7")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield8)
                    .HasColumnName("HField8")
                    .HasMaxLength(50);

                entity.Property(e => e.Hfield9)
                    .HasColumnName("HField9")
                    .HasMaxLength(50);

                entity.Property(e => e.PageName)
                    .HasColumnName("Page_name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Flash>(entity =>
            {
                entity.ToTable("flash");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Desc).HasMaxLength(100);

                entity.Property(e => e.Value).HasColumnName("value");

                entity.Property(e => e.ValueAr).HasColumnName("value_ar");
            });

            modelBuilder.Entity<FolderPath>(entity =>
            {
                entity.HasKey(e => e.FolderId);

                entity.ToTable("Folder_Path");

                entity.Property(e => e.FolderId).HasColumnName("Folder_ID");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FolderPath1)
                    .IsRequired()
                    .HasColumnName("Folder_Path")
                    .HasMaxLength(1000);

                entity.Property(e => e.FolderTitle)
                    .IsRequired()
                    .HasColumnName("Folder_Title")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LocalRplDate)
                    .HasColumnName("Local_RplDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Governorate>(entity =>
            {
                entity.Property(e => e.GovernorateId)
                    .HasColumnName("Governorate_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.GovernorateAr)
                    .HasColumnName("Governorate_ar")
                    .HasMaxLength(50);

                entity.Property(e => e.GovernorateEng)
                    .HasColumnName("Governorate_eng")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HahcodingInventoryItem>(entity =>
            {
                entity.HasKey(e => new { e.Division1, e.Division2, e.Division3, e.Division4, e.Division5, e.Division6, e.Division7, e.ItemCode });

                entity.ToTable("HAHCoding_InventoryItem");

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division3).HasMaxLength(20);

                entity.Property(e => e.Division4).HasMaxLength(20);

                entity.Property(e => e.Division5).HasMaxLength(20);

                entity.Property(e => e.Division6).HasMaxLength(20);

                entity.Property(e => e.Division7).HasMaxLength(20);

                entity.Property(e => e.ItemCode).HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(200);

                entity.Property(e => e.ItemName).HasMaxLength(2000);

                entity.Property(e => e.ItemSerial).HasMaxLength(500);

                entity.Property(e => e.MaterialTypes).HasMaxLength(200);

                entity.Property(e => e.MatrialGroups).HasMaxLength(200);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv1>(entity =>
            {
                entity.HasKey(e => e.Division1);

                entity.ToTable("HAHCoding_InventoryItemDiv1");

                entity.Property(e => e.Division1)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetGroup).HasMaxLength(20);

                entity.Property(e => e.DivisionName1)
                    .HasColumnName("Division_Name1")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv2>(entity =>
            {
                entity.HasKey(e => new { e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv2");

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.AssetGroup).HasMaxLength(20);

                entity.Property(e => e.DivisionName2)
                    .HasColumnName("Division_Name2")
                    .HasMaxLength(500);

                entity.Property(e => e.UseInDecription).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv2Temp>(entity =>
            {
                entity.HasKey(e => new { e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv2_Temp");

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.AssetGroup).HasMaxLength(20);
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv3>(entity =>
            {
                entity.HasKey(e => new { e.Division3, e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv3");

                entity.Property(e => e.Division3).HasMaxLength(20);

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.AssetGroup).HasMaxLength(20);

                entity.Property(e => e.DivisionName3)
                    .HasColumnName("Division_Name3")
                    .HasMaxLength(500);

                entity.Property(e => e.UseInDecription).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv4>(entity =>
            {
                entity.HasKey(e => new { e.Division4, e.Division3, e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv4");

                entity.Property(e => e.Division4).HasMaxLength(20);

                entity.Property(e => e.Division3).HasMaxLength(20);

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.AssetGroup).HasMaxLength(20);

                entity.Property(e => e.DivisionName4)
                    .HasColumnName("Division_Name4")
                    .HasMaxLength(500);

                entity.Property(e => e.UseInDecription).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv5>(entity =>
            {
                entity.HasKey(e => new { e.Division5, e.Division4, e.Division3, e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv5");

                entity.Property(e => e.Division5).HasMaxLength(20);

                entity.Property(e => e.Division4).HasMaxLength(20);

                entity.Property(e => e.Division3).HasMaxLength(20);

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.AssetGroup).HasMaxLength(20);

                entity.Property(e => e.DivisionName5)
                    .HasColumnName("Division_Name5")
                    .HasMaxLength(500);

                entity.Property(e => e.UseInDecription).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv6>(entity =>
            {
                entity.HasKey(e => new { e.Division6, e.Division5, e.Division4, e.Division3, e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv6");

                entity.Property(e => e.Division6).HasMaxLength(20);

                entity.Property(e => e.Division5).HasMaxLength(20);

                entity.Property(e => e.Division4).HasMaxLength(20);

                entity.Property(e => e.Division3).HasMaxLength(20);

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.DivisionName6)
                    .HasColumnName("Division_Name6")
                    .HasMaxLength(500);

                entity.Property(e => e.UseInDecription).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HahcodingInventoryItemDiv7>(entity =>
            {
                entity.HasKey(e => new { e.Division7, e.Division6, e.Division5, e.Division4, e.Division3, e.Division2, e.Division1 });

                entity.ToTable("HAHCoding_InventoryItemDiv7");

                entity.Property(e => e.Division7).HasMaxLength(20);

                entity.Property(e => e.Division6).HasMaxLength(20);

                entity.Property(e => e.Division5).HasMaxLength(20);

                entity.Property(e => e.Division4).HasMaxLength(20);

                entity.Property(e => e.Division3).HasMaxLength(20);

                entity.Property(e => e.Division2).HasMaxLength(20);

                entity.Property(e => e.Division1).HasMaxLength(20);

                entity.Property(e => e.DivisionName7)
                    .HasColumnName("Division_Name7")
                    .HasMaxLength(500);

                entity.Property(e => e.UseInDecription).HasMaxLength(10);
            });

            modelBuilder.Entity<HahcodingInventoryItemSerial>(entity =>
            {
                entity.HasKey(e => new { e.ItemCode, e.Serial });

                entity.ToTable("HAHCoding_InventoryItem_Serial");

                entity.Property(e => e.ItemCode).HasMaxLength(20);

                entity.Property(e => e.Serial).HasMaxLength(200);

                entity.Property(e => e.ArabicDescrp).HasMaxLength(500);

                entity.Property(e => e.AssetGroupId)
                    .HasColumnName("AssetGroup_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Cab1).HasMaxLength(200);

                entity.Property(e => e.Cab10).HasMaxLength(20);

                entity.Property(e => e.Cab11).HasMaxLength(20);

                entity.Property(e => e.Cab12).HasMaxLength(20);

                entity.Property(e => e.Cab13).HasMaxLength(20);

                entity.Property(e => e.Cab14).HasMaxLength(20);

                entity.Property(e => e.Cab15).HasMaxLength(20);

                entity.Property(e => e.Cab16).HasMaxLength(20);

                entity.Property(e => e.Cab2).HasMaxLength(200);

                entity.Property(e => e.Cab3).HasMaxLength(200);

                entity.Property(e => e.Cab4).HasMaxLength(200);

                entity.Property(e => e.Cab5).HasMaxLength(200);

                entity.Property(e => e.Cab6).HasMaxLength(20);

                entity.Property(e => e.Cab7).HasMaxLength(20);

                entity.Property(e => e.Cab8).HasMaxLength(20);

                entity.Property(e => e.Cab9).HasMaxLength(20);

                entity.Property(e => e.FullSerial).HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(200);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(200);

                entity.Property(e => e.Sapdescrp)
                    .HasColumnName("SAPDescrp")
                    .HasMaxLength(500);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<HahcodingInventoryItemSerialTemp>(entity =>
            {
                entity.HasKey(e => e.FullSerial);

                entity.ToTable("HAHCoding_InventoryItem_Serial_Temp");

                entity.Property(e => e.FullSerial)
                    .HasMaxLength(200)
                    .ValueGeneratedNever();

                entity.Property(e => e.Arabic).HasMaxLength(500);

                entity.Property(e => e.Uom)
                    .HasColumnName("uom")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<HahcodingTest>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("HAHCoding_Test");

                entity.Property(e => e.Code)
                    .HasMaxLength(200)
                    .ValueGeneratedNever();

                entity.Property(e => e.CodeTite).HasMaxLength(2000);
            });

            modelBuilder.Entity<HahcodingUsers>(entity =>
            {
                entity.HasKey(e => e.UserName);

                entity.ToTable("HAHCoding_Users");

                entity.Property(e => e.UserName)
                    .HasColumnName("User_Name")
                    .HasMaxLength(200)
                    .ValueGeneratedNever();

                entity.Property(e => e.DateCreation)
                    .HasColumnName("Date_Creation")
                    .HasColumnType("date");

                entity.Property(e => e.DateModified)
                    .HasColumnName("Date_Modified")
                    .HasColumnType("date");

                entity.Property(e => e.UserAdded).HasMaxLength(200);

                entity.Property(e => e.UserModified)
                    .HasColumnName("User_Modified")
                    .HasMaxLength(200);

                entity.Property(e => e.UserPassword)
                    .HasColumnName("User_password")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Hahcompany>(entity =>
            {
                entity.HasKey(e => e.HaHcoCode);

                entity.ToTable("HAHCompany");

                entity.Property(e => e.HaHcoCode)
                    .HasColumnName("HaHCo_Code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HaHcoName)
                    .HasColumnName("HaHCo_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HatEmployee>(entity =>
            {
                entity.HasKey(e => e.EmployeeNo)
                    .HasName("PK_HAT_Employee_1");

                entity.ToTable("HAT_Employee");

                entity.HasIndex(e => e.IdCardNo)
                    .HasName("IX_HAT_Employee")
                    .IsUnique();

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IdCardNo)
                    .IsRequired()
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<HatEmployeeHistory>(entity =>
            {
                entity.HasKey(e => new { e.RecordNo, e.EmployeeNo });

                entity.ToTable("HAT_Employee_History");

                entity.Property(e => e.RecordNo).ValueGeneratedOnAdd();

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IdCardNo)
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<HatGrade>(entity =>
            {
                entity.HasKey(e => e.GradeId);

                entity.ToTable("HAT_Grade");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeTitle)
                    .HasColumnName("Grade_Title")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<HatGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("HAT_Group");

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupTitle)
                    .IsRequired()
                    .HasColumnName("Group_Title")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HatJobTitle>(entity =>
            {
                entity.HasKey(e => e.JobTitleId);

                entity.ToTable("HAT_JobTitle");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.JobTitleName)
                    .IsRequired()
                    .HasColumnName("Job_Title_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HatProject>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("HAT_Project");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ProjectName).HasMaxLength(500);
            });

            modelBuilder.Entity<HatSalaryType>(entity =>
            {
                entity.HasKey(e => e.SalaryTypeId);

                entity.ToTable("HAT_Salary_Type");

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.SalaryTypeTitle)
                    .HasColumnName("Salary_Type_Title")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<HrAccomplishments>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.AcomId, e.RecordId });

                entity.ToTable("HR_Accomplishments");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.AcomId).HasColumnName("Acom_ID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.LanguageId).HasColumnName("Language_ID");

                entity.Property(e => e.Level).HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.To).HasColumnType("date");
            });

            modelBuilder.Entity<HrAccomplishmentsGroup>(entity =>
            {
                entity.HasKey(e => e.AcomId);

                entity.ToTable("HR_Accomplishments_Group");

                entity.Property(e => e.AcomId).HasColumnName("Acom_ID");

                entity.Property(e => e.AcomName)
                    .HasColumnName("Acom_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrAppSource>(entity =>
            {
                entity.HasKey(e => e.AppSourceId);

                entity.ToTable("HR_App_Source");

                entity.Property(e => e.AppSourceId)
                    .HasColumnName("App_Source_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppSource)
                    .HasColumnName("App_Source")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrApplicationStatus>(entity =>
            {
                entity.HasKey(e => e.AppStatusId);

                entity.ToTable("HR_ApplicationStatus");

                entity.Property(e => e.AppStatusId)
                    .HasColumnName("App_Status_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApplicationStatus)
                    .HasColumnName("Application_Status")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrApproval>(entity =>
            {
                entity.HasKey(e => e.ApprovalId);

                entity.ToTable("HR_Approval");

                entity.Property(e => e.ApprovalId).HasColumnName("Approval_ID");

                entity.Property(e => e.Accommodation).HasDefaultValueSql("((0))");

                entity.Property(e => e.AccommodationTxt)
                    .HasColumnName("Accommodation_txt")
                    .HasMaxLength(1000);

                entity.Property(e => e.ActionType)
                    .HasColumnName("Action_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.ApprovalStep2).HasColumnName("ApprovalStep_2");

                entity.Property(e => e.ApprovalStepUser)
                    .HasColumnName("ApprovalStep_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ApprovalStepUserDate)
                    .HasColumnName("ApprovalStep_User_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Car).HasDefaultValueSql("((1))");

                entity.Property(e => e.CarTxt)
                    .HasColumnName("Car_txt")
                    .HasMaxLength(1000);

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Confirm1)
                    .HasColumnName("Confirm_1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1User)
                    .HasColumnName("Confirm_1_USer")
                    .HasMaxLength(50);

                entity.Property(e => e.Confirm1UserDate)
                    .HasColumnName("Confirm_1_USer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Confirm2)
                    .HasColumnName("Confirm_2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2User)
                    .HasColumnName("Confirm_2_USer")
                    .HasMaxLength(50);

                entity.Property(e => e.Confirm2UserDate)
                    .HasColumnName("Confirm_2_USer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Grade).HasMaxLength(50);

                entity.Property(e => e.HiringStatus)
                    .HasColumnName("Hiring_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewId).HasColumnName("Interview_ID");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.MedicalInsurance)
                    .HasColumnName("Medical_Insurance")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile).HasDefaultValueSql("((0))");

                entity.Property(e => e.MobileTxt)
                    .HasColumnName("Mobile_txt")
                    .HasMaxLength(500);

                entity.Property(e => e.Organization1).HasMaxLength(50);

                entity.Property(e => e.Organization2).HasMaxLength(50);

                entity.Property(e => e.ProjectAllowance)
                    .HasColumnName("Project_allowance")
                    .HasMaxLength(50);

                entity.Property(e => e.ProposedSalary)
                    .HasColumnName("Proposed_Salary")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<HrApprovalConfirm>(entity =>
            {
                entity.ToTable("HR_ApprovalConfirm");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConfirmName)
                    .HasColumnName("Confirm_name")
                    .HasMaxLength(50);

                entity.Property(e => e.HrUserCode)
                    .HasColumnName("Hr_UserCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrAssessment>(entity =>
            {
                entity.ToTable("HR_Assessment");

                entity.Property(e => e.HrAssessmentId).HasColumnName("HR_Assessment_ID");

                entity.Property(e => e.AbilityToTravelOutOfEgypt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm1)
                    .HasColumnName("Confirm_1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrentCompany).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpectedBenefits)
                    .HasColumnName("Expected_Benefits")
                    .HasMaxLength(500);

                entity.Property(e => e.ExpectedSalary).HasColumnName("Expected_Salary");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(10);

                entity.Property(e => e.InterviewId).HasColumnName("Interview_ID");

                entity.Property(e => e.LastCurrentBenefits)
                    .HasColumnName("Last_CurrentBenefits")
                    .HasMaxLength(500);

                entity.Property(e => e.LastCurrentSalary).HasColumnName("Last_CurrentSalary");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(10);

                entity.Property(e => e.NoticePeriod)
                    .HasColumnName("Notice_Period")
                    .HasMaxLength(200);

                entity.Property(e => e.Recommendation).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecommendationNotes)
                    .HasColumnName("Recommendation_Notes")
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<HrCareerLevel>(entity =>
            {
                entity.HasKey(e => e.CareerLevelId);

                entity.ToTable("HR_Career_Level");

                entity.Property(e => e.CareerLevelId)
                    .HasColumnName("Career_Level_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CareerLevelName)
                    .HasColumnName("Career_Level_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrCity>(entity =>
            {
                entity.HasKey(e => e.CityId);

                entity.ToTable("HR_City");

                entity.Property(e => e.CityId)
                    .HasColumnName("City_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CityName)
                    .HasColumnName("City_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrCompetencies>(entity =>
            {
                entity.ToTable("HR_Competencies");

                entity.Property(e => e.HrCompetenciesId)
                    .HasColumnName("HR_Competencies_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.HrCompetenciesTitle)
                    .HasColumnName("HR_Competencies_Title")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrCompetenciesAssessmentD>(entity =>
            {
                entity.HasKey(e => new { e.HrCompetenciesId, e.HrAssessmentId })
                    .HasName("PK_HR_Competencies_Assessment_d_1");

                entity.ToTable("HR_Competencies_Assessment_d");

                entity.Property(e => e.HrCompetenciesId)
                    .HasColumnName("HR_Competencies_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.HrAssessmentId).HasColumnName("HR_Assessment_ID");

                entity.Property(e => e.Acceptable).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Good).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(10);

                entity.Property(e => e.Marginal).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(10);

                entity.Property(e => e.Outstanding).HasDefaultValueSql("((0))");

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HrCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.ToTable("HR_Country");

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountryName)
                    .HasColumnName("Country_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrCountryJob>(entity =>
            {
                entity.HasKey(e => e.CountryIdJob);

                entity.ToTable("HR_Country_Job");

                entity.Property(e => e.CountryIdJob)
                    .HasColumnName("Country_ID_Job")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountryNameJob)
                    .HasColumnName("Country_Name_Job")
                    .HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<HrCourse>(entity =>
            {
                entity.HasKey(e => new { e.SeekerId, e.RecordId });

                entity.ToTable("HR_Course");

                entity.Property(e => e.SeekerId)
                    .HasColumnName("Seeker_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CenterOrIssuer)
                    .HasColumnName("Center_OR_Issuer")
                    .HasMaxLength(1000);

                entity.Property(e => e.CourseOrCertificate)
                    .HasColumnName("Course_OR_Certificate")
                    .HasMaxLength(1000);

                entity.Property(e => e.YearIssued)
                    .HasColumnName("Year_Issued")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<HrDegreeLevel>(entity =>
            {
                entity.HasKey(e => e.DegreeLevelId);

                entity.ToTable("HR_Degree_Level");

                entity.Property(e => e.DegreeLevelId)
                    .HasColumnName("Degree_Level_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DegreeLevelName)
                    .HasColumnName("Degree_Level_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrDiscipline>(entity =>
            {
                entity.HasKey(e => e.DisciplineId);

                entity.ToTable("HR_Discipline");

                entity.Property(e => e.DisciplineId)
                    .HasColumnName("Discipline_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Discipline).HasMaxLength(500);
            });

            modelBuilder.Entity<HrFingerPrintAtt>(entity =>
            {
                entity.ToTable("HR_FingerPrint_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FingerHrcode)
                    .HasColumnName("Finger_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.FingerId).HasColumnName("Finger_ID");

                entity.Property(e => e.FingerInOutMode).HasColumnName("Finger_InOutMode");

                entity.Property(e => e.FingerIp)
                    .IsRequired()
                    .HasColumnName("Finger_IP")
                    .HasMaxLength(50);

                entity.Property(e => e.FingerTime)
                    .HasColumnName("Finger_Time")
                    .HasColumnType("datetime");

                entity.Property(e => e.FingerVerifyMode).HasColumnName("Finger_VerifyMode");

                entity.Property(e => e.FingerWorkcode).HasColumnName("Finger_Workcode");
            });

            modelBuilder.Entity<HrFingerPrintEffects>(entity =>
            {
                entity.HasKey(e => e.EffectShortcut);

                entity.ToTable("HR_FingerPrint_Effects");

                entity.Property(e => e.EffectShortcut)
                    .HasColumnName("Effect_Shortcut")
                    .HasMaxLength(1)
                    .ValueGeneratedNever();

                entity.Property(e => e.EffectName)
                    .HasColumnName("Effect_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrFingerPrintGroups>(entity =>
            {
                entity.HasKey(e => e.FgrpId)
                    .HasName("PK_HR_FingerPrint_Company");

                entity.ToTable("HR_FingerPrint_Groups");

                entity.Property(e => e.FgrpId)
                    .HasColumnName("FGrp_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FgrpName)
                    .HasColumnName("FGrp_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrFingerPrintLogSendEmail>(entity =>
            {
                entity.ToTable("HR_FingerPrint_LogSendEmail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttDate).HasColumnType("date");

                entity.Property(e => e.AttTime).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrFingerPrintMachines>(entity =>
            {
                entity.ToTable("HR_FingerPrint_Machines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FgrpId).HasColumnName("FGrp_ID");

                entity.Property(e => e.InVpn).HasColumnName("In_VPN");

                entity.Property(e => e.MacIp)
                    .HasColumnName("Mac_IP")
                    .HasMaxLength(50);

                entity.Property(e => e.MacName)
                    .HasColumnName("Mac_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.MacPort)
                    .HasColumnName("MAc_Port")
                    .HasMaxLength(50);

                entity.Property(e => e.MacSn)
                    .HasColumnName("Mac_SN")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrFingerPrintPayroll>(entity =>
            {
                entity.HasKey(e => e.PrId);

                entity.ToTable("HR_FingerPrint_Payroll");

                entity.Property(e => e.PrId).HasColumnName("PR_ID");

                entity.Property(e => e.EffectShortcut)
                    .HasColumnName("Effect_Shortcut")
                    .HasMaxLength(50);

                entity.Property(e => e.PrDay)
                    .HasColumnName("PR_Day")
                    .HasColumnType("date");

                entity.Property(e => e.PrHrCode)
                    .HasColumnName("PR_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.PrNotes)
                    .HasColumnName("PR_Notes")
                    .HasMaxLength(500);

                entity.Property(e => e.TimeIn)
                    .HasColumnName("Time_IN")
                    .HasMaxLength(50);

                entity.Property(e => e.TimeOut)
                    .HasColumnName("Time_OUT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrFingerPrintSetting>(entity =>
            {
                entity.ToTable("HR_FingerPrint_Setting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EffectNameAr)
                    .HasColumnName("Effect_NameAR")
                    .HasMaxLength(50);

                entity.Property(e => e.EffectNameEn)
                    .HasColumnName("Effect_NameEN")
                    .HasMaxLength(50);

                entity.Property(e => e.EffectShortcut)
                    .HasColumnName("Effect_Shortcut")
                    .HasMaxLength(50);

                entity.Property(e => e.EffectTime)
                    .HasColumnName("Effect_Time")
                    .HasMaxLength(50);

                entity.Property(e => e.EffectValue)
                    .HasColumnName("Effect_Value")
                    .HasMaxLength(50);

                entity.Property(e => e.FgrpId).HasColumnName("FGrp_ID");
            });

            modelBuilder.Entity<HrFingerPrintWorkingHour>(entity =>
            {
                entity.ToTable("HR_FingerPrint_WorkingHour");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Closed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Holiday).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HrFunction>(entity =>
            {
                entity.HasKey(e => e.FunctionId);

                entity.ToTable("HR_Function");

                entity.Property(e => e.FunctionId)
                    .HasColumnName("Function_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FunctionName)
                    .HasColumnName("Function_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrIndustry>(entity =>
            {
                entity.HasKey(e => e.IndustryId);

                entity.ToTable("HR_Industry");

                entity.Property(e => e.IndustryId)
                    .HasColumnName("Industry_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndustryName)
                    .HasColumnName("Industry_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrInterviewRequest>(entity =>
            {
                entity.HasKey(e => e.InterviewId)
                    .HasName("PK_InterViewRequest");

                entity.ToTable("HR_Interview_Request");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("Interview_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FlagComment).HasMaxLength(100);

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(10);

                entity.Property(e => e.InterStep)
                    .HasColumnName("Inter_Step")
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'Interview')");

                entity.Property(e => e.InterviewEndDate).HasColumnType("datetime");

                entity.Property(e => e.InterviewStartDate).HasColumnType("datetime");

                entity.Property(e => e.Major).HasMaxLength(100);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(10);

                entity.Property(e => e.PersonalCode)
                    .HasColumnName("Personal_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.PreparedUserHrCode)
                    .HasColumnName("Prepared_User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RejectedReasone)
                    .HasColumnName("Rejected_Reasone")
                    .HasMaxLength(50);

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserTechCode)
                    .HasColumnName("User_Tech_Code")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<HrJobCategory>(entity =>
            {
                entity.HasKey(e => e.JobCategoryId);

                entity.ToTable("HR_Job_Category");

                entity.Property(e => e.JobCategoryId)
                    .HasColumnName("Job_Category_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.JobCategoryName)
                    .HasColumnName("Job_Category_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrJobTitle>(entity =>
            {
                entity.HasKey(e => e.JobTitleId);

                entity.ToTable("HR_Job_Title");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.JobTitleName)
                    .HasColumnName("Job_Title_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrJobType>(entity =>
            {
                entity.HasKey(e => e.JobTypeId);

                entity.ToTable("HR_Job_Type");

                entity.Property(e => e.JobTypeId)
                    .HasColumnName("Job_Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.JobTypeName)
                    .HasColumnName("Job_Type_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrLangSkillLevel>(entity =>
            {
                entity.HasKey(e => e.LangSkillLevelId);

                entity.ToTable("HR_Lang_Skill_level");

                entity.Property(e => e.LangSkillLevelId)
                    .HasColumnName("Lang_Skill_level_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.LangSkillLevelName)
                    .HasColumnName("Lang_Skill_level_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrLanguage>(entity =>
            {
                entity.HasKey(e => e.LanguageId);

                entity.ToTable("HR_Language");

                entity.Property(e => e.LanguageId)
                    .HasColumnName("Language_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.LanguageName)
                    .IsRequired()
                    .HasColumnName("Language_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrLanguageD>(entity =>
            {
                entity.HasKey(e => new { e.SeekerId, e.LangSkillLevelId, e.LanguageId });

                entity.ToTable("HR_Language_d");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.LangSkillLevelId).HasColumnName("Lang_Skill_level_ID");

                entity.Property(e => e.LanguageId).HasColumnName("Language_ID");
            });

            modelBuilder.Entity<HrLocation>(entity =>
            {
                entity.HasKey(e => e.LocationId);

                entity.ToTable("HR_Location");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.AreaId).HasColumnName("Area_ID");

                entity.Property(e => e.LocationName)
                    .HasColumnName("Location_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.UpdatedRec).HasColumnName("Updated_Rec");
            });

            modelBuilder.Entity<HrMajor>(entity =>
            {
                entity.HasKey(e => e.MajorId);

                entity.ToTable("HR_Major");

                entity.Property(e => e.MajorId).HasColumnName("Major_ID");

                entity.Property(e => e.MajorName)
                    .HasColumnName("Major_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrMaritalStatus>(entity =>
            {
                entity.HasKey(e => e.MaritalStatusId);

                entity.ToTable("HR_Marital_Status");

                entity.Property(e => e.MaritalStatusId)
                    .HasColumnName("Marital_Status_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.MaritalStatusName)
                    .HasColumnName("Marital_Status_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrRecApprovalsConfirm>(entity =>
            {
                entity.HasKey(e => e.AppId);

                entity.ToTable("HR_Rec_ApprovalsConfirm");

                entity.Property(e => e.AppId).HasColumnName("App_ID");

                entity.Property(e => e.ApprovalConfirm1).HasMaxLength(50);

                entity.Property(e => e.ApprovalConfirm2).HasMaxLength(50);

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.SendOffer).HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecArea>(entity =>
            {
                entity.HasKey(e => e.AreaId);

                entity.ToTable("HR_Rec_Area");

                entity.Property(e => e.AreaId)
                    .HasColumnName("Area_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AreaName)
                    .HasColumnName("Area_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecAuthentication>(entity =>
            {
                entity.ToTable("HR_Rec_Authentication");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PageName)
                    .HasColumnName("Page_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecCities>(entity =>
            {
                entity.HasKey(e => e.CityId);

                entity.ToTable("HR_Rec_Cities");

                entity.Property(e => e.CityId)
                    .HasColumnName("City_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CityName)
                    .HasColumnName("City_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HrRecEmployee>(entity =>
            {
                entity.ToTable("HR_Rec_Employee");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Signature).HasColumnType("image");

                entity.Property(e => e.SubGroupId)
                    .HasColumnName("SubGroup_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecExitCategory>(entity =>
            {
                entity.HasKey(e => e.ExCatId);

                entity.ToTable("HR_Rec_ExitCategory");

                entity.Property(e => e.ExCatId).HasColumnName("ExCat_ID");

                entity.Property(e => e.ExCatName)
                    .HasColumnName("ExCat_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecExitQuestion>(entity =>
            {
                entity.HasKey(e => e.ExQusId)
                    .HasName("PK_HR_");

                entity.ToTable("HR_Rec_ExitQuestion");

                entity.Property(e => e.ExQusId).HasColumnName("ExQus_ID");

                entity.Property(e => e.ExCatId).HasColumnName("ExCat_ID");

                entity.Property(e => e.ExQusName)
                    .HasColumnName("ExQus_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrRecExitResault>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.ExtQusId });

                entity.ToTable("HR_Rec_ExitResault");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HrCode")
                    .HasMaxLength(50);

                entity.Property(e => e.ExtQusId).HasColumnName("ExtQus_ID");

                entity.Property(e => e.Comment).HasMaxLength(1000);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InterviewId).HasColumnName("InterviewID");

                entity.Property(e => e.RecruiterHrcode)
                    .HasColumnName("Recruiter_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecGroups>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("HR_Rec_Groups");

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.GroupName)
                    .HasColumnName("Group_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecHacEmployee>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("HR_Rec_HacEmployee");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountStatus)
                    .HasColumnName("Account_Status")
                    .HasMaxLength(20);

                entity.Property(e => e.AddDate).HasColumnType("datetime");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ArabicName)
                    .HasColumnName("Arabic_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.BbService).HasColumnName("BB_Service");

                entity.Property(e => e.Birthdate).HasColumnType("date");

                entity.Property(e => e.ChildrenCount).HasColumnName("Children_count");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Cv)
                    .HasColumnName("CV")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DeskPhone)
                    .HasColumnName("Desk_Phone")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImgProfile).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewId).HasColumnName("InterviewID");

                entity.Property(e => e.LastName)
                    .HasColumnName("Last_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.LinkedIn).HasMaxLength(200);

                entity.Property(e => e.LocationId)
                    .HasColumnName("Location_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Manager).HasMaxLength(50);

                entity.Property(e => e.ManagerCode)
                    .HasColumnName("Manager_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.MiddleName)
                    .HasColumnName("Middle_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Mobile1).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(200);

                entity.Property(e => e.Pcorlab)
                    .HasColumnName("PCORLab")
                    .HasMaxLength(50);

                entity.Property(e => e.PersonalEmail).HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PrinterNu)
                    .HasColumnName("Printer_Nu")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResidenceId)
                    .HasColumnName("Residence_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RoomNo).HasMaxLength(200);

                entity.Property(e => e.Skype).HasMaxLength(200);

                entity.Property(e => e.StName)
                    .HasColumnName("ST_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Street).HasMaxLength(500);

                entity.Property(e => e.SupportFun)
                    .HasColumnName("Support_Fun")
                    .HasMaxLength(100);

                entity.Property(e => e.TagName)
                    .HasColumnName("Tag_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Usb).HasColumnName("USB");

                entity.Property(e => e.Vbn).HasColumnName("VBN");

                entity.Property(e => e.WindowsAccount)
                    .HasColumnName("Windows_Account")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecHistoryManPower>(entity =>
            {
                entity.ToTable("HR_Rec_HistoryManPower");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Extension).HasMaxLength(50);

                entity.Property(e => e.InterviewId).HasColumnName("Interview_ID");

                entity.Property(e => e.JobListId).HasColumnName("JobList_ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Major).HasMaxLength(50);

                entity.Property(e => e.ManId).HasColumnName("Man_ID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NeedDate)
                    .HasColumnName("Need_Date")
                    .HasColumnType("date");

                entity.Property(e => e.RequetDate)
                    .HasColumnName("Requet_Date")
                    .HasColumnType("date");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("date");

                entity.Property(e => e.TransDate)
                    .HasColumnName("Trans_Date")
                    .HasColumnType("date");

                entity.Property(e => e.TransUser)
                    .HasColumnName("Trans_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecJobApply>(entity =>
            {
                entity.HasKey(e => e.AppId);

                entity.ToTable("HR_Rec_JobApply");

                entity.Property(e => e.AppId).HasColumnName("App_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.MajorId).HasColumnName("Major_ID");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");
            });

            modelBuilder.Entity<HrRecJobDescription>(entity =>
            {
                entity.HasKey(e => e.JobDescriptionId);

                entity.ToTable("HR_REC_JobDescription");

                entity.Property(e => e.JobDescriptionId).HasColumnName("JobDescription_ID");

                entity.Property(e => e.JobDescriptionName)
                    .HasColumnName("JobDescription_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.VacancyId).HasColumnName("Vacancy_ID");
            });

            modelBuilder.Entity<HrRecJobLevel>(entity =>
            {
                entity.HasKey(e => e.JobLevelId);

                entity.ToTable("HR_Rec_JobLevel");

                entity.Property(e => e.JobLevelId)
                    .HasColumnName("Job_LevelID")
                    .ValueGeneratedNever();

                entity.Property(e => e.JobLevelName)
                    .HasColumnName("Job_LevelName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecJobList>(entity =>
            {
                entity.ToTable("HR_Rec_JobList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BusinessUnit)
                    .HasColumnName("Business_unit")
                    .HasMaxLength(20);

                entity.Property(e => e.CostCode).HasMaxLength(50);

                entity.Property(e => e.JobLevelId)
                    .HasColumnName("Job_LevelID")
                    .HasMaxLength(50);

                entity.Property(e => e.JobName)
                    .HasColumnName("Job_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.JobUnit)
                    .HasColumnName("job_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");

                entity.Property(e => e.TreeId).HasColumnName("Tree_ID");
            });

            modelBuilder.Entity<HrRecJobTitleDelete>(entity =>
            {
                entity.ToTable("HR_Rec_JobTitle_Delete");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BusinessUnit)
                    .HasColumnName("Business_unit")
                    .HasMaxLength(20);

                entity.Property(e => e.JobName)
                    .HasColumnName("Job_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.JobUnit)
                    .HasColumnName("job_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");
            });

            modelBuilder.Entity<HrRecManPower>(entity =>
            {
                entity.HasKey(e => e.ManId);

                entity.ToTable("HR_Rec_ManPower");

                entity.Property(e => e.ManId).HasColumnName("Man_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Extension).HasMaxLength(50);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InterviewId).HasColumnName("Interview_ID");

                entity.Property(e => e.JobListId).HasColumnName("JobList_ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Major).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NeedDate)
                    .HasColumnName("Need_Date")
                    .HasColumnType("date");

                entity.Property(e => e.RequetDate)
                    .HasColumnName("Requet_Date")
                    .HasColumnType("date");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<HrRecNotification>(entity =>
            {
                entity.HasKey(e => e.NoticId);

                entity.ToTable("HR_Rec_Notification");

                entity.Property(e => e.NoticId).HasColumnName("Notic_ID");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoticDesc)
                    .HasColumnName("Notic_Desc")
                    .HasMaxLength(500);

                entity.Property(e => e.NoticTitle)
                    .HasColumnName("Notic_Title")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecProjectBudget>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("PK_HR_REC_PROJECTBUDGET");

                entity.ToTable("HR_Rec_ProjectBudget");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Budget18).HasColumnName("Budget_18");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<HrRecQualifications>(entity =>
            {
                entity.HasKey(e => e.QualificationsId)
                    .HasName("PK_Qualifications");

                entity.ToTable("HR_REC_Qualifications");

                entity.Property(e => e.QualificationsId).HasColumnName("Qualifications_ID");

                entity.Property(e => e.QualificationsName)
                    .HasColumnName("Qualifications_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.VacancyId).HasColumnName("Vacancy_ID");
            });

            modelBuilder.Entity<HrRecReqChange>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK_HR_Rec_ReqChange_1");

                entity.ToTable("HR_Rec_ReqChange");

                entity.Property(e => e.ChId).HasColumnName("Ch_ID");

                entity.Property(e => e.ChActionDate)
                    .HasColumnName("Ch_ActionDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChAllExpr).HasColumnName("Ch_AllExpr");

                entity.Property(e => e.ChCurrentDesc)
                    .HasColumnName("Ch_CurrentDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.ChCurrentSalary)
                    .HasColumnName("Ch_CurrentSalary")
                    .HasMaxLength(50);

                entity.Property(e => e.ChCurrentTitle).HasColumnName("Ch_CurrentTitle");

                entity.Property(e => e.ChHacExpr).HasColumnName("Ch_HacExpr");

                entity.Property(e => e.ChHrcode)
                    .HasColumnName("Ch_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.ChInterviewId).HasColumnName("Ch_InterviewID");

                entity.Property(e => e.ChNewDesc)
                    .HasColumnName("Ch_NewDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.ChNewSalary).HasColumnName("Ch_NewSalary");

                entity.Property(e => e.ChNewTitle).HasColumnName("Ch_NewTitle");

                entity.Property(e => e.ChRequester)
                    .HasColumnName("Ch_Requester")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfDirectManager)
                    .HasColumnName("Conf_DirectManager")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfHr)
                    .HasColumnName("Conf_HR")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfHrDate)
                    .HasColumnName("Conf_HR_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ConfOperation)
                    .HasColumnName("Conf_Operation")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HrRecReqTransfer>(entity =>
            {
                entity.HasKey(e => e.TransId)
                    .HasName("PK_HE_Rec_Transfer");

                entity.ToTable("HR_Rec_ReqTransfer");

                entity.Property(e => e.TransId).HasColumnName("Trans_ID");

                entity.Property(e => e.ConfHr)
                    .HasColumnName("Conf_HR")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfHrDate)
                    .HasColumnName("Conf_HR_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ConfOldoperation)
                    .HasColumnName("Conf_OLDOperation")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfOldpm)
                    .HasColumnName("Conf_OLDPM")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfOperation)
                    .HasColumnName("Conf_Operation")
                    .HasMaxLength(50);

                entity.Property(e => e.ConfPm)
                    .HasColumnName("Conf_PM")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.TransActionDate)
                    .HasColumnName("Trans_ActionDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransFromProject).HasColumnName("Trans_FromProject");

                entity.Property(e => e.TransHrcode)
                    .HasColumnName("Trans_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.TransInterviewId).HasColumnName("Trans_InterviewID");

                entity.Property(e => e.TransLeavDate)
                    .HasColumnName("Trans_LeavDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransReason)
                    .HasColumnName("Trans_Reason")
                    .HasMaxLength(500);

                entity.Property(e => e.TransRequester)
                    .HasColumnName("Trans_Requester")
                    .HasMaxLength(50);

                entity.Property(e => e.TransToProject).HasColumnName("Trans_ToProject");
            });

            modelBuilder.Entity<HrRecRequestRequired>(entity =>
            {
                entity.HasKey(e => e.RequestId);

                entity.ToTable("HR_Rec_Request_Required");

                entity.Property(e => e.RequestId).HasColumnName("Request_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InterviewId).HasColumnName("Interview_ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Major).HasMaxLength(100);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecRequiredJobs>(entity =>
            {
                entity.HasKey(e => e.RequiredId)
                    .HasName("PK_HR_Rec_RequiredJobs_1");

                entity.ToTable("HR_Rec_RequiredJobs");

                entity.Property(e => e.RequiredId).HasColumnName("Required_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.JobId).HasColumnName("Job_ID");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.Major).HasMaxLength(100);

                entity.Property(e => e.NeededDate)
                    .HasColumnName("Needed_Date")
                    .HasColumnType("date");

                entity.Property(e => e.ReqCount).HasColumnName("Req_Count");

                entity.Property(e => e.RequestDate)
                    .HasColumnName("Request_Date")
                    .HasColumnType("date");

                entity.Property(e => e.RequestId).HasColumnName("Request_ID");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecRequiredJobsDet>(entity =>
            {
                entity.ToTable("HR_Rec_RequiredJobs_Det");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RequiredId).HasColumnName("Required_ID");

                entity.HasOne(d => d.Required)
                    .WithMany(p => p.HrRecRequiredJobsDet)
                    .HasForeignKey(d => d.RequiredId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HR_Rec_RequiredJobs_Det_HR_Rec_RequiredJobs");
            });

            modelBuilder.Entity<HrRecSubGroups>(entity =>
            {
                entity.HasKey(e => e.SubGroupId);

                entity.ToTable("HR_Rec_SubGroups");

                entity.Property(e => e.SubGroupId)
                    .HasColumnName("SubGroup_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.SubGroupName)
                    .HasColumnName("SubGroup_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecTree>(entity =>
            {
                entity.HasKey(e => e.TreeId);

                entity.ToTable("HR_Rec_Tree");

                entity.Property(e => e.TreeId)
                    .HasColumnName("Tree_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.TreeName)
                    .HasColumnName("Tree_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HrRecVacancies>(entity =>
            {
                entity.HasKey(e => e.VacancyId);

                entity.ToTable("HR_REC_Vacancies");

                entity.Property(e => e.VacancyId)
                    .HasColumnName("Vacancy_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.MajorId).HasColumnName("Major_ID");

                entity.Property(e => e.ProjectsExperience).HasColumnName("Projects_Experience");

                entity.Property(e => e.ReportingLine).HasColumnName("Reporting_Line");

                entity.Property(e => e.VacancyName)
                    .HasColumnName("Vacancy_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.YearsExperirence)
                    .HasColumnName("Years_Experirence")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecWagesEmp>(entity =>
            {
                entity.HasKey(e => e.WempId)
                    .HasName("PK_Hr_Rec_WagesEmp");

                entity.ToTable("HR_Rec_WagesEmp");

                entity.Property(e => e.WempId).HasColumnName("Wemp_ID");

                entity.Property(e => e.FullName).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.NationalId)
                    .HasColumnName("National_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.SuperVisionName)
                    .HasColumnName("SuperVision_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.TitleId).HasColumnName("Title_ID");
            });

            modelBuilder.Entity<HrRecWagesSupervision>(entity =>
            {
                entity.HasKey(e => e.SuperVisionId)
                    .HasName("PK_Hr_Rec_WagesSupervision");

                entity.ToTable("HR_Rec_WagesSupervision");

                entity.Property(e => e.SuperVisionId).HasColumnName("SuperVision_ID");

                entity.Property(e => e.SuperVisionName)
                    .HasColumnName("SuperVision_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrRecWebEducation>(entity =>
            {
                entity.HasKey(e => e.EduId);

                entity.ToTable("HR_RecWeb_Education");

                entity.Property(e => e.EduId).HasColumnName("Edu_ID");

                entity.Property(e => e.Degree).HasMaxLength(50);

                entity.Property(e => e.FieldOfStudy).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.University).HasMaxLength(100);

                entity.HasOne(d => d.Seeker)
                    .WithMany(p => p.HrRecWebEducation)
                    .HasForeignKey(d => d.SeekerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HR_RecWeb_Education_HR_Seeker_web");
            });

            modelBuilder.Entity<HrRecWebProfHist>(entity =>
            {
                entity.HasKey(e => e.ProfId);

                entity.ToTable("HR_RecWeb_ProfHist");

                entity.Property(e => e.ProfId).HasColumnName("Prof_ID");

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.Benefits).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(100);

                entity.Property(e => e.CrossSalary).HasMaxLength(50);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.JobDesc).HasMaxLength(100);

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.ReasonOfLeaving).HasMaxLength(100);

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.HasOne(d => d.Seeker)
                    .WithMany(p => p.HrRecWebProfHist)
                    .HasForeignKey(d => d.SeekerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HR_RecWeb_ProfHist_HR_Seeker_web");
            });

            modelBuilder.Entity<HrRecWebTraining>(entity =>
            {
                entity.HasKey(e => e.TrainId);

                entity.ToTable("HR_RecWeb_Training");

                entity.Property(e => e.TrainId).HasColumnName("Train_ID");

                entity.Property(e => e.Certificate).HasMaxLength(50);

                entity.Property(e => e.FieldOfStudy).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.Institution).HasMaxLength(100);

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.HasOne(d => d.Seeker)
                    .WithMany(p => p.HrRecWebTraining)
                    .HasForeignKey(d => d.SeekerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HR_RecWeb_Training_HR_Seeker_web");
            });

            modelBuilder.Entity<HrSeeker>(entity =>
            {
                entity.HasKey(e => new { e.SeekerId, e.GroupId })
                    .HasName("PK_HR_Seeker_1");

                entity.ToTable("HR_Seeker");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AddressCountryId).HasColumnName("Address_Country_ID");

                entity.Property(e => e.AppSourceId).HasColumnName("App_Source_ID");

                entity.Property(e => e.AppSourceText)
                    .HasColumnName("App_Source_Text")
                    .HasColumnType("date");

                entity.Property(e => e.AppStatusId).HasColumnName("App_Status_ID");

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.CareerLevelId).HasColumnName("Career_Level_ID");

                entity.Property(e => e.CareerObjective)
                    .HasColumnName("Career_Objective")
                    .HasMaxLength(2000);

                entity.Property(e => e.CityId).HasColumnName("City_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CvName)
                    .HasColumnName("CV_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DegreeLevelId).HasColumnName("Degree_Level_ID");

                entity.Property(e => e.DisciplineId).HasColumnName("Discipline_ID");

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("Email_Address")
                    .HasMaxLength(500);

                entity.Property(e => e.Faculty).HasMaxLength(500);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FunctionId).HasColumnName("Function_ID");

                entity.Property(e => e.Gender).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(10);

                entity.Property(e => e.IndustryId).HasColumnName("Industry_ID");

                entity.Property(e => e.JobCategoryId).HasColumnName("Job_Category_ID");

                entity.Property(e => e.JobLocationId).HasColumnName("Job_Location_ID");

                entity.Property(e => e.JobTitle)
                    .HasColumnName("Job_Title")
                    .HasMaxLength(50);

                entity.Property(e => e.JobTitleIdApplied).HasColumnName("Job_Title_ID_Applied");

                entity.Property(e => e.JobTypeId).HasColumnName("Job_Type_ID");

                entity.Property(e => e.MajorId).HasColumnName("Major_ID");

                entity.Property(e => e.MaritalStatusId).HasColumnName("Marital_Status_ID");

                entity.Property(e => e.MobilePhone)
                    .HasColumnName("Mobile_Phone")
                    .HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(10);

                entity.Property(e => e.MonthlySalary).HasColumnName("Monthly_Salary");

                entity.Property(e => e.NationId)
                    .HasColumnName("Nation_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.StillStudying)
                    .HasColumnName("Still_Studying")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TargetIndustryId).HasColumnName("Target_Industry_ID");

                entity.Property(e => e.University).HasMaxLength(500);

                entity.Property(e => e.YearOfGrade)
                    .HasColumnName("Year_Of_Grade")
                    .HasMaxLength(50);

                entity.Property(e => e.YearsOfExperience).HasColumnName("Years_of_Experience");

                entity.Property(e => e.YearsOfExperienceOfSamePostion).HasColumnName("Years_of_Experience_Of_Same_Postion");

                entity.Property(e => e.ZipPostalCode)
                    .HasColumnName("Zip_Postal_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrSeekerWeb>(entity =>
            {
                entity.HasKey(e => e.SeekerId);

                entity.ToTable("HR_Seeker_web");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.BirthPlace).HasMaxLength(50);

                entity.Property(e => e.CityId).HasColumnName("City_ID");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.CompEng)
                    .HasColumnName("Comp_Eng")
                    .HasMaxLength(50);

                entity.Property(e => e.CompInternet)
                    .HasColumnName("Comp_Internet")
                    .HasMaxLength(50);

                entity.Property(e => e.CompOffice)
                    .HasColumnName("Comp_Office")
                    .HasMaxLength(50);

                entity.Property(e => e.CompOth)
                    .HasColumnName("Comp_Oth")
                    .HasMaxLength(50);

                entity.Property(e => e.CvName)
                    .HasColumnName("CV_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("Email_Address")
                    .HasMaxLength(500);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Gender).HasDefaultValueSql("((0))");

                entity.Property(e => e.HaveAppliedDate)
                    .HasColumnName("HaveApplied_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HaveAppliedDep)
                    .HasColumnName("HaveApplied_Dep")
                    .HasMaxLength(50);

                entity.Property(e => e.HaveEmployed).HasDefaultValueSql("((0))");

                entity.Property(e => e.HaveEmployedDate)
                    .HasColumnName("HaveEmployed_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HaveEmployedDep)
                    .HasColumnName("HaveEmployed_Dep")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InDate1)
                    .HasColumnName("InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.Industries).HasMaxLength(50);

                entity.Property(e => e.JobTitle).HasMaxLength(200);

                entity.Property(e => e.JobTitleIdApplied).HasColumnName("Job_Title_ID_Applied");

                entity.Property(e => e.LangAr)
                    .HasColumnName("Lang_AR")
                    .HasMaxLength(50);

                entity.Property(e => e.LangEn)
                    .HasColumnName("Lang_EN")
                    .HasMaxLength(50);

                entity.Property(e => e.LangFr)
                    .HasColumnName("Lang_FR")
                    .HasMaxLength(50);

                entity.Property(e => e.LangOth)
                    .HasColumnName("Lang_Oth")
                    .HasMaxLength(50);

                entity.Property(e => e.MajorId).HasColumnName("Major_ID");

                entity.Property(e => e.MaritalStatus)
                    .HasColumnName("Marital_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.MilitryService).HasMaxLength(50);

                entity.Property(e => e.MobilePhone)
                    .HasColumnName("Mobile_Phone")
                    .HasMaxLength(500);

                entity.Property(e => e.NationId)
                    .HasColumnName("Nation_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Nationality).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.PositionLevel).HasMaxLength(50);

                entity.Property(e => e.University).HasMaxLength(100);

                entity.Property(e => e.YearOfGrade)
                    .HasColumnName("Year_Of_Grade")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrSkillsD>(entity =>
            {
                entity.HasKey(e => new { e.SeekerId, e.RecordId });

                entity.ToTable("HR_Skills_d");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LangSkillLevelId).HasColumnName("Lang_Skill_level_ID");

                entity.Property(e => e.SkillsName)
                    .HasColumnName("Skills_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrTargetIndustry>(entity =>
            {
                entity.HasKey(e => e.TargetIndustryId);

                entity.ToTable("HR_Target_Industry");

                entity.Property(e => e.TargetIndustryId)
                    .HasColumnName("Target_Industry_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.TargetIndustryName)
                    .HasColumnName("Target_Industry_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrTecAssessment>(entity =>
            {
                entity.HasKey(e => e.HrTechnicalId);

                entity.ToTable("HR_Tec_Assessment");

                entity.Property(e => e.HrTechnicalId).HasColumnName("HR_Technical_ID");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FileAttach).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(100);

                entity.Property(e => e.InterviewId).HasColumnName("Interview_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(100);

                entity.Property(e => e.TecComment)
                    .HasColumnName("Tec_Comment")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrTecCriteria>(entity =>
            {
                entity.HasKey(e => e.HrCriteriaId)
                    .HasName("PK_HR_Tec_Criteria");

                entity.ToTable("HR_TecCriteria");

                entity.Property(e => e.HrCriteriaId)
                    .HasColumnName("HR_Criteria_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.HrCriteriaTitle)
                    .HasColumnName("HR_Criteria_Title")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HrTecCriteriaD>(entity =>
            {
                entity.HasKey(e => new { e.HrCriteriaId, e.HrTechnicalId });

                entity.ToTable("HR_TecCriteria_d");

                entity.Property(e => e.HrCriteriaId)
                    .HasColumnName("HR_Criteria_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.HrTechnicalId).HasColumnName("HR_Technical_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Grade)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(10);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<HrTicket>(entity =>
            {
                entity.ToTable("HR_Ticket");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Attached).HasMaxLength(50);

                entity.Property(e => e.CreatorConfirm).HasColumnName("Creator_Confirm");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lev1Id).HasColumnName("Lev1_ID");

                entity.Property(e => e.Lev2Id).HasColumnName("Lev2_ID");

                entity.Property(e => e.Lev3Id).HasColumnName("Lev3_ID");

                entity.Property(e => e.OnBehave).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Subject).HasMaxLength(100);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_Hr_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrTicketAuthority>(entity =>
            {
                entity.HasKey(e => e.TkId);

                entity.ToTable("HR_Ticket_Authority");

                entity.Property(e => e.TkId).HasColumnName("TK_ID");

                entity.Property(e => e.TkUserHrcode)
                    .HasColumnName("TK_UserHRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrTicketCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("HR_Ticket_Category");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.TicketCategory)
                    .HasColumnName("Ticket_Category")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HrTicketCoordinator>(entity =>
            {
                entity.HasKey(e => e.CoorId);

                entity.ToTable("HR_TicketCoordinator");

                entity.Property(e => e.CoorId).HasColumnName("CoorID");

                entity.Property(e => e.CoorUserHrCode)
                    .HasColumnName("CoorUser_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");
            });

            modelBuilder.Entity<HrTicketLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("HR_TicketLog");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.ActionDate)
                    .HasColumnName("Action_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionState)
                    .HasColumnName("Action_State")
                    .HasMaxLength(50);

                entity.Property(e => e.ActionUser)
                    .HasColumnName("Action_User")
                    .HasMaxLength(50);

                entity.Property(e => e.AssignTo).HasMaxLength(50);

                entity.Property(e => e.Attached).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DelayLastDate).HasColumnType("datetime");

                entity.Property(e => e.DelayLevel).HasColumnName("Delay_level");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<HrTicketSelectLev1>(entity =>
            {
                entity.HasKey(e => e.Lev1Id);

                entity.ToTable("HR_Ticket_SelectLev1");

                entity.Property(e => e.Lev1Id)
                    .HasColumnName("Lev1_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Lev1Name)
                    .HasColumnName("Lev1_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HrTicketSelectLev2>(entity =>
            {
                entity.HasKey(e => e.Lev2Id);

                entity.ToTable("HR_Ticket_SelectLev2");

                entity.Property(e => e.Lev2Id).HasColumnName("Lev2_ID");

                entity.Property(e => e.Lev1Id).HasColumnName("Lev1_ID");

                entity.Property(e => e.Lev2Name)
                    .HasColumnName("Lev2_Name")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Lev1)
                    .WithMany(p => p.HrTicketSelectLev2)
                    .HasForeignKey(d => d.Lev1Id)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HR_Ticket_SelectLev2_HR_Ticket_SelectLev1");
            });

            modelBuilder.Entity<HrTicketSelectLev3>(entity =>
            {
                entity.HasKey(e => e.Lev3Id);

                entity.ToTable("HR_Ticket_SelectLev3");

                entity.Property(e => e.Lev3Id).HasColumnName("Lev3_ID");

                entity.Property(e => e.Lev2Id).HasColumnName("Lev2_ID");

                entity.Property(e => e.Lev3Name)
                    .HasColumnName("Lev3_Name")
                    .HasMaxLength(200);

                entity.HasOne(d => d.Lev2)
                    .WithMany(p => p.HrTicketSelectLev3)
                    .HasForeignKey(d => d.Lev2Id)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HR_Ticket_SelectLev3_HR_Ticket_SelectLev2");
            });

            modelBuilder.Entity<HrTicketSubCategory>(entity =>
            {
                entity.HasKey(e => e.SubId);

                entity.ToTable("HR_Ticket_SubCategory");

                entity.Property(e => e.SubId).HasColumnName("Sub_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.SubName)
                    .HasColumnName("Sub_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.SubUserHrcode)
                    .HasColumnName("Sub_UserHRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrVisaEmployeeAlgeria>(entity =>
            {
                entity.HasKey(e => e.DocNo)
                    .HasName("PK_HR_Visa_Employee_Algeria_1");

                entity.ToTable("HR_Visa_Employee_Algeria");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Age).HasMaxLength(50);

                entity.Property(e => e.AuthorizeNo)
                    .HasColumnName("Authorize_No")
                    .HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Code).HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartDate)
                    .HasColumnName("Depart_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartStatusId)
                    .HasColumnName("Depart_Status_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExpiredDate).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MilitaryStatusId)
                    .HasColumnName("Military_Status_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(500);

                entity.Property(e => e.PassportNo).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.PresentingDate)
                    .HasColumnName("Presenting_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Project).HasMaxLength(500);

                entity.Property(e => e.ResponsablePerson).HasMaxLength(500);

                entity.Property(e => e.VisaJobTitleId)
                    .HasColumnName("Visa_Job_Title_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<HrWorkExperience>(entity =>
            {
                entity.HasKey(e => new { e.SeekerId, e.RecordId });

                entity.ToTable("HR_Work_Experience");

                entity.Property(e => e.SeekerId).HasColumnName("Seeker_ID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CompanyName)
                    .HasColumnName("Company_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.IndustryId).HasColumnName("Industry_ID");

                entity.Property(e => e.JobTitleId).HasColumnName("Job_Title_ID");

                entity.Property(e => e.PositionInCompany)
                    .HasColumnName("Position_in_Company")
                    .HasMaxLength(500);

                entity.Property(e => e.To).HasColumnType("date");

                entity.Property(e => e.WorkDescription)
                    .HasColumnName("Work_Description")
                    .HasMaxLength(3000);
            });

            modelBuilder.Entity<ImportDData>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__@Impot_d");

                entity.ToTable("_@Import_d_Data");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Condition).HasMaxLength(50);

                entity.Property(e => e.FieldIns)
                    .IsRequired()
                    .HasColumnName("Field_Ins")
                    .HasMaxLength(50);

                entity.Property(e => e.FieldSource)
                    .IsRequired()
                    .HasColumnName("Field_Source")
                    .HasMaxLength(50);

                entity.Property(e => e.TableIns)
                    .IsRequired()
                    .HasColumnName("Table_Ins")
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TableSource)
                    .IsRequired()
                    .HasColumnName("Table_Source")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ImportDKeys>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("_@Import_d_Keys");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.FieldIns)
                    .IsRequired()
                    .HasColumnName("Field_Ins")
                    .HasMaxLength(50);

                entity.Property(e => e.FieldSource)
                    .IsRequired()
                    .HasColumnName("Field_Source")
                    .HasMaxLength(50);

                entity.Property(e => e.TableIns)
                    .IsRequired()
                    .HasColumnName("Table_Ins")
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TableSource)
                    .IsRequired()
                    .HasColumnName("Table_Source")
                    .HasMaxLength(50);

                entity.Property(e => e.UseInCondition).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ImportDSp>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FormId, e.ParamterName });

                entity.ToTable("_@Import_d_Sp");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ParamterName).HasMaxLength(50);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ImportM>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FormId });

                entity.ToTable("_@Import_m");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.StoredProcedures)
                    .HasColumnName("Stored_Procedures")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InjuredPerson>(entity =>
            {
                entity.ToTable("INJURED_PERSON");

                entity.Property(e => e.InjuredpersonId).HasColumnName("INJUREDPERSON_ID");

                entity.Property(e => e.Dateemployernotifiedofinjury)
                    .HasColumnName("DATEEMPLOYERNOTIFIEDOFINJURY")
                    .HasColumnType("datetime");

                entity.Property(e => e.Datehired)
                    .HasColumnName("DATEHIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("DATEOFBIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.Employeehomeoffice)
                    .HasColumnName("EMPLOYEEHOMEOFFICE")
                    .HasMaxLength(50);

                entity.Property(e => e.Employeesproject)
                    .HasColumnName("EMPLOYEESPROJECT")
                    .HasMaxLength(50);

                entity.Property(e => e.Employmentcategory)
                    .HasColumnName("EMPLOYMENTCATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Fullname)
                    .HasColumnName("FULLNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fullresidentialaddress)
                    .HasColumnName("FULLRESIDENTIALADDRESS")
                    .HasMaxLength(50);

                entity.Property(e => e.Harmedtheemployee)
                    .HasColumnName("HARMEDTHEEMPLOYEE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hasinjuredemployeereturnedtowork)
                    .HasColumnName("HASINJUREDEMPLOYEERETURNEDTOWORK")
                    .HasMaxLength(50);

                entity.Property(e => e.Howlonginpresentjob)
                    .HasColumnName("HOWLONGINPRESENTJOB")
                    .HasMaxLength(50);

                entity.Property(e => e.IncidentId)
                    .HasColumnName("Incident_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.Injurytype)
                    .HasColumnName("INJURYTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Natureofinjury)
                    .HasColumnName("NATUREOFINJURY")
                    .HasMaxLength(50);

                entity.Property(e => e.Occupation)
                    .HasColumnName("OCCUPATION")
                    .HasMaxLength(50);

                entity.Property(e => e.Partofbodyinjured)
                    .HasColumnName("PARTOFBODYINJURED")
                    .HasMaxLength(50);

                entity.Property(e => e.Persondoingjustbeforetheincident)
                    .HasColumnName("PERSONDOINGJUSTBEFORETHEINCIDENT")
                    .HasMaxLength(200);

                entity.Property(e => e.Sex)
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Treatmentgiven)
                    .HasColumnName("TREATMENTGIVEN")
                    .HasMaxLength(50);

                entity.Property(e => e.Whathappened)
                    .HasColumnName("WHATHAPPENED")
                    .HasMaxLength(200);

                entity.Property(e => e.Whereinjuriestreated)
                    .HasColumnName("WHEREINJURIESTREATED")
                    .HasMaxLength(50);

                entity.Property(e => e.Whoprovidedtreatment)
                    .HasColumnName("WHOPROVIDEDTREATMENT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InternalMeetingClass>(entity =>
            {
                entity.HasKey(e => e.ClassId);

                entity.ToTable("InternalMeeting_Class");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.ClassName).HasColumnName("Class_Name");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);
            });

            modelBuilder.Entity<InternalMeetingDirector>(entity =>
            {
                entity.HasKey(e => e.DirectorId);

                entity.ToTable("InternalMeeting_Director");

                entity.Property(e => e.DirectorId).HasColumnName("director_ID");

                entity.Property(e => e.DirectorName)
                    .HasColumnName("director_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<InternalMeetingDocs>(entity =>
            {
                entity.HasKey(e => e.DocId);

                entity.ToTable("InternalMeeting_Docs");

                entity.Property(e => e.DocId).HasColumnName("Doc_ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.DocAttached)
                    .HasColumnName("Doc_Attached")
                    .HasMaxLength(500);

                entity.Property(e => e.DocName)
                    .HasColumnName("Doc_name")
                    .HasMaxLength(500);

                entity.Property(e => e.FoulderId).HasColumnName("foulder_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.ProjId).HasColumnName("Proj_ID");

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);
            });

            modelBuilder.Entity<InternalMeetingProjects>(entity =>
            {
                entity.HasKey(e => e.ProjId);

                entity.ToTable("InternalMeeting_Projects");

                entity.Property(e => e.ProjId).HasColumnName("Proj_ID");

                entity.Property(e => e.ClassId).HasColumnName("Class_ID");

                entity.Property(e => e.DirectorId).HasColumnName("director_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.Inuser).HasMaxLength(50);

                entity.Property(e => e.Updateuser).HasColumnType("datetime");

                entity.Property(e => e.Upuser).HasMaxLength(50);

                entity.Property(e => e.UserEmail).HasMaxLength(100);
            });

            modelBuilder.Entity<ItContractArea>(entity =>
            {
                entity.HasKey(e => e.AreaId);

                entity.ToTable("IT_Contract_Area");

                entity.Property(e => e.AreaId).HasColumnName("Area_ID");

                entity.Property(e => e.AreaName)
                    .HasColumnName("Area_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItContractCostelement>(entity =>
            {
                entity.HasKey(e => e.CostId);

                entity.ToTable("IT_Contract_Costelement");

                entity.Property(e => e.CostId).HasColumnName("Cost_ID");

                entity.Property(e => e.CostElement).HasMaxLength(50);
            });

            modelBuilder.Entity<ItContractM>(entity =>
            {
                entity.HasKey(e => e.ContractNo);

                entity.ToTable("IT_Contract_M");

                entity.Property(e => e.Attachment).HasMaxLength(50);

                entity.Property(e => e.BudgetType).HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.Datefrom).HasColumnType("datetime");

                entity.Property(e => e.Dateto).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.Itarea)
                    .HasColumnName("ITArea")
                    .HasMaxLength(50);

                entity.Property(e => e.Paydistrip).HasColumnName("paydistrip");

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.Pono).HasMaxLength(100);

                entity.Property(e => e.Requestno).HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.Property(e => e.UpdDate)
                    .HasColumnName("Upd_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdUser)
                    .HasColumnName("Upd_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItContractPaymentType>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("IT_Contract_PaymentType");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.TypeName)
                    .HasColumnName("Type_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItContractSuppliers>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("IT_Contract_Suppliers");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_user")
                    .HasMaxLength(50);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_user")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierName)
                    .HasColumnName("Supplier_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Website).HasMaxLength(50);
            });

            modelBuilder.Entity<ItPoEmpApprove>(entity =>
            {
                entity.ToTable("IT_PO_EmpApprove");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Signature).HasColumnType("image");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItSysRepStatistics>(entity =>
            {
                entity.ToTable("IT_SysRep_Statistics");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("date");

                entity.Property(e => e.SysId).HasColumnName("Sys_ID");
            });

            modelBuilder.Entity<ItincidentCauseAnalysis>(entity =>
            {
                entity.HasKey(e => e.CaId);

                entity.ToTable("ITIncident_CauseAnalysis");

                entity.Property(e => e.CaId).HasColumnName("CA_ID");

                entity.Property(e => e.CaOwner)
                    .HasColumnName("CA_Owner")
                    .HasMaxLength(50);

                entity.Property(e => e.CaProcedures)
                    .HasColumnName("CA_Procedures")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.IncId).HasColumnName("Inc_ID");

                entity.HasOne(d => d.Inc)
                    .WithMany(p => p.ItincidentCauseAnalysis)
                    .HasForeignKey(d => d.IncId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ITIncident_CauseAnalysis_ITIncident_M");
            });

            modelBuilder.Entity<ItincidentImpactService>(entity =>
            {
                entity.HasKey(e => e.SerId)
                    .HasName("PK_Incident_ImpactService");

                entity.ToTable("ITIncident_ImpactService");

                entity.Property(e => e.SerId).HasColumnName("Ser_ID");

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.IncId).HasColumnName("Inc_ID");

                entity.Property(e => e.SerBusImpact)
                    .HasColumnName("Ser_BusImpact")
                    .HasMaxLength(1000);

                entity.Property(e => e.SerOwner)
                    .HasColumnName("Ser_Owner")
                    .HasMaxLength(50);

                entity.Property(e => e.SerServiceDesc)
                    .HasColumnName("Ser_ServiceDesc")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Inc)
                    .WithMany(p => p.ItincidentImpactService)
                    .HasForeignKey(d => d.IncId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ITIncident_ImpactService_ITIncident_M");
            });

            modelBuilder.Entity<ItincidentM>(entity =>
            {
                entity.HasKey(e => e.IncId)
                    .HasName("PK_Incident_M");

                entity.ToTable("ITIncident_M");

                entity.Property(e => e.IncId).HasColumnName("Inc_ID");

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.IncAnalysis)
                    .HasColumnName("Inc_Analysis")
                    .HasMaxLength(500);

                entity.Property(e => e.IncDateFrom)
                    .HasColumnName("Inc_DateFrom")
                    .HasColumnType("datetime");

                entity.Property(e => e.IncDateTo)
                    .HasColumnName("Inc_DateTo")
                    .HasColumnType("datetime");

                entity.Property(e => e.IncDesc)
                    .HasColumnName("Inc_Desc")
                    .HasMaxLength(500);

                entity.Property(e => e.IncDuration).HasColumnName("Inc_Duration");

                entity.Property(e => e.IncEffDate)
                    .HasColumnName("Inc_EffDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IncProToSolve)
                    .HasColumnName("Inc_ProToSolve")
                    .HasMaxLength(500);

                entity.Property(e => e.IncReporter)
                    .HasColumnName("Inc_Reporter")
                    .HasMaxLength(50);

                entity.Property(e => e.IncResponceTeam)
                    .HasColumnName("Inc_ResponceTeam")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ItincidentRecommend>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("ITIncident_Recommend");

                entity.Property(e => e.RecId).HasColumnName("Rec_ID");

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.IncId).HasColumnName("Inc_ID");

                entity.Property(e => e.RecAction)
                    .HasColumnName("Rec_Action")
                    .HasMaxLength(500);

                entity.Property(e => e.RecOwner)
                    .HasColumnName("Rec_Owner")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Inc)
                    .WithMany(p => p.ItincidentRecommend)
                    .HasForeignKey(d => d.IncId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ITIncident_Recommend_ITIncident_M");
            });

            modelBuilder.Entity<ItphysicalCategories>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_ITPhysical_Category");

                entity.ToTable("ITPhysical_Categories");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CategoryName)
                    .HasColumnName("Category_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItphysicalDSites>(entity =>
            {
                entity.HasKey(e => e.PhysicalSites);

                entity.ToTable("ITPhysical_D_Sites");

                entity.Property(e => e.PhysicalSites).HasColumnName("Physical_Sites");

                entity.Property(e => e.BarCode).HasMaxLength(50);

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Hdd)
                    .HasColumnName("HDD")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.Isps)
                    .HasColumnName("ISPs")
                    .HasMaxLength(50);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Processor).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.Qty).HasColumnName("QTY");

                entity.Property(e => e.Ram).HasMaxLength(50);

                entity.Property(e => e.RecivedDate).HasColumnType("datetime");

                entity.Property(e => e.SerialNo).HasMaxLength(500);

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.Property(e => e.TypesId).HasColumnName("Types_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItphysicalDUsers>(entity =>
            {
                entity.HasKey(e => e.PhysicalUsers);

                entity.ToTable("ITPhysical_D_Users");

                entity.Property(e => e.PhysicalUsers).HasColumnName("Physical_Users");

                entity.Property(e => e.BarCode).HasMaxLength(50);

                entity.Property(e => e.Brand).HasMaxLength(50);

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmpName)
                    .HasColumnName("Emp_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Hdd)
                    .HasColumnName("HDD")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.Processor).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.Ram).HasMaxLength(50);

                entity.Property(e => e.RecivedDate).HasColumnType("datetime");

                entity.Property(e => e.RefProjectId).HasColumnName("Ref_Project_ID");

                entity.Property(e => e.SerialNo).HasMaxLength(500);

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.Property(e => e.TypesId).HasColumnName("Types_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItphysicalHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId);

                entity.ToTable("ITPhysical_History");

                entity.Property(e => e.HistoryId).HasColumnName("History_ID");

                entity.Property(e => e.BarCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmpName)
                    .HasColumnName("Emp_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.TypesId).HasColumnName("Types_ID");

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItphysicalM>(entity =>
            {
                entity.HasKey(e => e.PhysicalId)
                    .HasName("PK_ITPhysical_M_1");

                entity.ToTable("ITPhysical_M");

                entity.Property(e => e.PhysicalId).HasColumnName("Physical_ID");

                entity.Property(e => e.CondName)
                    .HasColumnName("Cond_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryId).HasColumnName("Country_ID");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastEmailDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.Representative)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItphysicalTypes>(entity =>
            {
                entity.HasKey(e => e.TypesId);

                entity.ToTable("ITPhysical_Types");

                entity.Property(e => e.TypesId).HasColumnName("Types_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.TypesName)
                    .HasColumnName("Types_Name")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ItphysicalTypes)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ITPhysical_Types_ITPhysical_Category");
            });

            modelBuilder.Entity<ItphysicalUsers>(entity =>
            {
                entity.HasKey(e => e.UserHrcode);

                entity.ToTable("ITPhysical_Users");

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.MobileNo).HasMaxLength(50);

                entity.Property(e => e.UserEmail)
                    .HasColumnName("User_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .HasColumnName("User_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItsurveyCategory>(entity =>
            {
                entity.HasKey(e => e.QuestionCatId);

                entity.ToTable("ITSurvey_Category");

                entity.Property(e => e.QuestionCatId).HasColumnName("QuestionCat_ID");

                entity.Property(e => e.QuestionCatName)
                    .HasColumnName("QuestionCat_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItsurveyDetails>(entity =>
            {
                entity.ToTable("ITSurvey_Details");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmpId).HasColumnName("Emp_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.QuestId).HasColumnName("Quest_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.ItsurveyDetails)
                    .HasForeignKey(d => d.EmpId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ITSurvey_Details_ITSurvey_Master");
            });

            modelBuilder.Entity<ItsurveyMaster>(entity =>
            {
                entity.HasKey(e => e.EmpId);

                entity.ToTable("ITSurvey_Master");

                entity.Property(e => e.EmpId).HasColumnName("Emp_ID");

                entity.Property(e => e.Closed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmpName).HasMaxLength(100);

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.SurveyId).HasColumnName("Survey_ID");

                entity.Property(e => e.TitleId).HasColumnName("Title_ID");

                entity.Property(e => e.UserHrcode)
                    .IsRequired()
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ItsurveyQuestions>(entity =>
            {
                entity.HasKey(e => e.QuestId);

                entity.ToTable("ITSurvey_Questions");

                entity.Property(e => e.QuestId).HasColumnName("Quest_ID");

                entity.Property(e => e.QuesArname)
                    .HasColumnName("Ques_ARName")
                    .HasMaxLength(2000);

                entity.Property(e => e.QuesName)
                    .HasColumnName("Ques_Name")
                    .HasMaxLength(2000);

                entity.Property(e => e.QuestType)
                    .HasColumnName("Quest_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.QuestionCatId).HasColumnName("QuestionCat_ID");

                entity.Property(e => e.SurveyId).HasColumnName("Survey_ID");
            });

            modelBuilder.Entity<ItsurveySurveys>(entity =>
            {
                entity.HasKey(e => e.SurveyId);

                entity.ToTable("ITSurvey_Surveys");

                entity.Property(e => e.SurveyId).HasColumnName("Survey_ID");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.SurveyName)
                    .HasColumnName("Survey_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegalAffair>(entity =>
            {
                entity.HasKey(e => e.AffairNo);

                entity.ToTable("Legal_Affair");

                entity.Property(e => e.AffairNo)
                    .HasColumnName("Affair_no")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AffairTypeId).HasColumnName("Affair_type_ID");

                entity.Property(e => e.AffairYear)
                    .HasColumnName("Affair_year")
                    .HasMaxLength(50);

                entity.Property(e => e.Automatedno).HasMaxLength(50);

                entity.Property(e => e.CircleNo).HasMaxLength(50);

                entity.Property(e => e.CustAddress).HasMaxLength(100);

                entity.Property(e => e.CustAttachment)
                    .HasColumnName("Cust_Attachment")
                    .HasMaxLength(50);

                entity.Property(e => e.CustId).HasColumnName("Cust_ID");

                entity.Property(e => e.CustPaper)
                    .HasColumnName("Cust_Paper")
                    .HasMaxLength(500);

                entity.Property(e => e.EnAddress).HasMaxLength(50);

                entity.Property(e => e.EnAttachment)
                    .HasColumnName("En_Attachment")
                    .HasMaxLength(50);

                entity.Property(e => e.EnLawyer)
                    .HasColumnName("En_Lawyer")
                    .HasMaxLength(50);

                entity.Property(e => e.EnPaper)
                    .HasColumnName("En_Paper")
                    .HasMaxLength(500);

                entity.Property(e => e.EnemyName)
                    .HasColumnName("enemy_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Fileno).HasMaxLength(50);

                entity.Property(e => e.Floor).HasMaxLength(50);

                entity.Property(e => e.Gid).HasColumnName("GID");

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.LawyerId).HasColumnName("Lawyer_ID");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(500);

                entity.Property(e => e.Othercust)
                    .HasColumnName("othercust")
                    .HasMaxLength(50);

                entity.Property(e => e.Otherenemy)
                    .HasColumnName("otherenemy")
                    .HasMaxLength(50);

                entity.Property(e => e.RegDate)
                    .HasColumnName("Reg_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegalAffairType>(entity =>
            {
                entity.HasKey(e => e.AffairTypeId);

                entity.ToTable("Legal_AffairType");

                entity.Property(e => e.AffairTypeId).HasColumnName("Affair_type_ID");

                entity.Property(e => e.AffairName)
                    .HasColumnName("Affair_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegalCharges>(entity =>
            {
                entity.ToTable("Legal_Charges");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegalCustomers>(entity =>
            {
                entity.HasKey(e => e.CustId);

                entity.ToTable("Legal_Customers");

                entity.Property(e => e.CustId).HasColumnName("Cust_ID");

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.CustAddress)
                    .HasColumnName("Cust_address")
                    .HasMaxLength(500);

                entity.Property(e => e.CustMobile)
                    .HasColumnName("Cust_mobile")
                    .HasMaxLength(50);

                entity.Property(e => e.CustName)
                    .HasColumnName("Cust_name")
                    .HasMaxLength(500);

                entity.Property(e => e.CustNationaid)
                    .HasColumnName("Cust_nationaid")
                    .HasMaxLength(50);

                entity.Property(e => e.CustPhone)
                    .HasColumnName("Cust_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.CustTawkel)
                    .HasColumnName("Cust_tawkel")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.JobId).HasColumnName("Job_Id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(50);

                entity.Property(e => e.Realstate)
                    .HasColumnName("realstate")
                    .HasMaxLength(500);

                entity.Property(e => e.TawkelDate)
                    .HasColumnName("tawkel_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegalJudge>(entity =>
            {
                entity.HasKey(e => e.Gid);

                entity.ToTable("Legal_judge");

                entity.Property(e => e.Gid).HasColumnName("GID");

                entity.Property(e => e.GName)
                    .HasColumnName("G_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegalLawyers>(entity =>
            {
                entity.ToTable("Legal_Lawyers");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Cardno).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Tawkel)
                    .HasColumnName("tawkel")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegelExpertOffices>(entity =>
            {
                entity.ToTable("Legel_expertOffices");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegelExpertsession>(entity =>
            {
                entity.HasKey(e => e.SexpId);

                entity.ToTable("Legel_expertsession");

                entity.Property(e => e.SexpId).HasColumnName("SexpID");

                entity.Property(e => e.AffairNo)
                    .HasColumnName("Affair_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Decision).HasMaxLength(500);

                entity.Property(e => e.Expertmanname)
                    .HasColumnName("expertmanname")
                    .HasMaxLength(50);

                entity.Property(e => e.Expertno)
                    .HasColumnName("expertno")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpertofficeId).HasColumnName("expertofficeID");

                entity.Property(e => e.Floor).HasMaxLength(50);

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.NextSessionDate)
                    .HasColumnName("NextSession_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(50);

                entity.Property(e => e.Reasonofsession)
                    .HasColumnName("reasonofsession")
                    .HasMaxLength(50);

                entity.Property(e => e.SessionDate)
                    .HasColumnName("Session_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LegelSessions>(entity =>
            {
                entity.HasKey(e => e.Sid);

                entity.ToTable("Legel_Sessions");

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.AffairNo)
                    .HasColumnName("Affair_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Decision).HasMaxLength(500);

                entity.Property(e => e.Indate)
                    .HasColumnName("indate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inuser)
                    .HasColumnName("inuser")
                    .HasMaxLength(50);

                entity.Property(e => e.NextSessionDate)
                    .HasColumnName("NextSession_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(50);

                entity.Property(e => e.PreviousSessioDate)
                    .HasColumnName("PreviousSessio_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Requirement).HasMaxLength(500);

                entity.Property(e => e.SessionDate)
                    .HasColumnName("Session_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MailMessage>(entity =>
            {
                entity.HasKey(e => new { e.DbId1, e.MessageId });

                entity.ToTable("Mail_Message");

                entity.Property(e => e.DbId1)
                    .HasColumnName("DB_ID1")
                    .HasMaxLength(5);

                entity.Property(e => e.MessageId).HasColumnName("Message_ID");

                entity.Property(e => e.Body).HasMaxLength(4000);

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.LocalRplDate)
                    .HasColumnName("Local_RplDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.Property(e => e.Sender).HasMaxLength(4);

                entity.Property(e => e.SourceMessage)
                    .HasColumnName("Source_Message")
                    .HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(400);

                entity.Property(e => e.ToContacts)
                    .HasColumnName("To_Contacts")
                    .HasMaxLength(4000);

                entity.Property(e => e.ToDepartments)
                    .HasColumnName("To_Departments")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<MailReceiver>(entity =>
            {
                entity.HasKey(e => new { e.DbId1, e.MessageId, e.ReceiverId })
                    .HasName("PK_Mail_Receiver_1");

                entity.ToTable("Mail_Receiver");

                entity.Property(e => e.DbId1)
                    .HasColumnName("DB_ID1")
                    .HasMaxLength(5);

                entity.Property(e => e.MessageId).HasColumnName("Message_ID");

                entity.Property(e => e.ReceiverId).HasColumnName("Receiver_ID");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.CompleteDelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LocalRplDate)
                    .HasColumnName("Local_RplDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notify).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnName("Receiver_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReceiverDepart)
                    .HasColumnName("Receiver_Depart")
                    .HasMaxLength(10);

                entity.Property(e => e.ReceiverUser)
                    .HasColumnName("Receiver_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Reed).HasDefaultValueSql("((0))");

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.MailMessage)
                    .WithMany(p => p.MailReceiver)
                    .HasForeignKey(d => new { d.DbId1, d.MessageId })
                    .HasConstraintName("FK_Mail_Receiver_Mail_Message");
            });

            modelBuilder.Entity<MailSmtp>(entity =>
            {
                entity.HasKey(e => e.Smtp);

                entity.ToTable("Mail_SMTP");

                entity.Property(e => e.Smtp)
                    .HasColumnName("SMTP")
                    .ValueGeneratedNever();

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Port).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<MainAuthentication>(entity =>
            {
                entity.HasKey(e => e.AuthId);

                entity.ToTable("Main_Authentication");

                entity.Property(e => e.AuthId)
                    .HasColumnName("Auth_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuthInDate)
                    .HasColumnName("Auth_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuthInUser).HasColumnName("Auth_InUser");

                entity.Property(e => e.AuthUpDate)
                    .HasColumnName("Auth_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuthUpUser).HasColumnName("Auth_UpUser");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.SysId).HasColumnName("Sys_ID");
            });

            modelBuilder.Entity<MainAuthority>(entity =>
            {
                entity.HasKey(e => e.AuthId);

                entity.ToTable("Main_Authority");

                entity.Property(e => e.AuthId).HasColumnName("Auth_ID");

                entity.Property(e => e.AuthInDate)
                    .HasColumnName("Auth_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuthInUser).HasColumnName("Auth_InUser");

                entity.Property(e => e.AuthUpDate)
                    .HasColumnName("Auth_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuthUpUser).HasColumnName("Auth_UpUser");

                entity.Property(e => e.FunDelete).HasColumnName("Fun_Delete");

                entity.Property(e => e.FunNew).HasColumnName("Fun_New");

                entity.Property(e => e.FunRead).HasColumnName("Fun_Read");

                entity.Property(e => e.FunUpdate).HasColumnName("Fun_Update");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.PageId).HasColumnName("Page_ID");

                entity.Property(e => e.UserId).HasColumnName("User_ID");
            });

            modelBuilder.Entity<MainCostCenter>(entity =>
            {
                entity.HasKey(e => e.ProCode)
                    .HasName("PK_Check_Projects");

                entity.ToTable("Main_CostCenter");

                entity.Property(e => e.ProCode)
                    .HasColumnName("Pro_Code")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.ProName)
                    .HasColumnName("Pro_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });
            modelBuilder.Entity<MainGrades>(entity =>
            {
                entity.ToTable("Main_Grades");
            });
            
            modelBuilder.Entity<MainLkBank>(entity =>
            {
                entity.HasKey(e => e.BankId)
                    .HasName("PK_Check_Bank");

                entity.ToTable("Main_LK_Bank");

                entity.Property(e => e.BankId)
                    .HasColumnName("Bank_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.BankName)
                    .HasColumnName("Bank_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MainLkCurrency>(entity =>
            {
                entity.HasKey(e => e.CurrencyId)
                    .HasName("PK_Check_Currency");

                entity.ToTable("Main_LK_Currency");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CurrencyName)
                    .HasColumnName("Currency_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MainLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Main_Log");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.ActionItem)
                    .HasColumnName("Action_Item")
                    .HasMaxLength(50);

                entity.Property(e => e.ActionState)
                    .HasColumnName("Action_State")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PageName)
                    .HasColumnName("Page_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SysName)
                    .HasColumnName("Sys_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MainPages>(entity =>
            {
                entity.HasKey(e => e.PageId)
                    .HasName("PK_ST_Pages");

                entity.ToTable("Main_Pages");

                entity.Property(e => e.PageId).HasColumnName("Page_ID");

                entity.Property(e => e.PageArDesc)
                    .HasColumnName("Page_AR_Desc")
                    .HasMaxLength(500);

                entity.Property(e => e.PageArTitle)
                    .HasColumnName("Page_AR_Title")
                    .HasMaxLength(50);

                entity.Property(e => e.PageEnDesc)
                    .HasColumnName("Page_EN_Desc")
                    .HasMaxLength(500);

                entity.Property(e => e.PageEnTitle)
                    .HasColumnName("Page_EN_Title")
                    .HasMaxLength(50);

                entity.Property(e => e.PageName)
                    .HasColumnName("Page_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SysId).HasColumnName("Sys_ID");
            });

            modelBuilder.Entity<MainProtect>(entity =>
            {
                entity.HasKey(e => e.ProtectId);

                entity.ToTable("Main_Protect");

                entity.Property(e => e.ProtectId).HasColumnName("Protect_ID");

                entity.Property(e => e.ProtectComputer)
                    .HasColumnName("Protect_Computer")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("User_ID");
            });

            modelBuilder.Entity<MainProtectItems>(entity =>
            {
                entity.HasKey(e => e.ProtectId)
                    .HasName("PK_ST_Protect");

                entity.ToTable("Main_Protect_Items");

                entity.Property(e => e.ProtectId).HasColumnName("Protect_ID");

                entity.Property(e => e.PageId).HasColumnName("Page_ID");

                entity.Property(e => e.ProtectItem).HasColumnName("Protect_Item");

                entity.Property(e => e.ProtectItem1).HasColumnName("Protect_Item1");

                entity.Property(e => e.ProtectItem2).HasColumnName("Protect_Item2");

                entity.Property(e => e.SysId).HasColumnName("Sys_ID");

                entity.Property(e => e.UserId).HasColumnName("User_ID");
            });

            modelBuilder.Entity<MainSysGroup>(entity =>
            {
                entity.HasKey(e => e.SysGroupId);

                entity.ToTable("Main_SysGroup");

                entity.Property(e => e.SysGroupId)
                    .HasColumnName("SysGroup_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SysGroupName)
                    .HasColumnName("SysGroup_Name")
                    .HasMaxLength(50);
            });
            
            modelBuilder.Entity<MainSystems>(entity =>
            {
                entity.HasKey(e => e.SysId)
                    .HasName("PK_Systems");

                entity.ToTable("Main_Systems");

                entity.Property(e => e.SysId)
                    .HasColumnName("Sys_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SysArname)
                    .HasColumnName("Sys_ARName")
                    .HasMaxLength(50);

                entity.Property(e => e.SysGroupId).HasColumnName("SysGroup_ID");

                entity.Property(e => e.SysIcon)
                    .HasColumnName("Sys_Icon")
                    .HasMaxLength(50);

                entity.Property(e => e.SysName)
                    .HasColumnName("Sys_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MainUsers>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK_Users");

                entity.ToTable("Main_Users");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.UserGender).HasColumnName("User_Gender");

                entity.Property(e => e.UserImg)
                    .HasColumnName("User_Img")
                    .HasMaxLength(50);

                entity.Property(e => e.UserInDate)
                    .HasColumnName("User_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserInUser).HasColumnName("User_InUser");

                entity.Property(e => e.UserMail)
                    .HasColumnName("User_Mail")
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .HasColumnName("User_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.UserPassword)
                    .HasColumnName("User_Password")
                    .HasMaxLength(50);

                entity.Property(e => e.UserPhon)
                    .HasColumnName("User_Phon")
                    .HasMaxLength(50);

                entity.Property(e => e.UserUpDate)
                    .HasColumnName("User_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserUpUser).HasColumnName("User_UpUser");
            });

            modelBuilder.Entity<MainUsersGroups>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("PK_Main_Groups");

                entity.ToTable("Main_UsersGroups");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupInDate)
                    .HasColumnName("Group_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.GroupInUser).HasColumnName("Group_InUser");

                entity.Property(e => e.GroupName)
                    .HasColumnName("Group_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupPhoto)
                    .HasColumnName("Group_Photo")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupUpDate)
                    .HasColumnName("Group_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.GroupUpUser).HasColumnName("Group_UpUser");
            });

            modelBuilder.Entity<ManPowerAssignTitles>(entity =>
            {
                entity.HasKey(e => e.AsId);

                entity.ToTable("ManPower_AssignTitles");

                entity.Property(e => e.AsId).HasColumnName("As_ID");

                entity.Property(e => e.AsEndDate)
                    .HasColumnName("As_EndDate")
                    .HasColumnType("date");

                entity.Property(e => e.AsInDate)
                    .HasColumnName("As_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AsInUser)
                    .HasColumnName("As_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.AsStartDate)
                    .HasColumnName("As_StartDate")
                    .HasColumnType("date");

                entity.Property(e => e.AsUpDate)
                    .HasColumnName("As_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.AsUpUser)
                    .HasColumnName("As_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.SapId).HasColumnName("SAP_ID");
            });

            modelBuilder.Entity<ManPowerBudget>(entity =>
            {
                entity.HasKey(e => e.BgId);

                entity.ToTable("ManPower_Budget");

                entity.Property(e => e.BgId).HasColumnName("Bg_ID");

                entity.Property(e => e.AsId).HasColumnName("As_ID");

                entity.Property(e => e.BgHeadCount).HasColumnName("Bg_HeadCount");

                entity.Property(e => e.BgInDate)
                    .HasColumnName("Bg_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BgInUser)
                    .HasColumnName("Bg_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.BgMonth)
                    .HasColumnName("Bg_Month")
                    .HasColumnType("date");

                entity.Property(e => e.BgUpDate)
                    .HasColumnName("Bg_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BgUpUser)
                    .HasColumnName("Bg_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.SapId).HasColumnName("SAP_ID");
            });

            modelBuilder.Entity<ManPowerProjectDateLine>(entity =>
            {
                entity.HasKey(e => e.DlId);

                entity.ToTable("ManPower_ProjectDateLine");

                entity.Property(e => e.DlId).HasColumnName("DL_ID");

                entity.Property(e => e.DlBudgetAmount).HasColumnName("DL_Budget_Amount");

                entity.Property(e => e.DlInDate)
                    .HasColumnName("DL_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DlInUser)
                    .HasColumnName("DL_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.DlMonth)
                    .HasColumnName("DL_Month")
                    .HasColumnType("date");

                entity.Property(e => e.DlUpDate)
                    .HasColumnName("DL_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DlUpUser)
                    .HasColumnName("DL_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            });

            modelBuilder.Entity<MappingSheet>(entity =>
            {
                entity.HasKey(e => e.VendorId);

                entity.Property(e => e.VendorId)
                    .HasColumnName("Vendor_ID")
                    .HasMaxLength(200)
                    .ValueGeneratedNever();

                entity.Property(e => e.HaHcoCode).HasColumnName("HaHCo_Code");

                entity.Property(e => e.NameA).HasMaxLength(500);

                entity.Property(e => e.NameE).HasMaxLength(500);

                entity.Property(e => e.SapId)
                    .HasColumnName("Sap_ID")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<MaterialRequestM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo });

                entity.ToTable("Material_Request_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.BudgetAtCompletion).HasColumnName("Budget_At_Completion");

                entity.Property(e => e.BudgetToDate).HasColumnName("Budget_To_Date");

                entity.Property(e => e.BuyerId)
                    .HasColumnName("Buyer_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CheckOk).HasColumnName("Check_Ok");

                entity.Property(e => e.ControlsManagerComment)
                    .HasColumnName("Controls_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ControlsManagerDate)
                    .HasColumnName("Controls_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ControlsManagerUserId)
                    .HasColumnName("Controls_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.ExVariance).HasColumnName("EX_Variance");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpendedToDate).HasColumnName("Expended_To_Date");

                entity.Property(e => e.MrDate)
                    .HasColumnName("MR_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrNo)
                    .HasColumnName("MR_No")
                    .HasMaxLength(20);

                entity.Property(e => e.OperationDirectorComment)
                    .HasColumnName("Operation_Director_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.OperationDirectorDate)
                    .HasColumnName("Operation_Director_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OperationDirectorUserId)
                    .HasColumnName("Operation_Director_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.PurchasingDepartmentManagerComment)
                    .HasColumnName("Purchasing_Department_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.PurchasingDepartmentManagerDate)
                    .HasColumnName("Purchasing_Department_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PurchasingDepartmentManagerUserId)
                    .HasColumnName("Purchasing_Department_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.StockControlManagerComment)
                    .HasColumnName("Stock_Control_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.StockControlManagerDate)
                    .HasColumnName("Stock_Control_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockControlManagerUserId)
                    .HasColumnName("Stock_Control_Manager_User_ID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("_@Menu");

                entity.Property(e => e.MenuId)
                    .HasColumnName("Menu_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.MenuName)
                    .HasColumnName("Menu_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.MenuNameEn)
                    .HasColumnName("Menu_Name_En")
                    .HasMaxLength(200);

                entity.Property(e => e.ParentId)
                    .HasColumnName("Parent_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Migrations>(entity =>
            {
                entity.ToTable("migrations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Batch).HasColumnName("batch");

                entity.Property(e => e.Migration)
                    .IsRequired()
                    .HasColumnName("migration")
                    .HasMaxLength(510);
            });

            modelBuilder.Entity<MobAreas>(entity =>
            {
                entity.HasKey(e => e.ArId)
                    .HasName("PK_Mob_Ereas");

                entity.ToTable("Mob_Areas");

                entity.Property(e => e.ArId).HasColumnName("Ar_ID");

                entity.Property(e => e.ArFile)
                    .HasColumnName("Ar_File")
                    .HasMaxLength(50);

                entity.Property(e => e.ArName)
                    .HasColumnName("Ar_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ClId)
                    .IsRequired()
                    .HasColumnName("CL_ID")
                    .HasMaxLength(1);

                entity.Property(e => e.HaveBlocks).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MobBlocks>(entity =>
            {
                entity.HasKey(e => e.BlId);

                entity.ToTable("Mob_Blocks");

                entity.Property(e => e.BlId).HasColumnName("Bl_ID");

                entity.Property(e => e.ArId).HasColumnName("Ar_ID");

                entity.Property(e => e.BlName)
                    .HasColumnName("Bl_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MobClass>(entity =>
            {
                entity.HasKey(e => e.ClId)
                    .HasName("PK_Mob_ProjectTypes");

                entity.ToTable("Mob_Class");

                entity.Property(e => e.ClId)
                    .HasColumnName("CL_ID")
                    .HasMaxLength(1)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClFile)
                    .HasColumnName("CL_File")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MobProjectDet>(entity =>
            {
                entity.HasKey(e => e.DetAreaId);

                entity.ToTable("Mob_Project_Det");

                entity.Property(e => e.DetAreaId).HasColumnName("Det_AreaID");

                entity.Property(e => e.ArId).HasColumnName("Ar_ID");

                entity.Property(e => e.DetAreaClass)
                    .HasColumnName("Det_AreaClass")
                    .HasMaxLength(1);

                entity.Property(e => e.DetAreaFile)
                    .HasColumnName("Det_AreaFile")
                    .HasMaxLength(50);

                entity.Property(e => e.DetInDate)
                    .HasColumnName("Det_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetInUser)
                    .HasColumnName("Det_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.DetUpDate)
                    .HasColumnName("Det_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DetUpUser)
                    .HasColumnName("Det_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.MobId).HasColumnName("Mob_ID");

                entity.HasOne(d => d.Mob)
                    .WithMany(p => p.MobProjectDet)
                    .HasForeignKey(d => d.MobId)
                    .HasConstraintName("FK_Mob_Project_Det_Mob_Project_M");
            });

            modelBuilder.Entity<MobProjectDetBlocks>(entity =>
            {
                entity.HasKey(e => e.DetBlockId);

                entity.ToTable("Mob_Project_DetBlocks");

                entity.Property(e => e.DetBlockId).HasColumnName("Det_BlockID");

                entity.Property(e => e.BlId).HasColumnName("Bl_ID");

                entity.Property(e => e.DetAreaId).HasColumnName("Det_AreaID");

                entity.Property(e => e.DetBlockClass)
                    .HasColumnName("Det_BlockClass")
                    .HasMaxLength(1);

                entity.Property(e => e.DetInDate)
                    .HasColumnName("Det_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetInUser)
                    .HasColumnName("Det_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.DetUpDate)
                    .HasColumnName("Det_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DetUpUser)
                    .HasColumnName("Det_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.SuggClass)
                    .HasColumnName("Sugg_Class")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<MobProjectM>(entity =>
            {
                entity.HasKey(e => e.MobId)
                    .HasName("PK_Mob_Mobilization");

                entity.ToTable("Mob_Project_M");

                entity.Property(e => e.MobId).HasColumnName("Mob_ID");

                entity.Property(e => e.ProClass)
                    .HasColumnName("Pro_Class")
                    .HasMaxLength(1);

                entity.Property(e => e.ProDefinitionCode)
                    .HasColumnName("Pro_DefinitionCode")
                    .HasMaxLength(50);

                entity.Property(e => e.ProFile)
                    .HasColumnName("Pro_File")
                    .HasMaxLength(50);

                entity.Property(e => e.ProInDate)
                    .HasColumnName("Pro_InDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProInUser)
                    .HasColumnName("Pro_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ProUpDate)
                    .HasColumnName("Pro_UpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProUpUser)
                    .HasColumnName("Pro_UpUser")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasColumnName("Project_Code");
            });

            modelBuilder.Entity<MsgError>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("_@MsgError");

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.Arabic).HasMaxLength(4000);

                entity.Property(e => e.English).HasMaxLength(4000);
            });

            modelBuilder.Entity<NegativeAllow>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName });

                entity.ToTable("_@NegativeAllow");

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.FieldName).HasMaxLength(200);
            });

            modelBuilder.Entity<NewsEnferadCategory>(entity =>
            {
                entity.HasKey(e => e.NfId);

                entity.ToTable("News_Enferad_Category");

                entity.Property(e => e.NfId).HasColumnName("NF_ID");

                entity.Property(e => e.NfCat1).HasColumnName("NF_Cat1");

                entity.Property(e => e.NfCat2).HasColumnName("NF_Cat2");

                entity.Property(e => e.NfCat3).HasColumnName("NF_Cat3");

                entity.Property(e => e.NfCat4).HasColumnName("NF_Cat4");
            });

            modelBuilder.Entity<NonReport>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("_@NonReport");

                entity.Property(e => e.FieldName)
                    .HasColumnName("Field_Name")
                    .HasMaxLength(220);

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(220);
            });

            modelBuilder.Entity<PaySlip>(entity =>
            {
                entity.Property(e => e.PaySlipId).HasColumnName("PaySlip_ID");

                entity.Property(e => e.April).HasMaxLength(50);

                entity.Property(e => e.August).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(200);

                entity.Property(e => e.December).HasMaxLength(50);

                entity.Property(e => e.February).HasMaxLength(50);

                entity.Property(e => e.January).HasMaxLength(50);

                entity.Property(e => e.July).HasMaxLength(50);

                entity.Property(e => e.June).HasMaxLength(50);

                entity.Property(e => e.March).HasMaxLength(50);

                entity.Property(e => e.May).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.November).HasMaxLength(50);

                entity.Property(e => e.October).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.September).HasMaxLength(50);

                entity.Property(e => e.SignatureFile).HasMaxLength(50);

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Permissions>(entity =>
            {
                entity.ToTable("permissions");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuardName)
                    .IsRequired()
                    .HasColumnName("guard_name")
                    .HasMaxLength(510);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<PrintDocGroupFilters>(entity =>
            {
                entity.HasKey(e => new { e.FormId, e.FilterField });

                entity.ToTable("_@PrintDocGroup_Filters");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FilterField)
                    .HasColumnName("Filter_Field")
                    .HasMaxLength(100);

                entity.Property(e => e.FilterNameAr)
                    .HasColumnName("Filter_Name_Ar")
                    .HasMaxLength(100);

                entity.Property(e => e.FilterNameEn)
                    .HasColumnName("Filter_Name_En")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.PrintDocGroupFilters)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__@PrintDocGroup_Filters_C_Form");
            });

            modelBuilder.Entity<PrintDocGroupGroups>(entity =>
            {
                entity.HasKey(e => new { e.FormId, e.GroupField });

                entity.ToTable("_@PrintDocGroup_Groups");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupField)
                    .HasColumnName("Group_Field")
                    .HasMaxLength(100);

                entity.Property(e => e.GroupNameAr)
                    .HasColumnName("Group_Name_Ar")
                    .HasMaxLength(100);

                entity.Property(e => e.GroupNameEn)
                    .HasColumnName("Group_Name_En")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Form)
                    .WithMany(p => p.PrintDocGroupGroups)
                    .HasForeignKey(d => d.FormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__@PrintDocGroup_Groups_C_Form");
            });

            modelBuilder.Entity<ProcStepsWithCompleted>(entity =>
            {
                entity.HasKey(e => e.StepNo);

                entity.ToTable("PROC_Steps_With_Completed");

                entity.Property(e => e.StepNo)
                    .HasColumnName("Step_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.StepName)
                    .HasColumnName("Step_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ProjTptItemsRelations>(entity =>
            {
                entity.HasKey(e => e.AccId);

                entity.ToTable("PROJ_TPT_Items_Relations");

                entity.Property(e => e.AccId)
                    .HasColumnName("Acc_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<PublicMobilesData>(entity =>
            {
                entity.HasKey(e => e.MobId)
                    .HasName("PK_Public_Mobiles");

                entity.ToTable("Public_MobilesData");

                entity.Property(e => e.MobId).HasColumnName("Mob_ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.MobDataNo)
                    .HasColumnName("Mob_DataNo")
                    .HasMaxLength(50);

                entity.Property(e => e.MobDataProvider)
                    .HasColumnName("Mob_DataProvider")
                    .HasMaxLength(10);

                entity.Property(e => e.MobMobNo)
                    .HasColumnName("Mob_MobNo")
                    .HasMaxLength(50);

                entity.Property(e => e.MobMobProvider)
                    .HasColumnName("Mob_MobProvider")
                    .HasMaxLength(10);

                entity.Property(e => e.MobNationalId)
                    .HasColumnName("Mob_NationalID")
                    .HasMaxLength(50);

                entity.Property(e => e.PersonalMob1).HasMaxLength(50);

                entity.Property(e => e.TitleId)
                    .HasColumnName("TitleID")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<PurSupplyOrderD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.SupplierId, e.ItemNo });

                entity.ToTable("Pur_Supply_Order_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(200);

                entity.HasOne(d => d.PurSupplyOrderM)
                    .WithMany(p => p.PurSupplyOrderD)
                    .HasForeignKey(d => new { d.DocNo, d.SupplierId })
                    .HasConstraintName("FK_Pur_Supply_Order_d_Pur_Supply_Order_m");
            });

            modelBuilder.Entity<PurSupplyOrderM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.SupplierId });

                entity.ToTable("Pur_Supply_Order_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Posting).HasMaxLength(500);

                entity.Property(e => e.PostingNo)
                    .HasColumnName("Posting_No")
                    .HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<PurTitem>(entity =>
            {
                entity.HasKey(e => e.ItemNo);

                entity.ToTable("PUR_TItem");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(1000);
            });

            modelBuilder.Entity<PurTlocalPurchaseOrderD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("PUR_TLocal_Purchase_Order_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AllowedBudgetToDate).HasColumnName("Allowed_Budget_To_Date");

                entity.Property(e => e.BudgetQty).HasColumnName("Budget_Qty");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IssuedForOthers).HasColumnName("Issued_For_Others");

                entity.Property(e => e.QtyRef).HasColumnName("Qty_Ref");

                entity.Property(e => e.Rcved).HasColumnName("RCVED");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");
            });

            modelBuilder.Entity<PurTlocalPurchaseOrderM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("PUR_TLocal_Purchase_Order_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasMaxLength(500);

                entity.Property(e => e.MrReceivedDate)
                    .HasColumnName("MR_Received_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Payment).HasMaxLength(500);

                entity.Property(e => e.PoDate)
                    .HasColumnName("PO_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PoDocNo)
                    .HasColumnName("PO_DOC_No")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxAdd).HasColumnName("Tax_Add");

                entity.Property(e => e.TaxDec).HasColumnName("Tax_Dec");

                entity.Property(e => e.TaxDecPer).HasColumnName("Tax_Dec_Per");

                entity.Property(e => e.TxAddPerc).HasColumnName("Tx_Add_Perc");
            });

            modelBuilder.Entity<PurTmrcontrolsReviewD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ExpType });

                entity.ToTable("PUR_TMRControls_Review_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.BudgetToCompletion).HasColumnName("Budget_To_Completion");

                entity.Property(e => e.BudgetToCompletionVariance).HasColumnName("Budget_To_Completion_Variance");

                entity.Property(e => e.BudgetToDate).HasColumnName("Budget_To_Date");

                entity.Property(e => e.BudgetToDateVariance).HasColumnName("Budget_To_Date_Variance");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ExpendedToDate).HasColumnName("Expended_To_Date");

                entity.HasOne(d => d.PurTmrcontrolsReviewM)
                    .WithMany(p => p.PurTmrcontrolsReviewD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_PUR_TMRControls_Review_d_PUR_TMRControls_Review_m");
            });

            modelBuilder.Entity<PurTmrcontrolsReviewM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("PUR_TMRControls_Review_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.MrReceivedDate)
                    .HasColumnName("MR_Received_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<PurTproject>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("PUR_TProject");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AdPaymentIdManager)
                    .HasColumnName("AD_Payment_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AdPaymentIdTeam)
                    .HasColumnName("AD_Payment_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AwardedDate)
                    .HasColumnName("Awarded_Date")
                    .HasColumnType("date");

                entity.Property(e => e.ClientId)
                    .HasColumnName("Client_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ConsultantId)
                    .HasColumnName("Consultant_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactTypeTypeId)
                    .HasColumnName("ContactType_Type_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ContractAdministrator)
                    .HasColumnName("Contract_Administrator")
                    .HasMaxLength(4);

                entity.Property(e => e.ControlsEngineer).HasMaxLength(4);

                entity.Property(e => e.ControlsManager).HasMaxLength(4);

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.DbId1)
                    .HasColumnName("DB_ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.EstimatedGrossMargin).HasColumnName("Estimated_Gross_Margin");

                entity.Property(e => e.FinishDate).HasColumnType("datetime");

                entity.Property(e => e.FirstInvoiceMonth).HasColumnName("FirstInvoice_Month");

                entity.Property(e => e.FirstInvoiceYear).HasColumnName("FirstInvoice_Year");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JvPerc).HasColumnName("JV_Perc");

                entity.Property(e => e.LastInvoiceMonth).HasColumnName("LastInvoice_Month");

                entity.Property(e => e.LastInvoiceYear).HasColumnName("LastInvoice_Year");

                entity.Property(e => e.Levl).HasColumnName("levl");

                entity.Property(e => e.Main).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Months).HasMaxLength(50);

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.Property(e => e.ParentId)
                    .HasColumnName("Parent_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.PartnershipTypeId)
                    .HasColumnName("Partnership_Type_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentsondeliveryIdManager)
                    .HasColumnName("Paymentsondelivery_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentsondeliveryIdTeam)
                    .HasColumnName("Paymentsondelivery_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanningControlsManager)
                    .HasColumnName("Planning_Controls_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcAndcontrolManager).HasMaxLength(4);

                entity.Property(e => e.ProcManager)
                    .HasColumnName("Proc_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectAccountId)
                    .HasColumnName("Project_Account_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectDirector)
                    .HasColumnName("Project_Director")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectManager)
                    .HasColumnName("Project_Manager")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RetentionIdManager)
                    .HasColumnName("Retention_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionIdTeam)
                    .HasColumnName("Retention_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskEngineer)
                    .HasColumnName("Risk_Engineer")
                    .HasMaxLength(4);

                entity.Property(e => e.SeniorControlsManager).HasMaxLength(4);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.UserRiskManager)
                    .HasColumnName("User_Risk_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.Weeks).HasMaxLength(50);
            });

            modelBuilder.Entity<PurTsupplier>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("Pur_TSupplier");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.CommercialRegistry)
                    .HasColumnName("Commercial_Registry")
                    .HasMaxLength(500);

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Direction).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FolderNum).HasMaxLength(500);

                entity.Property(e => e.GovernorateId).HasColumnName("Governorate_ID");

                entity.Property(e => e.Idnum)
                    .HasColumnName("IDNum")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Prequalification).HasMaxLength(500);

                entity.Property(e => e.RegionId).HasColumnName("Region_ID");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasColumnName("Supplier_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.TaxesCard)
                    .HasColumnName("Taxes_Card")
                    .HasMaxLength(500);

                entity.Property(e => e.TechnicalSpecsData)
                    .HasColumnName("Technical_Specs_Data")
                    .HasMaxLength(500);

                entity.Property(e => e.VendorId)
                    .HasColumnName("Vendor_ID")
                    .HasMaxLength(200);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<PurchasingAuthority>(entity =>
            {
                entity.HasKey(e => e.AuthId);

                entity.ToTable("Purchasing_Authority");

                entity.Property(e => e.AuthId).HasColumnName("Auth_ID");

                entity.Property(e => e.AllowDepartment)
                    .HasColumnName("Allow_Department")
                    .HasMaxLength(20);

                entity.Property(e => e.AllowEmpEmail)
                    .HasColumnName("Allow_Emp_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.AuthType)
                    .HasColumnName("Auth_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.AuthTypeCode)
                    .HasColumnName("Auth_Type_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Comment).HasMaxLength(100);
            });

            modelBuilder.Entity<PurchasingOrderD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo })
                    .HasName("PK_Purchasing_Order_d_1");

                entity.ToTable("Purchasing_Order_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.Discount).HasMaxLength(20);

                entity.Property(e => e.ProdName)
                    .HasColumnName("Prod_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Quantity).HasMaxLength(20);

                entity.Property(e => e.SalesTax)
                    .HasColumnName("Sales_Tax")
                    .HasMaxLength(20);

                entity.Property(e => e.TotalPrice)
                    .HasColumnName("Total_Price")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.UnitPrice)
                    .HasColumnName("Unit_Price")
                    .HasMaxLength(20);

                entity.Property(e => e.UnitTotal)
                    .HasColumnName("Unit_Total")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<PurchasingOrderItemsD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo, e.ItemNo });

                entity.ToTable("Purchasing_Order_Items_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AllowedBudgetTodate)
                    .HasColumnName("Allowed_Budget_Todate")
                    .HasMaxLength(20);

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.BudgetQty)
                    .HasColumnName("Budget_QTY")
                    .HasMaxLength(20);

                entity.Property(e => e.IssuedForOthers)
                    .HasColumnName("Issued_For_Others")
                    .HasMaxLength(20);

                entity.Property(e => e.QtyRef)
                    .HasColumnName("Qty_Ref")
                    .HasMaxLength(20);

                entity.Property(e => e.QtyRequested)
                    .HasColumnName("QTY_Requested")
                    .HasMaxLength(20);

                entity.Property(e => e.Rcvd)
                    .HasColumnName("RCVD")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Variance).HasMaxLength(20);
            });

            modelBuilder.Entity<PurchasingOrderM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo });

                entity.ToTable("Purchasing_Order_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.BudgetForMr).HasColumnName("Budget_For_MR");

                entity.Property(e => e.CachOrChq).HasColumnName("Cach_or_CHQ");

                entity.Property(e => e.ChqNo)
                    .HasColumnName("CHQ_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.CompanyAddress)
                    .HasColumnName("Company_Address")
                    .HasMaxLength(150);

                entity.Property(e => e.CompanyName)
                    .HasColumnName("Company_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ComparisonSheetIsAttached).HasColumnName("Comparison_Sheet_is_attached");

                entity.Property(e => e.ControlsAnalystUnitHeadComment)
                    .HasColumnName("Controls_Analyst_Unit_Head_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ControlsAnalystUnitHeadDate)
                    .HasColumnName("Controls_Analyst_Unit_Head_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ControlsAnalystUnitHeadUserId)
                    .HasColumnName("Controls_Analyst_Unit_Head_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CopyToControlAnalyst).HasColumnName("Copy_To_Control_Analyst");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeliveryPeriod)
                    .HasColumnName("Delivery_Period")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpendedMrCost).HasColumnName("Expended_MR_Cost");

                entity.Property(e => e.IstheRequiredMaterialIncluded).HasColumnName("Isthe_Required_Material_Included");

                entity.Property(e => e.MrNo)
                    .HasColumnName("MR_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OffersAreAttached).HasColumnName("Offers_are_Attached");

                entity.Property(e => e.OperationDirector).HasColumnName("Operation_Director");

                entity.Property(e => e.PaymentPercent)
                    .HasColumnName("Payment_Percent")
                    .HasMaxLength(20);

                entity.Property(e => e.PricesAreLogic).HasColumnName("Prices_Are_Logic");

                entity.Property(e => e.ProcAndControlsManagerComment)
                    .HasColumnName("Proc_And_ControlsManager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ProcAndControlsManagerDate)
                    .HasColumnName("Proc_And_ControlsManager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcAndControlsManagerUserId)
                    .HasColumnName("Proc_And_ControlsManager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcManagerComment)
                    .HasColumnName("Proc_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ProcManagerDate)
                    .HasColumnName("Proc_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManagerUserId)
                    .HasColumnName("Proc_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.PurchasOrderNo)
                    .IsRequired()
                    .HasColumnName("Purchas_Order_No")
                    .HasMaxLength(20);

                entity.Property(e => e.SensiorControlsManagerComment)
                    .HasColumnName("SensiorControls_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.SensiorControlsManagerDate)
                    .HasColumnName("SensiorControls_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SensiorControlsManagerUserId)
                    .HasColumnName("SensiorControls_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.SupportDiv).HasColumnName("Support_Div");

                entity.Property(e => e.UpdateOnAreaTask).HasColumnName("Update_On_Area_Task");

                entity.Property(e => e.WhyIsRequired)
                    .HasColumnName("Why_is_Required")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<PurchasingOrderResourceD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo, e.ItemNo, e.ResourceId });

                entity.ToTable("Purchasing_Order_Resource_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ResourceId)
                    .HasColumnName("Resource_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequiredOnSiteDate)
                    .HasColumnName("Required_On_Site_Date")
                    .HasMaxLength(20);

                entity.Property(e => e._3monthsLookAhead)
                    .HasColumnName("_3Months_Look_Ahead")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<QualityAsmeForms>(entity =>
            {
                entity.HasKey(e => e.FrmId);

                entity.ToTable("QualityASME_Forms");

                entity.Property(e => e.FrmId).HasColumnName("Frm_ID");

                entity.Property(e => e.FrmCode)
                    .HasColumnName("Frm_Code")
                    .HasMaxLength(100);

                entity.Property(e => e.FrmDate)
                    .HasColumnName("Frm_Date")
                    .HasColumnType("date");

                entity.Property(e => e.FrmFile)
                    .HasColumnName("Frm_File")
                    .HasMaxLength(200);

                entity.Property(e => e.FrmName)
                    .HasColumnName("Frm_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProId).HasColumnName("Pro_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QualityAsmeProcedure>(entity =>
            {
                entity.HasKey(e => e.ProId);

                entity.ToTable("QualityASME_Procedure");

                entity.Property(e => e.ProId).HasColumnName("Pro_ID");

                entity.Property(e => e.DepId).HasColumnName("Dep_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProCode)
                    .HasColumnName("Pro_Code")
                    .HasMaxLength(100);

                entity.Property(e => e.ProDate)
                    .HasColumnName("Pro_Date")
                    .HasColumnType("date");

                entity.Property(e => e.ProFile)
                    .HasColumnName("Pro_File")
                    .HasMaxLength(200);

                entity.Property(e => e.ProName)
                    .HasColumnName("Pro_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QualityIsoDepartment>(entity =>
            {
                entity.HasKey(e => e.DepId)
                    .HasName("PK_QualityISO_Procedures");

                entity.ToTable("QualityISO_Department");

                entity.Property(e => e.DepId).HasColumnName("Dep_ID");

                entity.Property(e => e.DepName)
                    .HasColumnName("Dep_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QualityIsoForms>(entity =>
            {
                entity.HasKey(e => e.FrmId);

                entity.ToTable("QualityISO_Forms");

                entity.Property(e => e.FrmId).HasColumnName("Frm_ID");

                entity.Property(e => e.FrmCode)
                    .HasColumnName("Frm_Code")
                    .HasMaxLength(100);

                entity.Property(e => e.FrmDate)
                    .HasColumnName("Frm_Date")
                    .HasColumnType("date");

                entity.Property(e => e.FrmFile)
                    .HasColumnName("Frm_File")
                    .HasMaxLength(200);

                entity.Property(e => e.FrmName)
                    .HasColumnName("Frm_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProId).HasColumnName("Pro_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QualityIsoProcedure>(entity =>
            {
                entity.HasKey(e => e.ProId);

                entity.ToTable("QualityISO_Procedure");

                entity.Property(e => e.ProId).HasColumnName("Pro_ID");

                entity.Property(e => e.DepId).HasColumnName("Dep_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProCode)
                    .HasColumnName("Pro_Code")
                    .HasMaxLength(100);

                entity.Property(e => e.ProDate)
                    .HasColumnName("Pro_Date")
                    .HasColumnType("date");

                entity.Property(e => e.ProFile)
                    .HasColumnName("Pro_File")
                    .HasMaxLength(200);

                entity.Property(e => e.ProName)
                    .HasColumnName("Pro_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QuizAnswers>(entity =>
            {
                entity.HasKey(e => e.AnswerId);

                entity.ToTable("Quiz_Answers");

                entity.Property(e => e.AnswerId).HasColumnName("Answer_ID");

                entity.Property(e => e.AnswerImg)
                    .HasColumnName("Answer_Img")
                    .HasMaxLength(50);

                entity.Property(e => e.AnswerName)
                    .HasColumnName("Answer_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.AnswerShortcut)
                    .HasColumnName("Answer_Shortcut")
                    .HasMaxLength(50);

                entity.Property(e => e.IsCorrect).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuestId).HasColumnName("Quest_ID");
            });

            modelBuilder.Entity<QuizQuestionCategory>(entity =>
            {
                entity.HasKey(e => e.QuestionCatId);

                entity.ToTable("Quiz_QuestionCategory");

                entity.Property(e => e.QuestionCatId).HasColumnName("QuestionCat_ID");

                entity.Property(e => e.QuestionCatCount).HasColumnName("QuestionCat_Count");

                entity.Property(e => e.QuestionCatName)
                    .HasColumnName("QuestionCat_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QuizQuestions>(entity =>
            {
                entity.HasKey(e => e.QuestId);

                entity.ToTable("Quiz_Questions");

                entity.Property(e => e.QuestId).HasColumnName("Quest_ID");

                entity.Property(e => e.QuesImage)
                    .HasColumnName("Ques_Image")
                    .HasMaxLength(50);

                entity.Property(e => e.QuesName)
                    .HasColumnName("Ques_Name")
                    .HasMaxLength(2000);

                entity.Property(e => e.QuesType)
                    .IsRequired()
                    .HasColumnName("Ques_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.QuestionCatId).HasColumnName("QuestionCat_ID");

                entity.Property(e => e.QuizId).HasColumnName("Quiz_ID");

                entity.HasOne(d => d.QuestionCat)
                    .WithMany(p => p.QuizQuestions)
                    .HasForeignKey(d => d.QuestionCatId)
                    .HasConstraintName("FK_Quiz_Questions_Quiz_QuestionCategory");
            });

            modelBuilder.Entity<QuizQuiz>(entity =>
            {
                entity.HasKey(e => e.QuizId);

                entity.ToTable("Quiz_Quiz");

                entity.Property(e => e.QuizId).HasColumnName("Quiz_ID");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuizGrade).HasColumnName("Quiz_Grade");

                entity.Property(e => e.QuizName)
                    .HasColumnName("Quiz_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.QuizSuccess).HasColumnName("Quiz_success");

                entity.Property(e => e.QuizTime).HasColumnName("Quiz_time");
            });

            modelBuilder.Entity<QuizStudentD>(entity =>
            {
                entity.ToTable("Quiz_Student_d");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AnswerId).HasColumnName("Answer_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.QuestId).HasColumnName("Quest_ID");

                entity.Property(e => e.StudentId).HasColumnName("Student_ID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.QuizStudentD)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Quiz_Student_d_Quiz_Student_d");
            });

            modelBuilder.Entity<QuizStudentM>(entity =>
            {
                entity.HasKey(e => e.StudentId);

                entity.ToTable("Quiz_Student_M");

                entity.Property(e => e.StudentId).HasColumnName("Student_ID");

                entity.Property(e => e.Closed).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.QuizId).HasColumnName("Quiz_ID");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StudentAccumulativeGrade)
                    .HasColumnName("Student_AccumulativeGrade")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentEmail)
                    .HasColumnName("Student_Email")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentGraduationYear)
                    .HasColumnName("Student_GraduationYear")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentHrcode)
                    .HasColumnName("Student_Hrcode")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentMajor)
                    .HasColumnName("Student_Major")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentMilitaryStatus)
                    .HasColumnName("Student_MilitaryStatus")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentMobile)
                    .HasColumnName("Student_Mobile")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentName)
                    .HasColumnName("Student_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentNationalId)
                    .HasColumnName("Student_NationalID")
                    .HasMaxLength(100);

                entity.Property(e => e.StudentUniversity)
                    .HasColumnName("Student_University")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Quiz)
                    .WithMany(p => p.QuizStudentM)
                    .HasForeignKey(d => d.QuizId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Quiz_Student_M_Quiz_Quiz");
            });

            modelBuilder.Entity<QuizTypes>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("Quiz_Types");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.TypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.Property(e => e.RegionId).HasColumnName("Region_ID");

                entity.Property(e => e.GovernorateId).HasColumnName("Governorate_ID");

                entity.Property(e => e.Region1)
                    .HasColumnName("Region")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Governorate)
                    .WithMany(p => p.Region)
                    .HasForeignKey(d => d.GovernorateId)
                    .HasConstraintName("FK_Region_Governorate");
            });

            modelBuilder.Entity<RelatedTableD>(entity =>
            {
                entity.HasKey(e => e.TableName);

                entity.ToTable("_@RelatedTable_d");

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(300)
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayFieldName).HasMaxLength(300);

                entity.Property(e => e.FieldName)
                    .HasColumnName("Field_Name")
                    .HasMaxLength(300);

                entity.Property(e => e.SourceKeyFieldName).HasMaxLength(300);

                entity.Property(e => e.SourceTableName).HasMaxLength(300);
            });

            modelBuilder.Entity<RelatedTableM>(entity =>
            {
                entity.HasKey(e => e.RelatedId);

                entity.ToTable("_@RelatedTable_m");

                entity.HasIndex(e => e.RelatedId)
                    .HasName("IX__@RelatedTable_m");

                entity.Property(e => e.RelatedId)
                    .HasColumnName("Related_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Caption).HasMaxLength(300);

                entity.Property(e => e.CaptionEn)
                    .HasColumnName("Caption_en")
                    .HasMaxLength(300);

                entity.Property(e => e.IsMaster).HasDefaultValueSql("((0))");

                entity.Property(e => e.RelatedTable)
                    .HasColumnName("Related_Table")
                    .HasMaxLength(100);

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Resources>(entity =>
            {
                entity.HasKey(e => e.UniqueId);

                entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.ResourceName).HasMaxLength(50);
            });

            modelBuilder.Entity<RoSalesD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.StockId, e.ItemId });

                entity.ToTable("RO_Sales_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.StockId).HasColumnName("Stock_ID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.TotalDisc).HasColumnName("Total_Disc");

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.RoSalesD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_Sales_d_RO_TItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.RoSalesD)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_Sales_d_RO_TUnitType");

                entity.HasOne(d => d.RoSalesM)
                    .WithMany(p => p.RoSalesD)
                    .HasForeignKey(d => new { d.DocNo, d.StockId })
                    .HasConstraintName("FK_RO_Sales_d_RO_Sales_m");
            });

            modelBuilder.Entity<RoSalesM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.StockId });

                entity.ToTable("RO_Sales_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.StockId).HasColumnName("Stock_ID");

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasColumnName("Client_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("Invoice_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(50);

                entity.Property(e => e.RepresentativeId)
                    .IsRequired()
                    .HasColumnName("Representative_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TotalDisc).HasColumnName("Total_Disc");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.RoSalesM)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_Sales_m_RO_TClient");

                entity.HasOne(d => d.Representative)
                    .WithMany(p => p.RoSalesM)
                    .HasForeignKey(d => d.RepresentativeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_Sales_m_RO_TRepresentative");
            });

            modelBuilder.Entity<RoStocOutM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.StockId });

                entity.ToTable("RO_StocOut_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.StockId).HasColumnName("Stock_ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.RepresentativeId)
                    .IsRequired()
                    .HasColumnName("Representative_ID")
                    .HasMaxLength(20);

                entity.HasOne(d => d.Representative)
                    .WithMany(p => p.RoStocOutM)
                    .HasForeignKey(d => d.RepresentativeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_StocOut_m_RO_TRepresentative");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.RoStocOutM)
                    .HasForeignKey(d => d.StockId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_StocOut_m_RO_TStock");
            });

            modelBuilder.Entity<RoStockOutD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.StockId, e.ItemId });

                entity.ToTable("RO_StockOut_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.StockId).HasColumnName("Stock_ID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.RoStockOutD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_StockOut_d_RO_TItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.RoStockOutD)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_StockOut_d_RO_TUnitType");

                entity.HasOne(d => d.RoStocOutM)
                    .WithMany(p => p.RoStockOutD)
                    .HasForeignKey(d => new { d.DocNo, d.StockId })
                    .HasConstraintName("FK_RO_StockOut_d_RO_StocOut_m");
            });

            modelBuilder.Entity<RoTcash>(entity =>
            {
                entity.HasKey(e => e.CashId)
                    .HasName("PK_TCash");

                entity.ToTable("RO_TCash");

                entity.Property(e => e.CashId)
                    .HasColumnName("Cash_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CashName)
                    .HasColumnName("Cash_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<RoTcashIn>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.CashId })
                    .HasName("PK_RO_CashIn");

                entity.ToTable("RO_TCashIn");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.CashId)
                    .HasColumnName("Cash_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasColumnName("Client_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(50);

                entity.Property(e => e.RepresentativeId)
                    .IsRequired()
                    .HasColumnName("Representative_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<RoTcashOut>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.CashId });

                entity.ToTable("RO_TcashOut");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.CashId)
                    .HasColumnName("Cash_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(50);

                entity.Property(e => e.SpentId).HasColumnName("Spent_ID");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.RoTcashOut)
                    .HasForeignKey(d => d.CashId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_TcashOut_RO_TCash");

                entity.HasOne(d => d.Spent)
                    .WithMany(p => p.RoTcashOut)
                    .HasForeignKey(d => d.SpentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_TcashOut_RO_TSpent");
            });

            modelBuilder.Entity<RoTclient>(entity =>
            {
                entity.HasKey(e => e.ClientId);

                entity.ToTable("RO_TClient");

                entity.Property(e => e.ClientId)
                    .HasColumnName("Client_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ClientName)
                    .HasColumnName("Client_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);
            });

            modelBuilder.Entity<RoTitem>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_Ro_TItem");

                entity.ToTable("RO_TItem");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemName)
                    .HasColumnName("Item_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.R)
                    .HasColumnName("r")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.RoTitem)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Ro_TItem_RO_TUnitType");
            });

            modelBuilder.Entity<RoTpurchaseD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.StockId, e.ItemId });

                entity.ToTable("RO_TPurchase_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.StockId).HasColumnName("Stock_ID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.TotalDisc).HasColumnName("Total_Disc");

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.RoTpurchaseD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_TPurchase_d_RO_TItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.RoTpurchaseD)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_TPurchase_d_RO_TUnitType");

                entity.HasOne(d => d.RoTpurchaseM)
                    .WithMany(p => p.RoTpurchaseD)
                    .HasForeignKey(d => new { d.DocNo, d.StockId })
                    .HasConstraintName("FK_RO_TPurchase_d_RO_TPurchase_d");
            });

            modelBuilder.Entity<RoTpurchaseM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.StockId })
                    .HasName("PK_RO_TPurchase_1");

                entity.ToTable("RO_TPurchase_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.StockId).HasColumnName("Stock_ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("Invoice_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .IsRequired()
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(50);

                entity.Property(e => e.SuuplierId)
                    .IsRequired()
                    .HasColumnName("Suuplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TotalDisc).HasColumnName("Total_Disc");

                entity.HasOne(d => d.Suuplier)
                    .WithMany(p => p.RoTpurchaseM)
                    .HasForeignKey(d => d.SuuplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RO_TPurchase_RO_TSupplier");
            });

            modelBuilder.Entity<RoTrepresentative>(entity =>
            {
                entity.HasKey(e => e.RepresentativeId)
                    .HasName("PK_TRepresentative");

                entity.ToTable("RO_TRepresentative");

                entity.Property(e => e.RepresentativeId)
                    .HasColumnName("Representative_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.RepresentativeName)
                    .HasColumnName("Representative_Name")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<RoTspent>(entity =>
            {
                entity.HasKey(e => e.SpentId);

                entity.ToTable("RO_TSpent");

                entity.Property(e => e.SpentId)
                    .HasColumnName("Spent_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SpentName)
                    .HasColumnName("Spent_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<RoTstock>(entity =>
            {
                entity.HasKey(e => e.StockId);

                entity.ToTable("RO_TStock");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.StockName)
                    .HasColumnName("Stock_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<RoTsupplier>(entity =>
            {
                entity.HasKey(e => e.SuuplierId);

                entity.ToTable("RO_TSupplier");

                entity.Property(e => e.SuuplierId)
                    .HasColumnName("Suuplier_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.SupplierName)
                    .HasColumnName("Supplier_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<RoTunitType>(entity =>
            {
                entity.HasKey(e => e.UnitId)
                    .HasName("PK_RO_UnitType");

                entity.ToTable("RO_TUnitType");

                entity.Property(e => e.UnitId)
                    .HasColumnName("Unit_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.UnitCount).HasColumnName("Unit_Count");

                entity.Property(e => e.UnitName)
                    .HasColumnName("Unit_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RplId>(entity =>
            {
                entity.HasKey(e => e.Serial)
                    .HasName("PK_Rpl_ID");

                entity.ToTable("_@Rpl_ID");

                entity.HasIndex(e => e.TableName)
                    .HasName("IX__@Rpl_ID")
                    .IsUnique();

                entity.Property(e => e.Serial).ValueGeneratedNever();

                entity.Property(e => e.TableMasterName).HasMaxLength(100);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<RplNon>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName });

                entity.ToTable("_@Rpl_Non");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.FieldName).HasMaxLength(100);
            });

            modelBuilder.Entity<RplTrans>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("_@Rpl_Trans");

                entity.HasIndex(e => e.TableName)
                    .HasName("IX__@Rpl_Trans")
                    .IsUnique();

                entity.Property(e => e.Serial).ValueGeneratedNever();

                entity.Property(e => e.SutableName)
                    .HasColumnName("SUTableName")
                    .HasMaxLength(100);

                entity.Property(e => e.TableMasterName).HasMaxLength(100);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<RplTransFrMainToSub>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("_@Rpl_Trans_FrMainToSub");

                entity.Property(e => e.Serial).ValueGeneratedNever();

                entity.Property(e => e.Sudbfield)
                    .HasColumnName("SUDBField")
                    .HasMaxLength(100);

                entity.Property(e => e.SudbfieldInTable)
                    .HasColumnName("SUDBFieldInTable")
                    .HasMaxLength(100);

                entity.Property(e => e.Sudbtable)
                    .HasColumnName("SUDBTable")
                    .HasMaxLength(100);

                entity.Property(e => e.TableMasterName).HasMaxLength(100);

                entity.Property(e => e.TableName).HasMaxLength(100);
            });

            modelBuilder.Entity<RulPurchase>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("_@RulPurchase");

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(220);

                entity.Property(e => e.DescrpAr)
                    .HasColumnName("Descrp_Ar")
                    .HasMaxLength(220);

                entity.Property(e => e.Rul)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RulSales>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("_@RulSales");

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(220);

                entity.Property(e => e.DescrpAr)
                    .HasColumnName("Descrp_Ar")
                    .HasMaxLength(220);

                entity.Property(e => e.Rul)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RulStock>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("_@RulStock");

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.Descrp)
                    .IsRequired()
                    .HasMaxLength(220);

                entity.Property(e => e.DescrpAr)
                    .HasColumnName("Descrp_Ar")
                    .HasMaxLength(220);
            });

            modelBuilder.Entity<SafetyIncident>(entity =>
            {
                entity.HasKey(e => e.IncidentId);

                entity.ToTable("Safety_Incident");

                entity.Property(e => e.IncidentId).HasColumnName("Incident_ID");

                entity.Property(e => e.ActualseverityAssetproduction)
                    .HasColumnName("ACTUALSEVERITY_ASSETPRODUCTION")
                    .HasMaxLength(50);

                entity.Property(e => e.ActualseverityEnvironment)
                    .HasColumnName("ACTUALSEVERITY_ENVIRONMENT")
                    .HasMaxLength(50);

                entity.Property(e => e.ActualseverityPeople)
                    .HasColumnName("ACTUALSEVERITY_PEOPLE")
                    .HasMaxLength(50);

                entity.Property(e => e.ActualseverityReputation)
                    .HasColumnName("ACTUALSEVERITY_REPUTATION")
                    .HasMaxLength(50);

                entity.Property(e => e.Agentofincident)
                    .HasColumnName("AGENTOFINCIDENT")
                    .HasMaxLength(50);

                entity.Property(e => e.Attachment).HasMaxLength(50);

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Employmentcategory)
                    .HasColumnName("EMPLOYMENTCATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Fulldescription)
                    .HasColumnName("FULLDESCRIPTION")
                    .HasMaxLength(200);

                entity.Property(e => e.Immediateactionstaken)
                    .HasColumnName("IMMEDIATEACTIONSTAKEN")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.IncLocId).HasColumnName("Inc_LocID");

                entity.Property(e => e.IncidentNo).HasColumnName("Incident_No");

                entity.Property(e => e.Incidentinjurysummary)
                    .HasColumnName("INCIDENTINJURYSUMMARY")
                    .HasMaxLength(200);

                entity.Property(e => e.Isthisanincidentoranearmiss)
                    .HasColumnName("ISTHISANINCIDENTORANEARMISS")
                    .HasMaxLength(50);

                entity.Property(e => e.Isthisworkrelated).HasColumnName("ISTHISWORKRELATED");

                entity.Property(e => e.Occurrencedate)
                    .HasColumnName("OCCURRENCEDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personreportingincidentname)
                    .HasColumnName("PERSONREPORTINGINCIDENTNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.PotentialseverityAssetproduction)
                    .HasColumnName("POTENTIALSEVERITY_ASSETPRODUCTION")
                    .HasMaxLength(50);

                entity.Property(e => e.PotentialseverityEnvironment)
                    .HasColumnName("POTENTIALSEVERITY_ENVIRONMENT")
                    .HasMaxLength(50);

                entity.Property(e => e.PotentialseverityPeople)
                    .HasColumnName("POTENTIALSEVERITY_PEOPLE")
                    .HasMaxLength(50);

                entity.Property(e => e.PotentialseverityReputation)
                    .HasColumnName("POTENTIALSEVERITY_REPUTATION")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ReasonWorkRelated).HasMaxLength(50);

                entity.Property(e => e.ReportedDate).HasColumnType("datetime");

                entity.Property(e => e.Whatwasaffected)
                    .HasColumnName("WHATWASAFFECTED")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SafetyIncidentLocation>(entity =>
            {
                entity.HasKey(e => e.IncLocId);

                entity.ToTable("Safety_Incident_Location");

                entity.Property(e => e.IncLocId).HasColumnName("Inc_LocID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.Linemanager)
                    .HasColumnName("LINEMANAGER")
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Officeimpacted)
                    .HasColumnName("OFFICEIMPACTED")
                    .HasMaxLength(50);

                entity.Property(e => e.Witnessname)
                    .HasColumnName("WITNESSNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Workplace)
                    .HasColumnName("WORKPLACE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SafetyInjuredPersons>(entity =>
            {
                entity.HasKey(e => e.InjuredpersonId)
                    .HasName("PK_Safety_INJURED_Persons1");

                entity.ToTable("Safety_INJURED_Persons");

                entity.Property(e => e.InjuredpersonId).HasColumnName("INJUREDPERSON_ID");

                entity.Property(e => e.Dateemployernotifiedofinjury)
                    .HasColumnName("DATEEMPLOYERNOTIFIEDOFINJURY")
                    .HasColumnType("datetime");

                entity.Property(e => e.Datehired)
                    .HasColumnName("DATEHIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("DATEOFBIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.Employeehomeoffice)
                    .HasColumnName("EMPLOYEEHOMEOFFICE")
                    .HasMaxLength(50);

                entity.Property(e => e.Employeesproject)
                    .HasColumnName("EMPLOYEESPROJECT")
                    .HasMaxLength(50);

                entity.Property(e => e.Employmentcategory)
                    .HasColumnName("EMPLOYMENTCATEGORY")
                    .HasMaxLength(50);

                entity.Property(e => e.Fullname)
                    .HasColumnName("FULLNAME")
                    .HasMaxLength(50);

                entity.Property(e => e.Fullresidentialaddress)
                    .HasColumnName("FULLRESIDENTIALADDRESS")
                    .HasMaxLength(50);

                entity.Property(e => e.Harmedtheemployee)
                    .HasColumnName("HARMEDTHEEMPLOYEE")
                    .HasMaxLength(50);

                entity.Property(e => e.Hasinjuredemployeereturnedtowork)
                    .HasColumnName("HASINJUREDEMPLOYEERETURNEDTOWORK")
                    .HasMaxLength(50);

                entity.Property(e => e.Howlonginpresentjob)
                    .HasColumnName("HOWLONGINPRESENTJOB")
                    .HasMaxLength(50);

                entity.Property(e => e.IncidentId)
                    .HasColumnName("Incident_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.Injurytype)
                    .HasColumnName("INJURYTYPE")
                    .HasMaxLength(50);

                entity.Property(e => e.Natureofinjury)
                    .HasColumnName("NATUREOFINJURY")
                    .HasMaxLength(50);

                entity.Property(e => e.Occupation)
                    .HasColumnName("OCCUPATION")
                    .HasMaxLength(50);

                entity.Property(e => e.Partofbodyinjured)
                    .HasColumnName("PARTOFBODYINJURED")
                    .HasMaxLength(50);

                entity.Property(e => e.Persondoingjustbeforetheincident)
                    .HasColumnName("PERSONDOINGJUSTBEFORETHEINCIDENT")
                    .HasMaxLength(200);

                entity.Property(e => e.Sex)
                    .HasColumnName("SEX")
                    .HasMaxLength(50);

                entity.Property(e => e.Treatmentgiven)
                    .HasColumnName("TREATMENTGIVEN")
                    .HasMaxLength(50);

                entity.Property(e => e.Whathappened)
                    .HasColumnName("WHATHAPPENED")
                    .HasMaxLength(200);

                entity.Property(e => e.Whereinjuriestreated)
                    .HasColumnName("WHEREINJURIESTREATED")
                    .HasMaxLength(50);

                entity.Property(e => e.Whoprovidedtreatment)
                    .HasColumnName("WHOPROVIDEDTREATMENT")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SapGroup>(entity =>
            {
                entity.HasKey(e => e.SapGroup1);

                entity.ToTable("SAP_Group");

                entity.Property(e => e.SapGroup1).HasColumnName("SAP_Group");

                entity.Property(e => e.SapgInDate)
                    .HasColumnName("SAPG_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SapgInUser)
                    .HasColumnName("SAPG_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.SapgName)
                    .HasColumnName("SAPG_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SapJobTitle>(entity =>
            {
                entity.HasKey(e => e.SapId);

                entity.ToTable("SAP_JobTitle");

                entity.Property(e => e.SapId)
                    .HasColumnName("SAP_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SapGroup).HasColumnName("SAP_Group");

                entity.Property(e => e.SapName)
                    .HasColumnName("SAP_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SapProjectFinance>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Sap_Project_Finance");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectIdSap)
                    .HasColumnName("Project_ID_sap")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.SapId)
                    .HasColumnName("Sap_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdDate)
                    .HasColumnName("Upd_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdUser)
                    .HasColumnName("Upd_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingAllocation>(entity =>
            {
                entity.HasKey(e => e.AllocationId);

                entity.ToTable("SAPHR_Coding_Allocation");

                entity.Property(e => e.AllocationId)
                    .HasColumnName("Allocation_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AllocationName)
                    .HasColumnName("Allocation_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingArea>(entity =>
            {
                entity.HasKey(e => e.AreaId);

                entity.ToTable("SAPHR_Coding_Area");

                entity.Property(e => e.AreaId)
                    .HasColumnName("Area_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AreaName)
                    .HasColumnName("Area_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyId);

                entity.ToTable("SAPHR_Coding_Company");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("Company_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CompanyName)
                    .HasColumnName("Company_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ParentDepId).HasColumnName("Parent_Dep_ID");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode1)
                    .HasColumnName("User_HR_Code1")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode2)
                    .HasColumnName("User_HR_Code2")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode3)
                    .HasColumnName("User_HR_Code3")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingCompanyAuth>(entity =>
            {
                entity.HasKey(e => e.CompAuth);

                entity.ToTable("SAPHR_Coding_Company_Auth");

                entity.Property(e => e.CompanyId).HasColumnName("Company_ID");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingDepartment>(entity =>
            {
                entity.HasKey(e => e.DepartmentId)
                    .HasName("PK_SAPHR_Coding_Departments");

                entity.ToTable("SAPHR_Coding_Department");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.DepartmentName)
                    .HasColumnName("Department_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<SaphrCodingPosition>(entity =>
            {
                entity.HasKey(e => e.PositionId);

                entity.ToTable("SAPHR_Coding_Position");

                entity.Property(e => e.PositionId)
                    .HasColumnName("Position_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.PositionName)
                    .HasColumnName("Position_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ShowAll).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SaphrCodingRelation>(entity =>
            {
                entity.HasKey(e => e.RelDepId)
                    .HasName("PK_SAPHR_Coding_Department2");

                entity.ToTable("SAPHR_Coding_Relation");

                entity.Property(e => e.RelDepId).HasColumnName("RelDep_ID");

                entity.Property(e => e.AllocationId).HasColumnName("Allocation_ID");

                entity.Property(e => e.AreaId).HasColumnName("Area_ID");

                entity.Property(e => e.CompanyId).HasColumnName("Company_ID");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.PositionId).HasColumnName("Position_ID");

                entity.Property(e => e.SubTypeId).HasColumnName("SubType_ID");

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");
            });

            modelBuilder.Entity<SaphrCodingRequests>(entity =>
            {
                entity.HasKey(e => e.ReqId);

                entity.ToTable("SAPHR_Coding_Requests");

                entity.Property(e => e.ReqId).HasColumnName("Req_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingRequestsD>(entity =>
            {
                entity.HasKey(e => e.ReqDet);

                entity.ToTable("SAPHR_Coding_Requests_d");

                entity.Property(e => e.ReqDet).HasColumnName("Req_Det");

                entity.Property(e => e.AllocationId).HasColumnName("Allocation_ID");

                entity.Property(e => e.AreaId).HasColumnName("Area_ID");

                entity.Property(e => e.CompanyId).HasColumnName("Company_ID");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.HrCode)
                    .HasColumnName("HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.PositionId).HasColumnName("Position_ID");

                entity.Property(e => e.ReqId).HasColumnName("Req_ID");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(500);

                entity.Property(e => e.SapIncodeUser)
                    .HasColumnName("SAP_INCode_User")
                    .HasMaxLength(50);

                entity.Property(e => e.SapIndate)
                    .HasColumnName("SAP_INDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.StatusD)
                    .HasColumnName("Status_d")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SubTypeId).HasColumnName("SubType_ID");

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");

                entity.HasOne(d => d.Req)
                    .WithMany(p => p.SaphrCodingRequestsD)
                    .HasForeignKey(d => d.ReqId)
                    .HasConstraintName("FK_SAPHR_Coding_Requests_d_SAPHR_Coding_Requests");
            });

            modelBuilder.Entity<SaphrCodingSubType>(entity =>
            {
                entity.HasKey(e => e.SubTypeId);

                entity.ToTable("SAPHR_Coding_SubType");

                entity.Property(e => e.SubTypeId)
                    .HasColumnName("SubType_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ParentTypeId).HasColumnName("Parent_Type_ID");

                entity.Property(e => e.SubTypeName)
                    .HasColumnName("SubType_Name")
                    .HasMaxLength(200);

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.SaphrCodingSubType)
                    .HasForeignKey(d => d.ParentTypeId)
                    .HasConstraintName("FK_SAPHR_Coding_SubType_SAPHR_Coding_Type");
            });

            modelBuilder.Entity<SaphrCodingTest>(entity =>
            {
                entity.ToTable("SAPHR_Coding_Test");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ComAlloc).HasColumnName("Com_Alloc");

                entity.Property(e => e.DepArea).HasColumnName("Dep_Area");

                entity.Property(e => e.UnitPos).HasColumnName("Unit_Pos");
            });

            modelBuilder.Entity<SaphrCodingType>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("SAPHR_Coding_Type");

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.TypeName)
                    .HasColumnName("Type_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SaphrCodingUnit>(entity =>
            {
                entity.HasKey(e => e.UnitId);

                entity.ToTable("SAPHR_Coding_Unit");

                entity.Property(e => e.UnitId)
                    .HasColumnName("Unit_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.UnitName)
                    .HasColumnName("Unit_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ScApprovalType>(entity =>
            {
                entity.ToTable("SC_Approval_Type");

                entity.Property(e => e.ScApprovalTypeId)
                    .HasColumnName("SC_Approval_Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(500);
            });

            modelBuilder.Entity<ScPayment>(entity =>
            {
                entity.HasKey(e => e.PaymentId);

                entity.ToTable("SC_Payment");

                entity.Property(e => e.PaymentId).HasColumnName("Payment_ID");

                entity.Property(e => e.AccPaymentAmount).HasColumnName("Acc_Payment_Amount");

                entity.Property(e => e.CommentAccount).HasMaxLength(500);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Contractno).HasMaxLength(500);

                entity.Property(e => e.ControlsPaymentAmount).HasColumnName("Controls_Payment_Amount");

                entity.Property(e => e.CumulativeAmountWorkDone).HasColumnName("Cumulative_Amount_Work_Done");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FileAttached).HasMaxLength(50);

                entity.Property(e => e.FinalPaymentAmount).HasColumnName("Final_Payment_Amount");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.InvoiceNo)
                    .IsRequired()
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(20);

                entity.Property(e => e.OdPaymentAmount).HasColumnName("OD_Payment_Amount");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ScPaymentTypeId).HasColumnName("SC_Payment_Type_ID");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TypeOfWork)
                    .HasColumnName("Type_Of_Work")
                    .HasMaxLength(500);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.WorkDoneUpDate)
                    .HasColumnName("WorkDone_Up_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ScPaymentApproval>(entity =>
            {
                entity.ToTable("SC_Payment_Approval");

                entity.Property(e => e.ScPaymentApprovalId).HasColumnName("SC_Payment_Approval_ID");

                entity.Property(e => e.ApprovalDescription)
                    .HasColumnName("Approval_Description")
                    .HasMaxLength(500);

                entity.Property(e => e.Index).HasColumnName("_Index");

                entity.Property(e => e.ScApprovalTypeId).HasColumnName("SC_Approval_Type_ID");

                entity.Property(e => e.ScPaymentTypeId).HasColumnName("SC_Payment_Type_ID");
            });

            modelBuilder.Entity<ScPaymentD>(entity =>
            {
                entity.HasKey(e => e.Serial)
                    .HasName("PK_SC_Payment_d_1");

                entity.ToTable("SC_Payment_d");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(20);

                entity.Property(e => e.PaymentId).HasColumnName("Payment_ID");

                entity.Property(e => e.PlanningDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.ScPaymentApprovalId).HasColumnName("SC_Payment_Approval_ID");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.ScPaymentD)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("FK_SC_Payment_d_SC_Payment");
            });

            modelBuilder.Entity<ScPaymentType>(entity =>
            {
                entity.ToTable("SC_Payment_Type");

                entity.Property(e => e.ScPaymentTypeId)
                    .HasColumnName("SC_Payment_Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(500);
            });

            modelBuilder.Entity<ScPaymentUsers>(entity =>
            {
                entity.HasKey(e => e.UserHrCode)
                    .HasName("PK_SC_Payments_Users");

                entity.ToTable("SC_Payment_Users");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.PayId)
                    .HasColumnName("PayID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ServiceId).HasColumnName("Service_ID");
            });

            modelBuilder.Entity<ScPaymentsAuthority>(entity =>
            {
                entity.HasKey(e => e.AuthId);

                entity.ToTable("SC_Payments_Authority");

                entity.Property(e => e.AuthId).HasColumnName("Auth_ID");

                entity.Property(e => e.AllowDepartment)
                    .HasColumnName("Allow_Department")
                    .HasMaxLength(20);

                entity.Property(e => e.AllowEmpEmail)
                    .HasColumnName("Allow_Emp_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.AuthType)
                    .HasColumnName("Auth_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.AuthTypeCode)
                    .HasColumnName("Auth_Type_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Comment).HasMaxLength(100);
            });

            modelBuilder.Entity<ScReviewD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.AgreementNo, e.ItemNo });

                entity.ToTable("SC_Review_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo).HasColumnName("Agreement_No");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementQty).HasColumnName("Agreement_Qty");

                entity.Property(e => e.AppPercent).HasColumnName("App_Percent");

                entity.Property(e => e.ApprovedByClient).HasColumnName("Approved_By_Client");

                entity.Property(e => e.BalanceQty).HasColumnName("Balance_Qty");

                entity.Property(e => e.DoneByHac).HasColumnName("Done_By_HAC");

                entity.Property(e => e.PaidByClient).HasColumnName("Paid_By_Client");

                entity.Property(e => e.PaidPercent).HasColumnName("Paid_Percent");

                entity.Property(e => e.RequestedQty).HasColumnName("Requested_Qty");

                entity.Property(e => e.ScAppQty).HasColumnName("SC_App_Qty");

                entity.Property(e => e.ScPaidQty).HasColumnName("SC_Paid_Qty");

                entity.Property(e => e.ScProgress).HasColumnName("SC_Progress");

                entity.Property(e => e.ScSubQty).HasColumnName("SC_Sub_Qty");

                entity.Property(e => e.SubPercent).HasColumnName("Sub_Percent");

                entity.Property(e => e.SubToClient).HasColumnName("Sub_To_Client");

                entity.HasOne(d => d.ScReviewM)
                    .WithMany(p => p.ScReviewD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.AgreementNo })
                    .HasConstraintName("FK_SC_Review_d_SC_Review_m");
            });

            modelBuilder.Entity<ScReviewM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.AgreementNo });

                entity.ToTable("SC_Review_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AgreementNo).HasColumnName("Agreement_No");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScTypeOfWork>(entity =>
            {
                entity.HasKey(e => e.TypeOfWork);

                entity.ToTable("SC_TypeOfWork");

                entity.Property(e => e.TypeOfWork).HasColumnName("Type_Of_Work");

                entity.Property(e => e.TypeName)
                    .HasColumnName("Type_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingNotesD>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Scaffolding_Notes_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Project)
                    .WithOne(p => p.ScaffoldingNotesD)
                    .HasForeignKey<ScaffoldingNotesD>(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_Notes_d_Scaffolding_Notes_m");
            });

            modelBuilder.Entity<ScaffoldingNotesM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Scaffolding_Notes_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingOpeningBalanceD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SystemId })
                    .HasName("PK_Scaffolding_OpeningBalance_d_1");

                entity.ToTable("Scaffolding_OpeningBalance_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingOpeningBalanceD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_OpeningBalance_d_Scaffolding_Peak_m");
            });

            modelBuilder.Entity<ScaffoldingPeakD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SystemId })
                    .HasName("PK_Scaffolding_Peak");

                entity.ToTable("Scaffolding_Peak_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId).HasColumnName("System_ID");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingPeakD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_Peak_d_Scaffolding_Peak_m");
            });

            modelBuilder.Entity<ScaffoldingPeakM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Scaffolding_Peak_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingPlanPoD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ProjectId, e.SystemId })
                    .HasName("PK_Scaffolding_PlanPO");

                entity.ToTable("Scaffolding_PlanPO_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualDateFrom).HasColumnType("datetime");

                entity.Property(e => e.ActualDateTo).HasColumnType("datetime");

                entity.Property(e => e.ActualValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingPlanPoD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_PlanPO_d_Scaffolding_PlanPO_m");
            });

            modelBuilder.Entity<ScaffoldingPlanPoM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Scaffolding_PlanPO_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingPlanStoreD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ProjectId, e.SystemId })
                    .HasName("PK_Scaffolding_PlanStore");

                entity.ToTable("Scaffolding_PlanStore_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualDateFrom).HasColumnType("datetime");

                entity.Property(e => e.ActualDateTo).HasColumnType("datetime");

                entity.Property(e => e.ActualValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.StoreId)
                    .HasColumnName("Store_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingPlanStoreD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_PlanStore_d_Scaffolding_PlanStore_m");
            });

            modelBuilder.Entity<ScaffoldingPlanStoreM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Scaffolding_PlanStore_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingPlanTransferFromProjectsD>(entity =>
            {
                entity.HasKey(e => new { e.RecordNo, e.ProjectId, e.TransFromProjectId, e.SystemId });

                entity.ToTable("Scaffolding_PlanTransferFromProjects_d");

                entity.HasIndex(e => e.RecordNo)
                    .HasName("IX_Scaffolding_PlanTransferFromProjects_d");

                entity.Property(e => e.RecordNo).ValueGeneratedOnAdd();

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TransFromProjectId)
                    .HasColumnName("TransFrom_Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualDateFrom).HasColumnType("datetime");

                entity.Property(e => e.ActualDateTo).HasColumnType("datetime");

                entity.Property(e => e.ActualValue).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingPlanTransferFromProjectsD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_PlanTransferFromProjects_d_Scaffolding_PlanTransferFromProjects_m");
            });

            modelBuilder.Entity<ScaffoldingPlanTransferFromProjectsM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Scaffolding_PlanTransferFromProjects_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingReleaseD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SystemId });

                entity.ToTable("Scaffolding_Release_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingReleaseD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_Release_d_Scaffolding_Peak_m");
            });

            modelBuilder.Entity<ScaffoldingRequiredD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SystemId });

                entity.ToTable("Scaffolding_Required_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.RequiredFrom)
                    .HasColumnName("Required_From")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ScaffoldingRequiredD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Scaffolding_Required_d_Scaffolding_Peak_m");
            });

            modelBuilder.Entity<ScaffoldingStore>(entity =>
            {
                entity.HasKey(e => e.StoreId);

                entity.ToTable("Scaffolding_Store");

                entity.Property(e => e.StoreId)
                    .HasColumnName("Store_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.StoreName)
                    .HasColumnName("Store_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ScaffoldingSystem>(entity =>
            {
                entity.HasKey(e => e.SystemId);

                entity.ToTable("Scaffolding_System");

                entity.Property(e => e.SystemId)
                    .HasColumnName("System_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.SystemName)
                    .HasColumnName("System_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<SdmProjectType>(entity =>
            {
                entity.HasKey(e => e.ProjTypeId);

                entity.ToTable("SDM_ProjectType");

                entity.Property(e => e.ProjTypeId).HasColumnName("ProjType_ID");

                entity.Property(e => e.ProjTypeName)
                    .HasColumnName("ProjType_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SdmProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId)
                    .HasName("PK_TWEBWF_Objective");

                entity.ToTable("SDM_Projects");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.AssignedToHrcode)
                    .HasColumnName("AssignedTo_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.EstimatedTime).HasColumnName("Estimated_Time");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.InitiationDate).HasColumnType("datetime");

                entity.Property(e => e.NeededBusiness)
                    .HasColumnName("Needed_Business")
                    .HasMaxLength(1000);

                entity.Property(e => e.NeededItResources)
                    .HasColumnName("Needed_IT_Resources")
                    .HasMaxLength(1000);

                entity.Property(e => e.ProjectName)
                    .HasColumnName("Project_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnName("Request_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequesterHrcode)
                    .HasColumnName("Requester_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.ScopeOfWork).HasMaxLength(1000);
            });

            modelBuilder.Entity<SdmRequest>(entity =>
            {
                entity.HasKey(e => e.ReqId);

                entity.ToTable("SDM_Request");

                entity.Property(e => e.ReqId).HasColumnName("Req_ID");

                entity.Property(e => e.ReqComment).HasColumnName("Req_Comment");

                entity.Property(e => e.ReqDate)
                    .HasColumnName("Req_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReqFile)
                    .HasColumnName("Req_File")
                    .HasMaxLength(50);

                entity.Property(e => e.ReqProject).HasColumnName("Req_Project");

                entity.Property(e => e.ReqStatus)
                    .HasColumnName("Req_Status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReqUser)
                    .HasColumnName("Req_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SdmRequestComments>(entity =>
            {
                entity.ToTable("SDM_Request_Comments");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommFile)
                    .HasColumnName("Comm_File")
                    .HasMaxLength(50);

                entity.Property(e => e.CommUser)
                    .HasColumnName("Comm_User")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReqId).HasColumnName("Req_ID");

                entity.HasOne(d => d.Req)
                    .WithMany(p => p.SdmRequestComments)
                    .HasForeignKey(d => d.ReqId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SDM_Request_Comments_SDM_Request");
            });

            modelBuilder.Entity<SdmResource>(entity =>
            {
                entity.HasKey(e => e.UniqueId);

                entity.ToTable("SDM_Resource");

                entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasColumnType("image");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.ResourceName).HasMaxLength(50);
            });

            modelBuilder.Entity<SdmTaskType>(entity =>
            {
                entity.HasKey(e => e.TaskTypeId)
                    .HasName("PK_TWEBWF_TimeLine_TaskType");

                entity.ToTable("SDM_TaskType");

                entity.Property(e => e.TaskTypeId).HasColumnName("TaskType_ID");

                entity.Property(e => e.TaskTypeName)
                    .HasColumnName("TaskType_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SdmTasks>(entity =>
            {
                entity.HasKey(e => e.TaskId);

                entity.ToTable("SDM_Tasks");

                entity.Property(e => e.TaskId).HasColumnName("Task_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ReqId).HasColumnName("Req_ID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.TaskDeadline)
                    .HasColumnName("Task_Deadline")
                    .HasColumnType("datetime");

                entity.Property(e => e.TaskDesc)
                    .HasColumnName("Task_Desc")
                    .HasMaxLength(500);

                entity.Property(e => e.TaskDuration).HasColumnName("Task_Duration");

                entity.Property(e => e.TaskName)
                    .HasColumnName("Task_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.TaskTypeId).HasColumnName("TaskType_ID");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.SdmTasks)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SDM_Tasks_SDM_Projects");
            });

            modelBuilder.Entity<SdmTimeLine>(entity =>
            {
                entity.ToTable("SDM_TimeLine");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

                entity.Property(e => e.FormDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.TaskId).HasColumnName("Task_ID");

                entity.Property(e => e.TaskTypeId).HasColumnName("TaskType_ID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SettingBarCodePrint>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("Setting_BarCodePrint");

                entity.Property(e => e.BarCodeHeight).HasDefaultValueSql("((690))");

                entity.Property(e => e.Columns).HasDefaultValueSql("((6))");

                entity.Property(e => e.Count).HasDefaultValueSql("((144))");

                entity.Property(e => e.HorizontalSpacing).HasDefaultValueSql("((0.29))");

                entity.Property(e => e.LabelHeight).HasDefaultValueSql("((0.2))");

                entity.Property(e => e.LabelWidth).HasDefaultValueSql("((1.1))");

                entity.Property(e => e.NarrowWidth).HasDefaultValueSql("((25))");

                entity.Property(e => e.PageHeight).HasDefaultValueSql("((11))");

                entity.Property(e => e.PageWidth).HasDefaultValueSql("((8.5))");

                entity.Property(e => e.PaperType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Rows).HasDefaultValueSql("((24))");

                entity.Property(e => e.SideMargin).HasDefaultValueSql("((0.2))");

                entity.Property(e => e.TopMargin).HasDefaultValueSql("((0.2))");

                entity.Property(e => e.VerticalSpacing).HasDefaultValueSql("((0.28))");
            });

            modelBuilder.Entity<SettingBarcode>(entity =>
            {
                entity.HasKey(e => new { e.FormId, e.TableName });

                entity.ToTable("Setting_Barcode");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(220);

                entity.Property(e => e.BarCodeTable).HasMaxLength(220);

                entity.Property(e => e.BarCodeTableKey).HasMaxLength(20);

                entity.Property(e => e.BarcodeField).HasMaxLength(20);

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MasterIdFrom).HasColumnName("MasterID_From");

                entity.Property(e => e.MasterIdTo).HasColumnName("MasterID_To");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SettingBarcodeD>(entity =>
            {
                entity.HasKey(e => new { e.FormId, e.TableName, e.BarcodeField });

                entity.ToTable("Setting_Barcode_d");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(220);

                entity.Property(e => e.BarcodeField).HasMaxLength(20);

                entity.Property(e => e.BarCodeFrom).HasColumnName("BarCode_From");

                entity.Property(e => e.BarCodeTo).HasColumnName("BarCode_To");

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.FieldTitleAr)
                    .HasColumnName("FieldTitle_Ar")
                    .HasMaxLength(220);

                entity.Property(e => e.FieldTitleEn)
                    .HasColumnName("FieldTitle_En")
                    .HasMaxLength(220);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SettingBarcodeDD>(entity =>
            {
                entity.HasKey(e => new { e.FormId, e.TableName, e.BarcodeField, e.Value });

                entity.ToTable("Setting_Barcode_d_d");

                entity.Property(e => e.FormId)
                    .HasColumnName("Form_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.TableName)
                    .HasColumnName("Table_Name")
                    .HasMaxLength(220);

                entity.Property(e => e.BarcodeField).HasMaxLength(20);

                entity.Property(e => e.Value).HasMaxLength(50);

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Equivalent).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RplDate).HasColumnType("datetime");

                entity.HasOne(d => d.SettingBarcodeD)
                    .WithMany(p => p.SettingBarcodeDD)
                    .HasForeignKey(d => new { d.FormId, d.TableName, d.BarcodeField })
                    .HasConstraintName("FK_Setting_Barcode_d_d_Setting_Barcode_d");
            });

            modelBuilder.Entity<SettingGeneral>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("Setting_General");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.FractionCurr).HasColumnName("Fraction_Curr");

                entity.Property(e => e.FractionQty).HasColumnName("Fraction_Qty");

                entity.Property(e => e.UseWindowsAuthentication).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SettingMdl>(entity =>
            {
                entity.HasKey(e => e.MdlName);

                entity.ToTable("_@Setting_Mdl");

                entity.Property(e => e.MdlName)
                    .HasColumnName("Mdl_Name")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.MdlAssets)
                    .HasColumnName("Mdl_Assets")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlCont)
                    .HasColumnName("Mdl_Cont")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlGeneral)
                    .HasColumnName("Mdl_General")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlImport)
                    .HasColumnName("Mdl_Import")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlMk)
                    .HasColumnName("Mdl_Mk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlNotes)
                    .HasColumnName("Mdl_Notes")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlOpWithOth).HasColumnName("Mdl_OpWithOth");

                entity.Property(e => e.MdlProduction)
                    .HasColumnName("Mdl_Production")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlPurchase).HasColumnName("Mdl_Purchase");

                entity.Property(e => e.MdlSales).HasColumnName("Mdl_Sales");

                entity.Property(e => e.MdlStock)
                    .HasColumnName("Mdl_Stock")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SettingMdlD>(entity =>
            {
                entity.HasKey(e => new { e.MdlName, e.SubMdlName });

                entity.ToTable("_@Setting_Mdl_d");

                entity.Property(e => e.MdlName)
                    .HasColumnName("Mdl_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SubMdlName)
                    .HasColumnName("SubMdl_Name")
                    .HasMaxLength(50);

                entity.HasOne(d => d.MdlNameNavigation)
                    .WithMany(p => p.SettingMdlD)
                    .HasForeignKey(d => d.MdlName)
                    .HasConstraintName("FK__@Setting_Mdl_d__@Setting_Mdl");
            });

            modelBuilder.Entity<SettingTsystem>(entity =>
            {
                entity.ToTable("Setting_Tsystem");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasMaxLength(10)
                    .ValueGeneratedNever();

                entity.Property(e => e.Tid)
                    .HasColumnName("TID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShowColumn>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName });

                entity.ToTable("_@ShowColumn");

                entity.Property(e => e.TableName).HasMaxLength(220);

                entity.Property(e => e.FieldName).HasMaxLength(220);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<ShowColumnSum>(entity =>
            {
                entity.HasKey(e => new { e.FieldName, e.Type });

                entity.ToTable("_@ShowColumn_Sum");

                entity.Property(e => e.FieldName).HasMaxLength(220);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<ShowHidden>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName });

                entity.ToTable("_@ShowHidden");

                entity.Property(e => e.TableName).HasMaxLength(200);

                entity.Property(e => e.FieldName).HasMaxLength(200);

                entity.Property(e => e.ArName).HasMaxLength(50);

                entity.Property(e => e.EnName).HasMaxLength(50);

                entity.Property(e => e.ShowAfter).HasMaxLength(50);
            });

            modelBuilder.Entity<SuFields>(entity =>
            {
                entity.HasKey(e => new { e.SuTable, e.SuField })
                    .HasName("PK__@SUFields");

                entity.ToTable("_@SU_Fields");

                entity.Property(e => e.SuTable)
                    .HasColumnName("SU_Table")
                    .HasMaxLength(100);

                entity.Property(e => e.SuField)
                    .HasColumnName("SU_Field")
                    .HasMaxLength(100);

                entity.Property(e => e.SuNameFieldName)
                    .HasColumnName("SU_Name_FieldName")
                    .HasMaxLength(100);

                entity.Property(e => e.SuSourceTableName)
                    .HasColumnName("SU_Source_TableName")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SuFieldsDb>(entity =>
            {
                entity.HasKey(e => new { e.SuTable, e.SuField });

                entity.ToTable("_@SU_FieldsDB");

                entity.Property(e => e.SuTable)
                    .HasColumnName("SU_Table")
                    .HasMaxLength(100);

                entity.Property(e => e.SuField)
                    .HasColumnName("SU_Field")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SuNon>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName });

                entity.ToTable("_@SU_Non");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.FieldName).HasMaxLength(100);
            });

            modelBuilder.Entity<SuNonDb>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.FieldName });

                entity.ToTable("_@SU_NonDB");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.FieldName).HasMaxLength(100);
            });

            modelBuilder.Entity<SubContractorMapping>(entity =>
            {
                entity.HasKey(e => e.Sapcod);

                entity.Property(e => e.Sapcod)
                    .HasColumnName("SAPcod")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(50);

                entity.Property(e => e.Name4).HasMaxLength(50);

                entity.Property(e => e.OldCode).HasMaxLength(50);

                entity.Property(e => e.TaxNumber1).HasMaxLength(50);

                entity.Property(e => e.TaxNumber2).HasMaxLength(50);
            });

            modelBuilder.Entity<SurvSurvey>(entity =>
            {
                entity.HasKey(e => e.SurveyId);

                entity.ToTable("SURV_Survey");

                entity.Property(e => e.SurveyId)
                    .HasColumnName("Survey_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Quarter).HasMaxLength(20);

                entity.Property(e => e.Year).HasMaxLength(20);
            });

            modelBuilder.Entity<SurvSurveyTransactions>(entity =>
            {
                entity.HasKey(e => e.SurveyTransNo);

                entity.ToTable("SURV_Survey_Transactions");

                entity.Property(e => e.SurveyTransNo).HasColumnName("Survey_Trans_No");

                entity.Property(e => e.Advice).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EmailSupportHotlineResolutionTime).HasColumnName("Email_Support_Hotline_Resolution_Time");

                entity.Property(e => e.EmailSupportHotlineResponseEtiquette).HasColumnName("Email_Support_Hotline_Response_Etiquette");

                entity.Property(e => e.EmailSupportHotlineResponseTime).HasColumnName("Email_Support_Hotline_Response_Time");

                entity.Property(e => e.ItAnnouncementMailsUsefulUseful).HasColumnName("IT_announcement_mails_useful_Useful");

                entity.Property(e => e.ItServicesProblemAisService).HasColumnName("IT_Services_Problem_AIS_service");

                entity.Property(e => e.ItServicesProblemAlphaServices).HasColumnName("IT_Services_Problem_ALPHA_Services");

                entity.Property(e => e.ItServicesProblemAutoAccount).HasColumnName("IT_Services_Problem_AutoAccount");

                entity.Property(e => e.ItServicesProblemFileSharingService).HasColumnName("IT_Services_Problem_File_Sharing_Service");

                entity.Property(e => e.ItServicesProblemIfOtherPleaseSpecify).HasColumnName("IT_Services_Problem_If_Other_Please_Specify");

                entity.Property(e => e.ItServicesProblemInternetService).HasColumnName("IT_Services_Problem_Internet_Service");

                entity.Property(e => e.ItServicesProblemMicrosoftServices).HasColumnName("IT_Services_Problem_Microsoft_Services");

                entity.Property(e => e.ItServicesProblemNetworkConnectivity).HasColumnName("IT_Services_Problem_Network_Connectivity");

                entity.Property(e => e.ItServicesProblemPortalServices).HasColumnName("IT_Services_Problem_Portal_Services");

                entity.Property(e => e.ItServicesProblemPrintingPlottingScanningCopying).HasColumnName("IT_Services_Problem_Printing_Plotting_Scanning_Copying");

                entity.Property(e => e.ItServicesProblemVideoConferenceSystems).HasColumnName("IT_Services_Problem_Video_Conference_Systems");

                entity.Property(e => e.ItServicesProblemVpnServices).HasColumnName("IT_Services_Problem_VPN_Services");

                entity.Property(e => e.ItSupportAskingForHelp).HasColumnName("IT_support_asking_for_help");

                entity.Property(e => e.ProblemsOrConcerns)
                    .HasColumnName("Problems_Or_Concerns")
                    .HasMaxLength(2000);

                entity.Property(e => e.RateFollowingItSolutionsAisCostControlModule).HasColumnName("Rate_following_IT_solutions_AIS_Cost_Control_Module");

                entity.Property(e => e.RateFollowingItSolutionsAisProcurementModule).HasColumnName("Rate_following_IT_solutions_AIS_Procurement_Module");

                entity.Property(e => e.RateFollowingItSolutionsAisWorkshopModule).HasColumnName("Rate_following_IT_solutions_AIS_workshop_Module");

                entity.Property(e => e.RateFollowingItSolutionsAlphaFinancialModules).HasColumnName("Rate_following_IT_solutions_ALPHA_Financial_Modules");

                entity.Property(e => e.RateFollowingItSolutionsAutoAccountSolution).HasColumnName("Rate_following_IT_solutions_Auto_Account_solution");

                entity.Property(e => e.RateFollowingItSolutionsCloudSolutions).HasColumnName("Rate_following_IT_solutions_Cloud_solutions");

                entity.Property(e => e.RateFollowingItSolutionsHahPortal).HasColumnName("Rate_following_IT_solutions_HAH_PORTAL");

                entity.Property(e => e.RateFollowingItSolutionsHitsHrSystem).HasColumnName("Rate_following_IT_solutions_HITS_HR_System");

                entity.Property(e => e.RateFollowingItSolutionsInternetAndNetworkConnectivity).HasColumnName("Rate_following_IT_solutions_Internet_and_Network_Connectivity");

                entity.Property(e => e.RateFollowingItSolutionsMazayaHrSystem).HasColumnName("Rate_following_IT_solutions_MAZAYA_HR_System");

                entity.Property(e => e.RateFollowingItSolutionsVideoConferenceSystemsWebEx).HasColumnName("Rate_following_IT_solutions_Video_Conference_Systems_WebEx");

                entity.Property(e => e.RateItSupportProblemSolving).HasColumnName("Rate_IT_support_Problem_Solving");

                entity.Property(e => e.RateItSupportResolutionTime).HasColumnName("Rate_IT_support_Resolution_Time");

                entity.Property(e => e.RateItSupportResponseEtiquette).HasColumnName("Rate_IT_support_Response_Etiquette");

                entity.Property(e => e.RateItSupportResponseTime).HasColumnName("Rate_IT_support_Response_Time");

                entity.Property(e => e.RateItSupportStaffAreSupportive).HasColumnName("Rate_IT_support_Staff_are_supportive");

                entity.Property(e => e.RateItSupportStaffFeedbackAfterCaseResolution).HasColumnName("Rate_IT_support_Staff_Feedback_after_case_resolution");

                entity.Property(e => e.RateItSupportStaffKnowledge).HasColumnName("Rate_IT_support_Staff_Knowledge");

                entity.Property(e => e.Suggestions).HasMaxLength(2000);

                entity.Property(e => e.SupportHotlineResolutionTime).HasColumnName("Support_Hotline_Resolution_Time");

                entity.Property(e => e.SupportHotlineResponseEtiquette).HasColumnName("Support_Hotline_Response_Etiquette");

                entity.Property(e => e.SupportHotlineResponseTime).HasColumnName("Support_Hotline_Response_Time");

                entity.Property(e => e.SurveyId).HasColumnName("Survey_ID");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_Hr_Code")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TableName>(entity =>
            {
                entity.HasKey(e => e.TableName1);

                entity.Property(e => e.TableName1)
                    .HasColumnName("TableName")
                    .HasMaxLength(220)
                    .ValueGeneratedNever();

                entity.Property(e => e.ArName).HasMaxLength(220);

                entity.Property(e => e.EnName).HasMaxLength(220);
            });

            modelBuilder.Entity<TableNameBasicId>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("TableName_BasicID");

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.DisplayField).HasMaxLength(100);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TableNameId>(entity =>
            {
                entity.HasKey(e => e.Serl)
                    .HasName("PK_TableName_ID_1");

                entity.ToTable("TableName_ID");

                entity.HasIndex(e => e.TableName)
                    .HasName("IX_TableName_ID")
                    .IsUnique();

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.DisplayField)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TableNameSettingId>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("TableName_SettingID");

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TableNameTrx>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("TableName_Trx");

                entity.HasIndex(e => e.TableName)
                    .HasName("IX_TableName_Trx")
                    .IsUnique();

                entity.Property(e => e.Serl).ValueGeneratedNever();

                entity.Property(e => e.Condition).HasMaxLength(200);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TalentAddTopic>(entity =>
            {
                entity.HasKey(e => e.TransId);

                entity.ToTable("Talent_AddTopic");

                entity.Property(e => e.TransId).HasColumnName("Trans_ID");

                entity.Property(e => e.CauseOfSpeciality).HasColumnName("Cause_of_Speciality");

                entity.Property(e => e.ClientId).HasColumnName("Client_ID");

                entity.Property(e => e.CountryId).HasColumnName("Country_ID");

                entity.Property(e => e.CyclePhaseId).HasColumnName("CyclePhase_ID");

                entity.Property(e => e.DepId).HasColumnName("Dep_ID");

                entity.Property(e => e.DetailedSequence).HasColumnName("Detailed_Sequence");

                entity.Property(e => e.EntryId).HasColumnName("Entry_ID");

                entity.Property(e => e.FileAttached).HasMaxLength(200);

                entity.Property(e => e.FinalEdit).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpactCost).HasColumnName("Impact_Cost");

                entity.Property(e => e.ImpactTime).HasColumnName("Impact_Time");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_user")
                    .HasMaxLength(50);

                entity.Property(e => e.KeyMaterial).HasColumnName("Key_Material");

                entity.Property(e => e.KeyPlant).HasColumnName("Key_Plant");

                entity.Property(e => e.LessonLearnedCategoryId).HasColumnName("LessonLearnedCategory_ID");

                entity.Property(e => e.MaterialDescription).HasColumnName("Material_Description");

                entity.Property(e => e.MaterialStorage).HasColumnName("Material_Storage");

                entity.Property(e => e.MaterialType).HasColumnName("Material_Type");

                entity.Property(e => e.PhotoAttached)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Default.jpg')");

                entity.Property(e => e.PostView).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RecommendedActions).HasColumnName("Recommended_Actions");

                entity.Property(e => e.Refemail).HasMaxLength(50);

                entity.Property(e => e.Refperson).HasMaxLength(50);

                entity.Property(e => e.Reftitle).HasColumnName("reftitle");

                entity.Property(e => e.RegionId).HasColumnName("Region_ID");

                entity.Property(e => e.RelatedBoqItem).HasColumnName("Related_BOQ_Item");

                entity.Property(e => e.ResultCategoryId).HasColumnName("ResultCategory_ID");

                entity.Property(e => e.ScopeId).HasColumnName("Scope_ID");

                entity.Property(e => e.SpecialAssignedManpower).HasColumnName("Special_Assigned_Manpower");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.Property(e => e.SubmittalProcedures).HasColumnName("Submittal_Procedures");

                entity.Property(e => e.TagId).HasColumnName("Tag_ID");

                entity.Property(e => e.TopicBody).HasColumnName("Topic_body");

                entity.Property(e => e.UpdDate)
                    .HasColumnName("Upd_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdUser)
                    .HasColumnName("Upd_user")
                    .HasMaxLength(50);

                entity.Property(e => e.VideoAttached)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Default.jpg')");

                entity.Property(e => e.WhatDidntGoAsWell).HasColumnName("What_Didnt_Go_As_Well");

                entity.Property(e => e.WhatWentWell).HasColumnName("What_Went_Well");

                entity.Property(e => e.WorkflowStep).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TalentClient>(entity =>
            {
                entity.HasKey(e => e.ClientId);

                entity.ToTable("Talent_Client");

                entity.Property(e => e.ClientId).HasColumnName("Client_ID");

                entity.Property(e => e.ClientName)
                    .HasColumnName("Client_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.ToTable("Talent_Country");

                entity.Property(e => e.CountryId).HasColumnName("Country_ID");

                entity.Property(e => e.CountryName)
                    .HasColumnName("Country_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentCyclePhase>(entity =>
            {
                entity.HasKey(e => e.CyclePhaseId);

                entity.ToTable("Talent_CyclePhase");

                entity.Property(e => e.CyclePhaseId).HasColumnName("CyclePhase_ID");

                entity.Property(e => e.CyclePhaseName)
                    .HasColumnName("CyclePhase_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentDepartment>(entity =>
            {
                entity.HasKey(e => e.DepId);

                entity.ToTable("Talent_Department");

                entity.Property(e => e.DepId).HasColumnName("Dep_ID");

                entity.Property(e => e.DepName)
                    .HasColumnName("Dep_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentEntryType>(entity =>
            {
                entity.HasKey(e => e.EntryId);

                entity.ToTable("Talent_EntryType");

                entity.Property(e => e.EntryId).HasColumnName("Entry_ID");

                entity.Property(e => e.EntryName)
                    .HasColumnName("Entry_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentLessonLearnedCategory>(entity =>
            {
                entity.HasKey(e => e.LessonLearnedCategoryId);

                entity.ToTable("Talent_LessonLearnedCategory");

                entity.Property(e => e.LessonLearnedCategoryId).HasColumnName("LessonLearnedCategory_ID");

                entity.Property(e => e.LessonLearnedCategoryName)
                    .HasColumnName("LessonLearnedCategory_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Talent_Log");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.ActionItem).HasColumnName("Action_Item");

                entity.Property(e => e.ActionState)
                    .HasColumnName("Action_State")
                    .HasMaxLength(50);

                entity.Property(e => e.ActionValue).HasColumnName("Action_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserEmail)
                    .HasColumnName("User_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentLogSearch>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Talent_LogSearch");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.LogDate)
                    .HasColumnName("Log_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LogSearchName)
                    .HasColumnName("Log_SearchName")
                    .HasMaxLength(50);

                entity.Property(e => e.TagId).HasColumnName("Tag_ID");

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentProjectType>(entity =>
            {
                entity.HasKey(e => e.ProTypId);

                entity.ToTable("Talent_ProjectType");

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");

                entity.Property(e => e.ProTypName)
                    .HasColumnName("ProTyp_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentRegion>(entity =>
            {
                entity.HasKey(e => e.RegionId);

                entity.ToTable("Talent_Region");

                entity.Property(e => e.RegionId).HasColumnName("Region_ID");

                entity.Property(e => e.RegionName)
                    .HasColumnName("Region_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentResultCategory>(entity =>
            {
                entity.HasKey(e => e.ResultCategoryId);

                entity.ToTable("Talent_ResultCategory");

                entity.Property(e => e.ResultCategoryId).HasColumnName("ResultCategory_ID");

                entity.Property(e => e.ResultCategoryName)
                    .HasColumnName("ResultCategory_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentScope>(entity =>
            {
                entity.HasKey(e => e.ScopeId);

                entity.ToTable("Talent_Scope");

                entity.Property(e => e.ScopeId).HasColumnName("Scope_ID");

                entity.Property(e => e.ScopeName)
                    .HasColumnName("Scope_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentTags>(entity =>
            {
                entity.HasKey(e => e.TagId);

                entity.ToTable("Talent_Tags");

                entity.Property(e => e.TagId).HasColumnName("Tag_ID");

                entity.Property(e => e.TagName)
                    .HasColumnName("Tag_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<TalentUsers>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("Talent_Users");

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.Property(e => e.AssestHrCode)
                    .HasColumnName("Assest_HrCode")
                    .HasMaxLength(50);

                entity.Property(e => e.FinalEdit).HasDefaultValueSql("((0))");

                entity.Property(e => e.TalentTeaam).HasDefaultValueSql("((0))");

                entity.Property(e => e.Technicalteem).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserEmail)
                    .HasColumnName("User_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .HasColumnName("User_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentUsersDelegat>(entity =>
            {
                entity.HasKey(e => e.DelegatId)
                    .HasName("PK_Talent_Delegat");

                entity.ToTable("Talent_Users_Delegat");

                entity.Property(e => e.DelegatId).HasColumnName("Delegat_ID");

                entity.Property(e => e.AssestHrCode)
                    .HasColumnName("Assest_HrCode")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TalentWorkFlow>(entity =>
            {
                entity.HasKey(e => e.WfId);

                entity.ToTable("Talent_WorkFlow");

                entity.Property(e => e.WfId).HasColumnName("WF_ID");

                entity.Property(e => e.ActionDate)
                    .HasColumnName("Action_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionState).HasColumnName("Action_State");

                entity.Property(e => e.ActionUser)
                    .HasColumnName("Action_User")
                    .HasMaxLength(50);

                entity.Property(e => e.AssignTo).HasMaxLength(50);

                entity.Property(e => e.Check1Comm).HasMaxLength(500);

                entity.Property(e => e.Check2Comm).HasMaxLength(500);

                entity.Property(e => e.Check3Comm).HasMaxLength(500);

                entity.Property(e => e.Check4Comm).HasMaxLength(500);

                entity.Property(e => e.Check5Comm).HasMaxLength(500);

                entity.Property(e => e.Check6Comm).HasMaxLength(500);

                entity.Property(e => e.Check7Comm).HasMaxLength(500);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.StepActive).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TalentWorkFlowSetting>(entity =>
            {
                entity.ToTable("Talent_WorkFlow_Setting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DepId).HasColumnName("Dep_ID");

                entity.Property(e => e.EntryId).HasColumnName("Entry_ID");

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");

                entity.Property(e => e.ScopeId).HasColumnName("Scope_ID");

                entity.Property(e => e.UserHrcode)
                    .HasColumnName("User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TbusinessType>(entity =>
            {
                entity.HasKey(e => e.BusinessTypeId);

                entity.ToTable("TBusinessType");

                entity.Property(e => e.BusinessTypeId)
                    .HasColumnName("BusinessType_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.BusinessTypeName).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Tclient>(entity =>
            {
                entity.HasKey(e => e.ClientId);

                entity.ToTable("TClient");

                entity.Property(e => e.ClientId)
                    .HasColumnName("Client_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientName)
                    .HasColumnName("Client_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Owner).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Tconsultant>(entity =>
            {
                entity.HasKey(e => e.ConsultantId);

                entity.ToTable("TConsultant");

                entity.Property(e => e.ConsultantId)
                    .HasColumnName("Consultant_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ConsultantName)
                    .HasColumnName("Consultant_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MedHigh).HasColumnName("Med_High");

                entity.Property(e => e.MedLow).HasColumnName("Med_Low");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Tcontinent>(entity =>
            {
                entity.HasKey(e => e.ContinentId);

                entity.ToTable("TContinent");

                entity.Property(e => e.ContinentId)
                    .HasColumnName("Continent_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.ContinentArName)
                    .HasColumnName("Continent_ArName")
                    .HasMaxLength(50);

                entity.Property(e => e.ContinentEnName)
                    .HasColumnName("Continent_EnName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tcost>(entity =>
            {
                entity.HasKey(e => e.CostId);

                entity.ToTable("TCost");

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(100)
                    .ValueGeneratedNever();

                entity.Property(e => e.CostName).HasMaxLength(500);

                entity.Property(e => e.CostNameE)
                    .HasColumnName("CostName_e")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TcostType>(entity =>
            {
                entity.HasKey(e => e.CostTypeId);

                entity.ToTable("TCostType");

                entity.Property(e => e.CostTypeId)
                    .HasColumnName("CostType_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CostTypeName).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<Tcountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.ToTable("TCountry");

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.ContinentId)
                    .HasColumnName("Continent_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CountryArName)
                    .HasColumnName("Country_ArName")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryEnName)
                    .HasColumnName("Country_EnName")
                    .HasMaxLength(50);

                entity.Property(e => e.CountryIsocode)
                    .HasColumnName("Country_ISOcode")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Continent)
                    .WithMany(p => p.Tcountry)
                    .HasForeignKey(d => d.ContinentId)
                    .HasConstraintName("FK_TCountry_TContinent");
            });

            modelBuilder.Entity<Tdriver>(entity =>
            {
                entity.HasKey(e => e.DriverId);

                entity.ToTable("TDriver");

                entity.Property(e => e.DriverId)
                    .HasColumnName("Driver_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DriverName)
                    .IsRequired()
                    .HasColumnName("Driver_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.HrCode)
                    .HasColumnName("Hr_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Idcard)
                    .HasColumnName("IDCard")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JobId)
                    .HasColumnName("Job_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.LicenseEndDate).HasColumnType("datetime");

                entity.Property(e => e.LicenseGrade).HasMaxLength(500);

                entity.Property(e => e.LicenseNo).HasMaxLength(500);

                entity.Property(e => e.MobileNo).HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ResponsableAboutMoreThanEq).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkLocation).HasMaxLength(500);

                entity.Property(e => e.WorkReceiptDate)
                    .HasColumnName("Work_Receipt_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TEMPHATAttend>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.ToTable("TEMPHAT_Attend");
                entity.Property(e => e.EmployeeNo).HasMaxLength(14);

                entity.Property(e => e.Date)
                   .HasColumnName("Date")
                   .HasColumnType("datetime");
                entity.Property(e => e.TimeIn).HasColumnName("TimeIn");
                entity.Property(e => e.Temperature).HasColumnName("Temperature");
                entity.Property(e => e.TemperatureTime).HasColumnName("Temperature_Time");
                entity.Property(e => e.TimeOut).HasColumnName("TimeOut");
                entity.Property(e => e.In_User).HasColumnName("In_User");
            });

            modelBuilder.Entity<TEMPHATEmployee>(entity =>
            {
                entity.HasKey(e => e.EmployeeNo);
                entity.Property(e => e.EmployeeNo).HasColumnName("EmployeeNo");
                entity.ToTable("TEMPHAT_Employee");
                entity.Property(e => e.Name).HasMaxLength(200);
                entity.Property(e => e.HRCode).HasMaxLength(50);
                entity.Property(e => e.IsEmp).HasColumnName("IsEmp");
                entity.Property(e => e.InDate)
                   .HasColumnName("In_Date")
                   .HasColumnType("datetime");
                entity.Property(e => e.InUser).HasColumnName("In_User");
            });

            modelBuilder.Entity<TEMPHATUsers>(entity =>
            {
                entity.HasKey(e => e.ID);
                entity.Property(e => e.ID).HasColumnName("ID");
                entity.ToTable("TEMPHAT_Users");
                entity.Property(e => e.ProjectID).HasColumnName("ProjectID");
                entity.Property(e => e.UserName).HasColumnName("User_Name").HasMaxLength(50);
                entity.Property(e => e.UserEmail).HasColumnName("User_Email").HasMaxLength(50);
                entity.Property(e => e.UserHRCode).HasColumnName("User_HRCode").HasMaxLength(50);
                entity.Property(e => e.UserPassword).HasColumnName("User_Password").HasMaxLength(50);
                entity.Property(e => e.InDate)
                   .HasColumnName("In_Date")
                   .HasColumnType("datetime");
                entity.Property(e => e.InUser).HasColumnName("In_User");
            });


            modelBuilder.Entity<TempId>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("tempID");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Idnum)
                    .HasColumnName("IDNum")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Temphiredate>(entity =>
            {
                entity.ToTable("temphiredate");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Tempw>(entity =>
            {
                entity.ToTable("tempw");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DesType).HasMaxLength(500);

                entity.Property(e => e.Typeowork).HasMaxLength(500);
            });

            modelBuilder.Entity<TenderCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.ToTable("Tender_Country");

                entity.Property(e => e.CountryId).HasColumnName("Country_ID");

                entity.Property(e => e.CountryName)
                    .HasColumnName("Country_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderD>(entity =>
            {
                entity.HasKey(e => e.DetId);

                entity.ToTable("Tender_D");

                entity.Property(e => e.DetId).HasColumnName("Det_ID");

                entity.Property(e => e.TenderId).HasColumnName("Tender_ID");

                entity.Property(e => e.TenderTransaction).HasColumnName("Tender_Transaction");

                entity.Property(e => e.TransDate)
                    .HasColumnName("Trans_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransStatus).HasColumnName("Trans_Status");
            });

            modelBuilder.Entity<TenderDepartment>(entity =>
            {
                entity.HasKey(e => e.DepartmentId);

                entity.ToTable("Tender_Department");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.DepartmentName)
                    .HasColumnName("Department_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderDistrict>(entity =>
            {
                entity.HasKey(e => e.DistrictId);

                entity.ToTable("Tender_District");

                entity.Property(e => e.DistrictId).HasColumnName("District_ID");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderEngineer>(entity =>
            {
                entity.HasKey(e => e.EnginerrId);

                entity.ToTable("Tender_Engineer");

                entity.Property(e => e.EnginerrId).HasColumnName("Enginerr_ID");

                entity.Property(e => e.EngineerName)
                    .HasColumnName("Engineer_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TenderM>(entity =>
            {
                entity.HasKey(e => e.TenderId);

                entity.ToTable("Tender_M");

                entity.Property(e => e.TenderId).HasColumnName("Tender_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_user")
                    .HasMaxLength(50);

                entity.Property(e => e.InvitatiomNo).HasColumnName("Invitatiom_no");

                entity.Property(e => e.Lang).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasColumnName("Project_Name");

                entity.Property(e => e.RemarksUpdate).HasColumnName("Remarks_update");

                entity.Property(e => e.ResponsibleEngineer).HasColumnName("Responsible_Engineer");

                entity.Property(e => e.RowColor)
                    .HasColumnName("Row_Color")
                    .HasMaxLength(50);

                entity.Property(e => e.SubmissionColor)
                    .HasColumnName("submission_color")
                    .HasMaxLength(50);

                entity.Property(e => e.SubmissionDate)
                    .HasColumnName("Submission_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TenderCategory).HasColumnName("Tender_Category");

                entity.Property(e => e.TenderDate)
                    .HasColumnName("Tender_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TenderNo).HasColumnName("Tender_No");

                entity.Property(e => e.TenderPhase).HasColumnName("Tender_Phase");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_user")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderProjectCategories>(entity =>
            {
                entity.HasKey(e => e.TenderProjCategoriesId);

                entity.ToTable("Tender_Project_Categories");

                entity.Property(e => e.TenderProjCategoriesId).HasColumnName("Tender_Proj_categories_ID");

                entity.Property(e => e.TenderProjCategoriesName)
                    .HasColumnName("Tender_Proj_categories_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderProjectPhases>(entity =>
            {
                entity.HasKey(e => e.TenderProjPhasesId);

                entity.ToTable("Tender_Project_Phases");

                entity.Property(e => e.TenderProjPhasesId).HasColumnName("Tender_Proj_Phases_ID");

                entity.Property(e => e.TenderProjPhasesName)
                    .HasColumnName("Tender_Proj_Phases_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TenderRemarks>(entity =>
            {
                entity.HasKey(e => e.RemarkId);

                entity.ToTable("Tender_Remarks");

                entity.Property(e => e.RemarkId).HasColumnName("remark_ID");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(4000);

                entity.Property(e => e.Remarksupdate)
                    .HasColumnName("remarksupdate")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<TenderStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("Tender_Status");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.StatusName)
                    .HasColumnName("Status_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderTransactions>(entity =>
            {
                entity.HasKey(e => e.TenderTransactionId);

                entity.ToTable("Tender_Transactions");

                entity.Property(e => e.TenderTransactionId).HasColumnName("Tender_transaction_ID");

                entity.Property(e => e.TenderTransactionName)
                    .HasColumnName("Tender_transaction_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TenderUsers>(entity =>
            {
                entity.HasKey(e => e.TendId);

                entity.ToTable("Tender_Users");

                entity.Property(e => e.TendId).HasColumnName("Tend_ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.TendUserHrcode)
                    .HasColumnName("Tend_User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tequipement>(entity =>
            {
                entity.HasKey(e => e.EquipementId);

                entity.ToTable("TEquipement");

                entity.Property(e => e.EquipementId)
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetTag).HasMaxLength(20);

                entity.Property(e => e.CarLicenseEndDate).HasColumnType("datetime");

                entity.Property(e => e.ChaseeNum).HasMaxLength(100);

                entity.Property(e => e.ControlBoard).HasMaxLength(100);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DriverId)
                    .HasColumnName("Driver_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.EngineArrangmentNo)
                    .HasColumnName("EngineArrangment_No")
                    .HasMaxLength(500);

                entity.Property(e => e.EngineModel).HasMaxLength(100);

                entity.Property(e => e.EngineNo).HasMaxLength(100);

                entity.Property(e => e.EngineSn)
                    .HasColumnName("Engine_SN")
                    .HasMaxLength(500);

                entity.Property(e => e.EquipementTypeId)
                    .IsRequired()
                    .HasColumnName("EquipementTypeID")
                    .HasMaxLength(20);

                entity.Property(e => e.EquipmentArrangmentNo)
                    .HasColumnName("Equipment_Arrangment_No")
                    .HasMaxLength(500);

                entity.Property(e => e.EquipmentSn)
                    .HasColumnName("Equipment_SN")
                    .HasMaxLength(500);

                entity.Property(e => e.FuelType).HasMaxLength(100);

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.KmH)
                    .HasColumnName("KM_h")
                    .HasMaxLength(100);

                entity.Property(e => e.ManfctureDate).HasMaxLength(100);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Model).HasMaxLength(100);

                entity.Property(e => e.MonthlyRentalValue).HasColumnName("Monthly_Rental_Value");

                entity.Property(e => e.NetBookValue).HasColumnName("NetBook_Value");

                entity.Property(e => e.OldNum).HasMaxLength(100);

                entity.Property(e => e.OptionsAir).HasColumnName("Options_Air");

                entity.Property(e => e.OptionsAlert).HasColumnName("Options_Alert");

                entity.Property(e => e.OptionsCassete).HasColumnName("Options_Cassete");

                entity.Property(e => e.OptionsCenter).HasColumnName("Options_Center");

                entity.Property(e => e.OptionsSpeaker).HasColumnName("Options_Speaker");

                entity.Property(e => e.Power).HasMaxLength(100);

                entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

                entity.Property(e => e.TransmissinoArrangmentNo)
                    .HasColumnName("TransmissinoArrangment_No")
                    .HasMaxLength(500);

                entity.Property(e => e.TransmissionNum).HasMaxLength(100);

                entity.Property(e => e.TransmissionSnNo)
                    .HasColumnName("Transmission_SN_No")
                    .HasMaxLength(500);

                entity.Property(e => e.YearMade).HasMaxLength(100);
            });

            modelBuilder.Entity<TequipementRecommendedItemD>(entity =>
            {
                entity.HasKey(e => new { e.EquipementId, e.ItemId })
                    .HasName("PK_Equipement_Recommended_Item_d");

                entity.ToTable("TEquipement_Recommended_Item_d");

                entity.Property(e => e.EquipementId)
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.Equipement)
                    .WithMany(p => p.TequipementRecommendedItemD)
                    .HasForeignKey(d => d.EquipementId)
                    .HasConstraintName("FK_TEquipement_Recommended_Item_d_TEquipement");
            });

            modelBuilder.Entity<TequipmementD>(entity =>
            {
                entity.HasKey(e => new { e.EquipementId, e.RecordId });

                entity.ToTable("TEquipmement_d");

                entity.Property(e => e.EquipementId)
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DriverIdFrom)
                    .HasColumnName("Driver_ID_From")
                    .HasMaxLength(20);

                entity.Property(e => e.DriverIdTo)
                    .HasColumnName("Driver_ID_To")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectIdFrom)
                    .IsRequired()
                    .HasColumnName("Project_ID_From")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectIdTo)
                    .IsRequired()
                    .HasColumnName("Project_ID_To")
                    .HasMaxLength(20);

                entity.Property(e => e.RecipientNote)
                    .HasColumnName("Recipient_Note")
                    .HasMaxLength(500);

                entity.Property(e => e.SiteNote)
                    .HasColumnName("Site_Note")
                    .HasMaxLength(500);

                entity.HasOne(d => d.Equipement)
                    .WithMany(p => p.TequipmementD)
                    .HasForeignKey(d => d.EquipementId)
                    .HasConstraintName("FK_TEquipmement_d_TEquipement");
            });

            modelBuilder.Entity<TequipmementDriversD>(entity =>
            {
                entity.HasKey(e => new { e.EquipementId, e.DriverId });

                entity.ToTable("TEquipmement_Drivers_d");

                entity.Property(e => e.EquipementId)
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DriverId)
                    .HasColumnName("Driver_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);
            });

            modelBuilder.Entity<Test>(entity =>
            {
                entity.ToTable("test");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TestCars>(entity =>
            {
                entity.HasKey(e => e.TestId)
                    .HasName("PK_TestTable");

                entity.Property(e => e.TestId)
                    .HasColumnName("TestID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.TestModel).HasMaxLength(10);

                entity.Property(e => e.TestMotor).HasMaxLength(50);

                entity.Property(e => e.TestName).HasMaxLength(50);
            });

            modelBuilder.Entity<TestEmpD>(entity =>
            {
                entity.HasKey(e => e.EmpId);

                entity.ToTable("TestEmp_D");

                entity.Property(e => e.EmpId)
                    .HasColumnName("EmpID")
                    .HasMaxLength(5)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmpName).HasMaxLength(50);

                entity.Property(e => e.EmpPhone).HasMaxLength(10);

                entity.Property(e => e.TestId)
                    .HasColumnName("TestID")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Test)
                    .WithMany(p => p.TestEmpD)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("FK_TestEmp_D_TestCars");
            });

            modelBuilder.Entity<TestHatEmp>(entity =>
            {
                entity.HasKey(e => e.RecrodNo);

                entity.Property(e => e.Birthdate)
                    .HasColumnName("birthdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dailyrate).HasColumnName("dailyrate");

                entity.Property(e => e.Empname)
                    .HasColumnName("empname")
                    .HasMaxLength(500);

                entity.Property(e => e.Exitdate)
                    .HasColumnName("exitdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Gps)
                    .HasColumnName("gps")
                    .HasMaxLength(50);

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasMaxLength(50);

                entity.Property(e => e.Idcard)
                    .HasColumnName("idcard")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobcode)
                    .HasColumnName("jobcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Project)
                    .HasColumnName("project")
                    .HasMaxLength(50);

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TestT1>(entity =>
            {
                entity.HasKey(e => e.OldNumer);

                entity.ToTable("test_t");

                entity.Property(e => e.OldNumer)
                    .HasColumnName("OLD_Numer")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Discipline).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkGroup)
                    .HasColumnName("Work_Group")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkPackageNew)
                    .HasColumnName("Work_Package_New")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Testt>(entity =>
            {
                entity.HasKey(e => e.SapCode);

                entity.ToTable("testt");

                entity.Property(e => e.SapCode).HasColumnName("SAP_code");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AlphaCode).HasColumnName("Alpha_Code");

                entity.Property(e => e.EMail)
                    .HasColumnName("E_Mail")
                    .HasMaxLength(255);

                entity.Property(e => e.MobilePhone)
                    .HasColumnName("Mobile_Phone")
                    .HasMaxLength(255);

                entity.Property(e => e.NameAr)
                    .HasColumnName("NameAR")
                    .HasMaxLength(255);

                entity.Property(e => e.NameEn)
                    .HasColumnName("NameEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Telephone).HasMaxLength(255);
            });

            modelBuilder.Entity<TitleCode>(entity =>
            {
                entity.HasKey(e => e.TitleId);

                entity.ToTable("Title_Code");

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Title).HasMaxLength(50);
            });

            modelBuilder.Entity<TjobOrderD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId, e.ItemId });

                entity.ToTable("TJobOrder_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Ava).HasColumnName("AVA");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TjobOrderD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TJobOrder_d_TJobOrder_m");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TjobOrderD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJobOrder_d_TSparePart");
            });

            modelBuilder.Entity<TjobOrderM>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("TJobOrder_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.Authorised).HasMaxLength(500);

                entity.Property(e => e.BadUsage).HasDefaultValueSql("((0))");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EquipementId)
                    .IsRequired()
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Inspector).HasMaxLength(500);

                entity.Property(e => e.JobOrderType).HasColumnName("JobOrder_Type");

                entity.Property(e => e.MajorRepair).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpStatus)
                    .HasColumnName("Op_Status")
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferred).HasMaxLength(500);

                entity.Property(e => e.ValExternal).HasColumnName("Val_External");

                entity.Property(e => e.ValInternal).HasColumnName("Val_Internal");

                entity.Property(e => e.ValMaterials).HasColumnName("Val_Materials");

                entity.Property(e => e.ValParts).HasColumnName("Val_Parts");

                entity.Property(e => e.ValTools).HasColumnName("Val_Tools");

                entity.Property(e => e.ValTotal).HasColumnName("Val_Total");

                entity.HasOne(d => d.Equipement)
                    .WithMany(p => p.TjobOrderM)
                    .HasForeignKey(d => d.EquipementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJobOrder_m_TEquipement");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TjobOrderM)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJobOrder_m_TProject");
            });

            modelBuilder.Entity<TjobOrderMaintainD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId });

                entity.ToTable("TJobOrder_Maintain_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Ava).HasColumnName("AVA");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TjobOrderMaintainD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TJobOrder_Maintain_d_TJobOrder_Maintain_m");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TjobOrderMaintainD)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_TJobOrder_Maintain_d_TWS_Item");
            });

            modelBuilder.Entity<TjobOrderMaintainM>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("TJobOrder_Maintain_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.Authorised).HasMaxLength(500);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EquipementId)
                    .IsRequired()
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Inspector).HasMaxLength(500);

                entity.Property(e => e.OpStatus)
                    .HasColumnName("Op_Status")
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferred).HasMaxLength(500);

                entity.Property(e => e.ValExternal).HasColumnName("Val_External");

                entity.Property(e => e.ValInternal).HasColumnName("Val_Internal");

                entity.Property(e => e.ValMaterials).HasColumnName("Val_Materials");

                entity.Property(e => e.ValParts).HasColumnName("Val_Parts");

                entity.Property(e => e.ValTools).HasColumnName("Val_Tools");

                entity.Property(e => e.ValTotal).HasColumnName("Val_Total");
            });

            modelBuilder.Entity<TndrCurrency>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.CurrencyId });

                entity.ToTable("TNDR_Currency");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.Descrp).HasMaxLength(500);
            });

            modelBuilder.Entity<TndrProjectInformation>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TNDR_Project_Information");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualCompletionDate)
                    .HasColumnName("Actual_Completion_Date")
                    .HasColumnType("date");

                entity.Property(e => e.BreakHours)
                    .HasColumnName("BREAK_HOURS")
                    .HasMaxLength(50);

                entity.Property(e => e.ClientLegalStructure).HasColumnName("Client_Legal_Structure");

                entity.Property(e => e.ContarctAmount).HasColumnName("CONTARCT_AMOUNT");

                entity.Property(e => e.ContractualCompletionDate)
                    .HasColumnName("Contractual_Completion_Date")
                    .HasColumnType("date");

                entity.Property(e => e.HacRoleAs).HasColumnName("HAC_Role_as");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LegalNameOfConsortiumOrJv)
                    .HasColumnName("Legal_Name_of_Consortium_or_JV")
                    .HasMaxLength(500);

                entity.Property(e => e.MainScopeOfWork).HasColumnName("Main_Scope_of_Work");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PartnersNames)
                    .HasColumnName("Partners_Names")
                    .HasMaxLength(500);

                entity.Property(e => e.ProjectActualDuration)
                    .HasColumnName("Project_Actual_Duration")
                    .HasMaxLength(10);

                entity.Property(e => e.ProjectActualStartDate)
                    .HasColumnName("Project_Actual_StartDate")
                    .HasColumnType("date");

                entity.Property(e => e.ProjectClassification).HasColumnName("Project_Classification");

                entity.Property(e => e.ProjectClassificationType).HasColumnName("Project_Classification_Type");

                entity.Property(e => e.ProjectContractualStartDate)
                    .HasColumnName("Project_Contractual_StartDate")
                    .HasColumnType("date");

                entity.Property(e => e.ProjectLogo).HasColumnType("image");

                entity.Property(e => e.ProjectPlannedDuration)
                    .HasColumnName("Project_Planned_Duration")
                    .HasMaxLength(50);

                entity.Property(e => e.TypeOContract).HasColumnName("Type_o_Contract");

                entity.Property(e => e.TypeOContractType).HasColumnName("Type_o_Contract_Type");

                entity.Property(e => e.WorkingHoursShifts)
                    .HasColumnName("Working_Hours_SHIFTS")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TndrProjectInformationDetail>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TNDR_Project_Information_Detail");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AdvancePayment)
                    .HasColumnName("Advance_Payment")
                    .HasMaxLength(50);

                entity.Property(e => e.AdvancePaymentRepaymentTerms)
                    .HasColumnName("Advance_Payment_repayment_terms")
                    .HasMaxLength(50);

                entity.Property(e => e.DefectsLiabilityPeriod)
                    .HasColumnName("Defects_Liability_Period")
                    .HasMaxLength(50);

                entity.Property(e => e.InterimPayments)
                    .HasColumnName("Interim_Payments")
                    .HasMaxLength(50);

                entity.Property(e => e.LastDateOfQueries)
                    .HasColumnName("Last_Date_of_Queries")
                    .HasColumnType("datetime");

                entity.Property(e => e.SiteVisitPreTenderMeeting)
                    .HasColumnName("Site_Visit_Pre_Tender_Meeting")
                    .HasMaxLength(500);

                entity.Property(e => e.TenderBond)
                    .HasColumnName("Tender_Bond")
                    .HasMaxLength(50);

                entity.Property(e => e.TenderBondValidity)
                    .HasColumnName("Tender_Bond_Validity")
                    .HasMaxLength(50);

                entity.Property(e => e.TenderClosingDate)
                    .HasColumnName("Tender_Closing_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TenderValidity)
                    .HasColumnName("Tender_Validity")
                    .HasColumnType("datetime");

                entity.Property(e => e.TimeForCompletion)
                    .HasColumnName("Time_for_Completion")
                    .HasColumnType("datetime");

                entity.Property(e => e.TypeOfContract)
                    .HasColumnName("Type_Of_Contract")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TndrTarea>(entity =>
            {
                entity.HasKey(e => new { e.AreaId, e.ProjectId })
                    .HasName("PK_TNDR_Area");

                entity.ToTable("TNDR_TArea");

                entity.Property(e => e.AreaId).HasColumnName("Area_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AreaName)
                    .HasColumnName("Area_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TndrTboqname>(entity =>
            {
                entity.HasKey(e => new { e.BoqId, e.ProjectId });

                entity.ToTable("TNDR_TBOQName");

                entity.Property(e => e.BoqId).HasColumnName("BOQ_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.BoqName)
                    .HasColumnName("BOQ_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TndrTbuilding>(entity =>
            {
                entity.HasKey(e => new { e.BuildingId, e.ProjectId });

                entity.ToTable("TNDR_TBuilding");

                entity.Property(e => e.BuildingId).HasColumnName("Building_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.BuildingName)
                    .HasColumnName("Building_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TndrTcategory>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("TNDR_TCategory");

                entity.Property(e => e.CatId)
                    .HasColumnName("Cat_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CatName)
                    .HasColumnName("Cat_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.DepId)
                    .IsRequired()
                    .HasColumnName("Dep_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TndrTdepartment>(entity =>
            {
                entity.HasKey(e => e.DepId);

                entity.ToTable("TNDR_TDepartment");

                entity.Property(e => e.DepId)
                    .HasColumnName("Dep_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DepName)
                    .HasColumnName("Dep_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TndrTdescription>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TNDR_TDescription");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.D1).HasMaxLength(2000);

                entity.Property(e => e.D10).HasMaxLength(2000);

                entity.Property(e => e.D11).HasMaxLength(2000);

                entity.Property(e => e.D12).HasMaxLength(2000);

                entity.Property(e => e.D13).HasMaxLength(2000);

                entity.Property(e => e.D14).HasMaxLength(2000);

                entity.Property(e => e.D15).HasMaxLength(2000);

                entity.Property(e => e.D16).HasMaxLength(2000);

                entity.Property(e => e.D17).HasMaxLength(2000);

                entity.Property(e => e.D18).HasMaxLength(2000);

                entity.Property(e => e.D19).HasMaxLength(2000);

                entity.Property(e => e.D2).HasMaxLength(2000);

                entity.Property(e => e.D20).HasMaxLength(2000);

                entity.Property(e => e.D3).HasMaxLength(2000);

                entity.Property(e => e.D4).HasMaxLength(2000);

                entity.Property(e => e.D5).HasMaxLength(2000);

                entity.Property(e => e.D6).HasMaxLength(2000);

                entity.Property(e => e.D7).HasMaxLength(2000);

                entity.Property(e => e.D8).HasMaxLength(2000);

                entity.Property(e => e.D9).HasMaxLength(2000);
            });

            modelBuilder.Entity<TndrTitemDescription>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TNDR_TItemDescription");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DescriptionNo)
                    .HasColumnName("Description_No")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TndrTitems>(entity =>
            {
                entity.HasKey(e => new { e.ItemNo, e.ProjectId });

                entity.ToTable("TNDR_TItems");

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AreaId).HasColumnName("Area_ID");

                entity.Property(e => e.BoqId).HasColumnName("BOQ_ID");

                entity.Property(e => e.BuildingId).HasColumnName("Building_ID");

                entity.Property(e => e.ClientCode).HasMaxLength(20);

                entity.Property(e => e.D1).HasMaxLength(2000);

                entity.Property(e => e.D10).HasMaxLength(2000);

                entity.Property(e => e.D11).HasMaxLength(2000);

                entity.Property(e => e.D12).HasMaxLength(2000);

                entity.Property(e => e.D13).HasMaxLength(2000);

                entity.Property(e => e.D14).HasMaxLength(2000);

                entity.Property(e => e.D15).HasMaxLength(2000);

                entity.Property(e => e.D16).HasMaxLength(2000);

                entity.Property(e => e.D17).HasMaxLength(2000);

                entity.Property(e => e.D18).HasMaxLength(2000);

                entity.Property(e => e.D19).HasMaxLength(2000);

                entity.Property(e => e.D2).HasMaxLength(2000);

                entity.Property(e => e.D20).HasMaxLength(2000);

                entity.Property(e => e.D3).HasMaxLength(2000);

                entity.Property(e => e.D4).HasMaxLength(2000);

                entity.Property(e => e.D5).HasMaxLength(2000);

                entity.Property(e => e.D6).HasMaxLength(2000);

                entity.Property(e => e.D7).HasMaxLength(2000);

                entity.Property(e => e.D8).HasMaxLength(2000);

                entity.Property(e => e.D9).HasMaxLength(2000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DesType)
                    .HasColumnName("Des_Type")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.SiteId).HasColumnName("Site_ID");

                entity.Property(e => e.Unit).HasMaxLength(20);
            });

            modelBuilder.Entity<TndrTitemsCatPermissionD>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.DepId, e.ProjectId, e.SubCatId });

                entity.ToTable("TNDR_TItems_Cat_Permission_d");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.DepId)
                    .HasColumnName("Dep_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SubCatId)
                    .HasColumnName("SubCat_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.TndrTitemsCatPermissionM)
                    .WithMany(p => p.TndrTitemsCatPermissionD)
                    .HasForeignKey(d => new { d.UserId, d.DepId, d.ProjectId })
                    .HasConstraintName("FK_TNDR_TItems_Cat_Permission_d_TNDR_TItems_Cat_Permission_m");
            });

            modelBuilder.Entity<TndrTitemsCatPermissionM>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.DepId, e.ProjectId })
                    .HasName("PK_TNDR_TItems_Cat_Permission");

                entity.ToTable("TNDR_TItems_Cat_Permission_m");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.DepId)
                    .HasColumnName("Dep_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TndrTitemsSetCategory>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.ItemNo, e.ProjectId, e.DepId })
                    .HasName("PK_TNDR_TItems_SetCategory_1");

                entity.ToTable("TNDR_TItems_SetCategory");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DepId)
                    .HasColumnName("Dep_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.BasicCurrencyUsd).HasColumnName("Basic_Currency_USD");

                entity.Property(e => e.BasicCustomSalesFees).HasColumnName("Basic_Custom_Sales_Fees");

                entity.Property(e => e.BasicMaintainanceSparePartsWarranty).HasColumnName("Basic_Maintainance_Spare_Parts_Warranty");

                entity.Property(e => e.BasicSupplyIn).HasColumnName("Basic_Supply_In");

                entity.Property(e => e.BasicTotalUnitBasicMaterialSar).HasColumnName("Basic_Total_Unit_Basic_Material_SAR");

                entity.Property(e => e.BasicTotalUnitBasicMaterialUsd).HasColumnName("Basic_Total_Unit_Basic_Material_USD");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ElecAccessories).HasColumnName("ELEC_Accessories");

                entity.Property(e => e.ElecCableTray).HasColumnName("ELEC_Cable_Tray");

                entity.Property(e => e.ElecCablesWires).HasColumnName("ELEC_Cables_Wires");

                entity.Property(e => e.ElecCivilWorks).HasColumnName("ELEC_Civil_Works");

                entity.Property(e => e.ElecCoduits).HasColumnName("ELEC_Coduits");

                entity.Property(e => e.ElecMechWorks).HasColumnName("ELEC_Mech_Works");

                entity.Property(e => e.ElecTotalUnitAuxiliaryMaterialsItemsElec).HasColumnName("ELEC_Total_Unit_Auxiliary_Materials_items_Elec");

                entity.Property(e => e.ElecTransportation).HasColumnName("ELEC_Transportation");

                entity.Property(e => e.ElecWastage).HasColumnName("ELEC_Wastage");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.IndustrialHardness).HasColumnName("Industrial_Hardness");

                entity.Property(e => e.IndustrialInsulation).HasColumnName("Industrial_Insulation");

                entity.Property(e => e.IndustrialNdt).HasColumnName("Industrial_NDT");

                entity.Property(e => e.IndustrialPainting).HasColumnName("Industrial_Painting");

                entity.Property(e => e.IndustrialPmi).HasColumnName("Industrial_PMI");

                entity.Property(e => e.IndustrialPreheating).HasColumnName("Industrial_Preheating");

                entity.Property(e => e.IndustrialPt).HasColumnName("Industrial_PT");

                entity.Property(e => e.IndustrialPwht).HasColumnName("Industrial_PWHT");

                entity.Property(e => e.IndustrialRefractory).HasColumnName("Industrial_Refractory");

                entity.Property(e => e.IndustrialTotalUnitIndustrial).HasColumnName("Industrial_Total_Unit_Industrial");

                entity.Property(e => e.MechAccessories).HasColumnName("MECH_Accessories");

                entity.Property(e => e.MechCivilWorks).HasColumnName("MECH_Civil_Works");

                entity.Property(e => e.MechControl).HasColumnName("MECH_Control");

                entity.Property(e => e.MechDampers).HasColumnName("MECH_Dampers");

                entity.Property(e => e.MechElectricalConnection).HasColumnName("MECH_Electrical_Connection");

                entity.Property(e => e.MechHookUpAndValves).HasColumnName("MECH_Hook_Up_And_Valves");

                entity.Property(e => e.MechMaterialTransp).HasColumnName("MECH_Material_Transp");

                entity.Property(e => e.MechSupportsSiesmec).HasColumnName("MECH_Supports_Siesmec");

                entity.Property(e => e.MechTotalUnitAuxiliaryMaterialsItemsMech).HasColumnName("MECH_Total_Unit_Auxiliary_Materials_items_MECH");

                entity.Property(e => e.MechVsd).HasColumnName("MECH_VSD");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.SubCatId)
                    .HasColumnName("SubCat_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SubcontractorSar).HasColumnName("Subcontractor_SAR");

                entity.Property(e => e.SubcontractorUsd).HasColumnName("Subcontractor_USD");

                entity.Property(e => e.WorkManshipConstructionEquip).HasColumnName("WorkManship_Construction_Equip");

                entity.Property(e => e.WorkManshipManPowerLabor).HasColumnName("WorkManship_Man_Power_Labor");

                entity.Property(e => e.WorkManshipMhr).HasColumnName("WorkManship_MHR");

                entity.Property(e => e.WorkManshipTestingAndBalancing).HasColumnName("WorkManship_Testing_And_Balancing");

                entity.Property(e => e.WorkManshipToolsConsumables).HasColumnName("WorkManship_Tools_Consumables");

                entity.Property(e => e.WorkManshipTotalUnitWorkManship).HasColumnName("WorkManship_Total_Unit_Work_Manship");

                entity.Property(e => e.WorkManshipTransportationAndAccommodation).HasColumnName("WorkManship_Transportation_And_Accommodation");
            });

            modelBuilder.Entity<TndrTitemsSetCategoryM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.DepId })
                    .HasName("PK_TNDR_TItems_SetCategory_m_1");

                entity.ToTable("TNDR_TItems_SetCategory_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DepId)
                    .HasColumnName("Dep_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TndrTproject>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TNDR_TProject");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CountryId)
                    .IsRequired()
                    .HasColumnName("Country_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Ctv).HasColumnName("CTV");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.Elec).HasColumnName("ELEC");

                entity.Property(e => e.Em).HasColumnName("EM");

                entity.Property(e => e.FinishDate).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Isp).HasColumnName("ISP");

                entity.Property(e => e.Levl).HasColumnName("levl");

                entity.Property(e => e.Main).HasDefaultValueSql("((0))");

                entity.Property(e => e.Mech).HasColumnName("MECH");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ParentId)
                    .HasColumnName("Parent_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Sa).HasColumnName("SA");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TndrTsite>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ProjectId })
                    .HasName("PK_TNDR_Site");

                entity.ToTable("TNDR_TSite");

                entity.Property(e => e.SiteId).HasColumnName("Site_ID");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName)
                    .HasColumnName("Site_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TndrTsubCategory>(entity =>
            {
                entity.HasKey(e => e.SubCatId);

                entity.ToTable("TNDR_TSubCategory");

                entity.Property(e => e.SubCatId).HasColumnName("SubCat_ID");

                entity.Property(e => e.CatId)
                    .IsRequired()
                    .HasColumnName("Cat_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SubCatName)
                    .HasColumnName("SubCat_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TndrTuserCategoryD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.UserId, e.CatId });

                entity.ToTable("TNDR_TUserCategory_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CatId)
                    .HasColumnName("Cat_ID")
                    .HasMaxLength(20);

                entity.HasOne(d => d.TndrTuserCategoryM)
                    .WithMany(p => p.TndrTuserCategoryD)
                    .HasForeignKey(d => new { d.ProjectId, d.UserId })
                    .HasConstraintName("FK_TNDR_TUserCategory_d_TNDR_TUserCategory_m");
            });

            modelBuilder.Entity<TndrTuserCategoryM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.UserId })
                    .HasName("PK_TNDR_TUseCategory_m");

                entity.ToTable("TNDR_TUserCategory_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TpettyD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId });

                entity.ToTable("TPetty_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CostDesc)
                    .IsRequired()
                    .HasColumnName("Cost_Desc")
                    .HasMaxLength(3000);

                entity.Property(e => e.CostId)
                    .IsRequired()
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(100);

                entity.Property(e => e.CostType).HasMaxLength(100);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Cost)
                    .WithMany(p => p.TpettyD)
                    .HasForeignKey(d => d.CostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPetty_d_TCost");

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TpettyD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TPetty_d_TPetty_m");
            });

            modelBuilder.Entity<TpettyM>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("TPetty_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.CanUpd).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LocalRplDate)
                    .HasColumnName("Local_RplDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PettyNo).HasMaxLength(50);

                entity.Property(e => e.PettyUserId)
                    .IsRequired()
                    .HasColumnName("PettyUser_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RplDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TpettyUser>(entity =>
            {
                entity.HasKey(e => e.PettyUserId)
                    .HasName("PK_TPettyUser_1");

                entity.ToTable("TPettyUser");

                entity.Property(e => e.PettyUserId)
                    .HasColumnName("PettyUser_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<Tpipes>(entity =>
            {
                entity.HasKey(e => e.DocNo)
                    .HasName("PK_TPipes_1");

                entity.ToTable("TPipes");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.MainContractor).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(500);

                entity.Property(e => e.ShowDetails).HasDefaultValueSql("((0))");

                entity.Property(e => e.Subcontractor).HasMaxLength(500);
            });

            modelBuilder.Entity<TpipesD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.IsometricNo, e.SpoolNo, e.WeldJointNo })
                    .HasName("PK_TPipes");

                entity.ToTable("TPipes_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.IsometricNo)
                    .HasColumnName("Isometric No.")
                    .HasMaxLength(10);

                entity.Property(e => e.SpoolNo)
                    .HasColumnName("Spool No.")
                    .HasMaxLength(10);

                entity.Property(e => e.WeldJointNo)
                    .HasColumnName("Weld joint no.")
                    .HasMaxLength(10);

                entity.Property(e => e.AddDeletePaintCode)
                    .HasColumnName("Add_Delete_Paint_Code")
                    .HasMaxLength(100);

                entity.Property(e => e.AddDeletePaintCode1)
                    .HasColumnName("Add_Delete_Paint_Code1")
                    .HasMaxLength(100);

                entity.Property(e => e.Area).HasMaxLength(500);

                entity.Property(e => e.AreaSwFw)
                    .HasColumnName("Area SW/FW")
                    .HasMaxLength(500);

                entity.Property(e => e.CertNo1)
                    .HasColumnName("Cert. No. 1")
                    .HasMaxLength(500);

                entity.Property(e => e.CertNo2)
                    .HasColumnName("Cert. No. 2")
                    .HasMaxLength(500);

                entity.Property(e => e.CountOfJoint).HasColumnName("Count of joint");

                entity.Property(e => e.DateOfRecevie)
                    .HasColumnName("Date_Of_Recevie")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfRecevie1)
                    .HasColumnName("Date_Of_Recevie1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DiaSwFw)
                    .HasColumnName("Dia. SW/FW")
                    .HasMaxLength(500);

                entity.Property(e => e.EstDiaInch)
                    .HasColumnName("Est. Dia. Inch")
                    .HasMaxLength(500);

                entity.Property(e => e.EstDiaMm)
                    .HasColumnName("Est. Dia. Mm")
                    .HasMaxLength(500);

                entity.Property(e => e.FDate)
                    .HasColumnName("F Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FitUpDiaInch).HasColumnName("fit up dia inch");

                entity.Property(e => e.FitterNo)
                    .HasColumnName("Fitter_No")
                    .HasMaxLength(10);

                entity.Property(e => e.Fittername)
                    .HasColumnName("fittername")
                    .HasMaxLength(500);

                entity.Property(e => e.FluidCode)
                    .HasColumnName("FLUID CODE")
                    .HasMaxLength(500);

                entity.Property(e => e.Gatw1)
                    .HasColumnName("GATW1")
                    .HasMaxLength(10);

                entity.Property(e => e.Gatw2)
                    .HasColumnName("GATW2")
                    .HasMaxLength(10);

                entity.Property(e => e.HDDate)
                    .HasColumnName("H.D DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HDReport)
                    .HasColumnName("H.D REPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.HeatNo1)
                    .HasColumnName("Heat No. 1")
                    .HasMaxLength(500);

                entity.Property(e => e.HeatNo2)
                    .HasColumnName("Heat No. 2")
                    .HasMaxLength(500);

                entity.Property(e => e.InsulationType)
                    .HasColumnName(@"Insulation 
Type")
                    .HasMaxLength(500);

                entity.Property(e => e.IsoSymbol1OuterDia)
                    .HasColumnName("Iso / Symbol 1 / Outer Dia.")
                    .HasMaxLength(500);

                entity.Property(e => e.IsoSymbol2OuterDia)
                    .HasColumnName("Iso / Symbol 2 / Outer Dia.")
                    .HasMaxLength(500);

                entity.Property(e => e.IsometricCount)
                    .HasColumnName("Isometric Count")
                    .HasMaxLength(500);

                entity.Property(e => e.LineDesignation)
                    .HasColumnName("Line Designation")
                    .HasMaxLength(500);

                entity.Property(e => e.LineSizeInch).HasColumnName("Line size (Inch)");

                entity.Property(e => e.LineSizeMm)
                    .HasColumnName("Line size (mm)")
                    .HasMaxLength(500);

                entity.Property(e => e.MaterialType)
                    .HasColumnName("Material Type")
                    .HasMaxLength(500);

                entity.Property(e => e.MtDate)
                    .HasColumnName("MT DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.MtReport)
                    .HasColumnName("MT REPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.OuterDiaMm)
                    .HasColumnName(@"Outer 
Dia. Mm")
                    .HasMaxLength(500);

                entity.Property(e => e.PaintingSystem)
                    .HasColumnName("Painting System")
                    .HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasMaxLength(500);

                entity.Property(e => e.PipingClass)
                    .HasColumnName("Piping class")
                    .HasMaxLength(500);

                entity.Property(e => e.Plant).HasMaxLength(500);

                entity.Property(e => e.PressureTest)
                    .HasColumnName("Pressure Test")
                    .HasMaxLength(500);

                entity.Property(e => e.ProcessU)
                    .HasColumnName("PROCESS U")
                    .HasMaxLength(500);

                entity.Property(e => e.PtDate)
                    .HasColumnName("PT DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtReport)
                    .HasColumnName("PT REPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.PwhtDate)
                    .HasColumnName("PWHT DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PwhtReport)
                    .HasColumnName("PWHT REPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.QtySpool)
                    .HasColumnName("Qty Spool")
                    .HasMaxLength(500);

                entity.Property(e => e.Rev)
                    .HasColumnName("Rev.")
                    .HasMaxLength(500);

                entity.Property(e => e.Rev1)
                    .HasColumnName("Rev")
                    .HasMaxLength(50);

                entity.Property(e => e.Rev11)
                    .HasColumnName("Rev1")
                    .HasMaxLength(50);

                entity.Property(e => e.RtDate)
                    .HasColumnName("RT DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.RtReport)
                    .HasColumnName("RT REPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.SheetNo)
                    .HasColumnName("Sheet no.")
                    .HasMaxLength(500);

                entity.Property(e => e.ShopWeldFielweld)
                    .HasColumnName("Shop weld / Fielweld")
                    .HasMaxLength(500);

                entity.Property(e => e.Smaw1)
                    .HasColumnName("SMAW1")
                    .HasMaxLength(10);

                entity.Property(e => e.Smaw1Smaw2Gatw1Gatw2Smaw1Smaw2Gatw1Gatw2)
                    .HasColumnName(@"SMAW 1-SMAW 2-GATW 1-GATW 2
SMAW 1-SMAW 2-GATW 1-GATW 2")
                    .HasMaxLength(500);

                entity.Property(e => e.Smaw2)
                    .HasColumnName("SMAW2")
                    .HasMaxLength(10);

                entity.Property(e => e.SpoolCount)
                    .HasColumnName("Spool Count")
                    .HasMaxLength(500);

                entity.Property(e => e.SpoolId)
                    .HasColumnName("Spool ID")
                    .HasMaxLength(500);

                entity.Property(e => e.SubSys)
                    .HasColumnName("Sub Sys.")
                    .HasMaxLength(500);

                entity.Property(e => e.SwFw)
                    .HasColumnName("SW / FW")
                    .HasMaxLength(500);

                entity.Property(e => e.Symbol1)
                    .HasColumnName("Symbol 1")
                    .HasMaxLength(500);

                entity.Property(e => e.Symbol2)
                    .HasColumnName("Symbol 2")
                    .HasMaxLength(500);

                entity.Property(e => e.TestMedium)
                    .HasColumnName("Test Medium")
                    .HasMaxLength(500);

                entity.Property(e => e.TestSystem)
                    .HasColumnName("Test System")
                    .HasMaxLength(500);

                entity.Property(e => e.Thickness).HasMaxLength(500);

                entity.Property(e => e.UtDate)
                    .HasColumnName("UT DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UtReport)
                    .HasColumnName("UT REPORT")
                    .HasMaxLength(50);

                entity.Property(e => e.WeldDate)
                    .HasColumnName("Weld Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WeldMapNo)
                    .HasColumnName("weld Map no")
                    .HasMaxLength(500);

                entity.Property(e => e.WpsNo)
                    .HasColumnName("WPS No")
                    .HasMaxLength(50);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TpipesD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TPipes_d_TPipes");
            });

            modelBuilder.Entity<TpipesFitter>(entity =>
            {
                entity.HasKey(e => e.FitterNo);

                entity.ToTable("TPipes_Fitter");

                entity.Property(e => e.FitterNo)
                    .HasColumnName("Fitter_No")
                    .HasMaxLength(10)
                    .ValueGeneratedNever();

                entity.Property(e => e.FitterName)
                    .HasColumnName("Fitter_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TpipesWeld>(entity =>
            {
                entity.HasKey(e => e.WeldNo);

                entity.ToTable("TPipes_Weld");

                entity.Property(e => e.WeldNo)
                    .HasColumnName("Weld_No")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.WeldName)
                    .HasColumnName("Weld_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Tport>(entity =>
            {
                entity.HasKey(e => e.PortId);

                entity.ToTable("TPort");

                entity.Property(e => e.PortId)
                    .HasColumnName("Port_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.PortEnName)
                    .HasColumnName("Port_EnName")
                    .HasMaxLength(50);

                entity.Property(e => e.PortType)
                    .HasColumnName("Port_Type")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TportType>(entity =>
            {
                entity.HasKey(e => e.PortTypeId)
                    .HasName("PK_PortType");

                entity.ToTable("TPortType");

                entity.Property(e => e.PortTypeId)
                    .HasColumnName("PortType_ID")
                    .HasMaxLength(4)
                    .ValueGeneratedNever();

                entity.Property(e => e.PortTypeName)
                    .HasColumnName("PortType_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TprAanApproval>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo });

                entity.ToTable("TPR_AAN_Approval");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ActualWorkDone).HasColumnName("Actual_Work_Done");

                entity.Property(e => e.AdPaymentRecovery).HasColumnName("AD_Payment_Recovery");

                entity.Property(e => e.Adpayment)
                    .HasColumnName("ADPayment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AmountToBeDeductedFromOtherVendors)
                    .HasColumnName("Amount_to_be_Deducted_from_Other_Vendors")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetFinancialControlsManagerComment)
                    .HasColumnName("Budget_Financial_Controls_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ContractManager)
                    .HasColumnName("Contract_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ContractManagerDate)
                    .HasColumnName("Contract_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ControlsManagerComment)
                    .HasColumnName("Controls_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ControlsManagerDate)
                    .HasColumnName("Controls_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ControlsManagerUserId)
                    .HasColumnName("Controls_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CostControlManager)
                    .HasColumnName("CostControl_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.CostControlManagerDate)
                    .HasColumnName("CostControl_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CostControlUnitHead)
                    .HasColumnName("CostControl_UnitHead")
                    .HasMaxLength(4);

                entity.Property(e => e.CostControlUnitHeadDate)
                    .HasColumnName("CostControl_UnitHead_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrentBudget1).HasColumnName("Current_Budget");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.DueTo).HasMaxLength(500);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpTypeActual)
                    .HasColumnName("EXP_Type_Actual")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemDescription).HasMaxLength(500);

                entity.Property(e => e.ItemOverBudget)
                    .HasColumnName("Item_OverBudget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemUnderBudget)
                    .HasColumnName("Item_UnderBudget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MainScopeId)
                    .HasColumnName("MainScope_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MonthlyPayment).HasColumnName("Monthly_Payment");

                entity.Property(e => e.NewScopeIdOrOnAccountOfSubcontractor).HasColumnName("NewScope_ID_OR_On_Account_Of_Subcontractor");

                entity.Property(e => e.OnAccountOfSubcontractorSupplierId).HasColumnName("On_Account_Of_Subcontractor_Supplier_ID");

                entity.Property(e => e.OnDelivery).HasDefaultValueSql("((0))");

                entity.Property(e => e.PerformanceBond).HasColumnName("Performance_Bond");

                entity.Property(e => e.ProEngineerDate)
                    .HasColumnName("Pro_Engineer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProEngineerUserId)
                    .HasColumnName("Pro_Engineer_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcAndControlsManagerComment)
                    .HasColumnName("Proc_And_ControlsManager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ProcControlManagerDate)
                    .HasColumnName("Proc_Control_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcControlManagerUserId)
                    .HasColumnName("Proc_Control_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcEngineer)
                    .HasColumnName("Proc_Engineer")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcEngineerDate)
                    .HasColumnName("Proc_Engineer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManager)
                    .HasColumnName("Proc_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcManagerDate)
                    .HasColumnName("Proc_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManagerDate1)
                    .HasColumnName("Proc_Manager__Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManagerUserId)
                    .HasColumnName("Proc_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcUnitHead)
                    .HasColumnName("Proc_UnitHead")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcUnitHeadDate)
                    .HasColumnName("Proc_UnitHead_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcurementManagerComment)
                    .HasColumnName("Procurement_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.QuantitiesNotExceedTheRemaining).HasColumnName("Quantities_Not_Exceed_The_Remaining");

                entity.Property(e => e.Retenation).HasDefaultValueSql("((0))");

                entity.Property(e => e.ScopQtyDoesntAwardedBefore).HasColumnName("Scop_Qty_Doesnt_Awarded_Before");

                entity.Property(e => e.SendToRisk).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeniorProcManagerComment)
                    .HasColumnName("Senior_Proc_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.SeniorProcManagerDate)
                    .HasColumnName("Senior_Proc_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SeniorProcManagerUserId)
                    .HasColumnName("Senior_Proc_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.SensiorControlsManagerDate)
                    .HasColumnName("SensiorControls_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SensiorControlsManagerUserId)
                    .HasColumnName("SensiorControls_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.SrCcm).HasColumnName("Sr_CCM");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TermsOfPayment).HasColumnName("Terms_Of_Payment");

                entity.Property(e => e.TotalCashPaid).HasColumnName("Total_Cash_Paid");

                entity.Property(e => e.TotalGuarantees).HasColumnName("Total_Guarantees");
            });

            modelBuilder.Entity<TprAanApprovalAansupplier>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo, e.SupplierId });

                entity.ToTable("TPR_AAN_Approval_AANSupplier");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprAanApproval)
                    .WithMany(p => p.TprAanApprovalAansupplier)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId, d.DocNo })
                    .HasConstraintName("FK_TPR_AAN_Approval_AANSupplier_TPR_AAN_Approval");
            });

            modelBuilder.Entity<TprAanApprovalManual>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo });

                entity.ToTable("TPR_AAN_Approval_Manual");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ActualWorkDone).HasColumnName("Actual_Work_Done");

                entity.Property(e => e.AdPaymentAgainst).HasColumnName("AD_Payment_Against");

                entity.Property(e => e.AdPaymentRecovery).HasColumnName("AD_Payment_Recovery");

                entity.Property(e => e.Adpayment)
                    .HasColumnName("ADPayment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AmountToBeDeductedFromOtherVendors)
                    .HasColumnName("Amount_to_be_Deducted_from_Other_Vendors")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetFinancialControlsManagerComment)
                    .HasColumnName("Budget_Financial_Controls_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.BudgetValue).HasColumnName("Budget_Value");

                entity.Property(e => e.ContractManager)
                    .HasColumnName("Contract_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ContractManagerDate)
                    .HasColumnName("Contract_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ContractualValue).HasColumnName("Contractual_Value");

                entity.Property(e => e.ControlsManagerComment)
                    .HasColumnName("Controls_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ControlsManagerDate)
                    .HasColumnName("Controls_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ControlsManagerUserId)
                    .HasColumnName("Controls_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.CostControlManager)
                    .HasColumnName("CostControl_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.CostControlManagerDate)
                    .HasColumnName("CostControl_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CostControlUnitHead)
                    .HasColumnName("CostControl_UnitHead")
                    .HasMaxLength(4);

                entity.Property(e => e.CostControlUnitHeadDate)
                    .HasColumnName("CostControl_UnitHead_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrentBudget1).HasColumnName("Current_Budget");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.DueTo).HasMaxLength(500);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.ExpTypeActual)
                    .HasColumnName("EXP_Type_Actual")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemDescription).HasMaxLength(500);

                entity.Property(e => e.ItemOverBudget)
                    .HasColumnName("Item_OverBudget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemUnderBudget)
                    .HasColumnName("Item_UnderBudget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MainScopeId)
                    .HasColumnName("MainScope_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MonthlyPayment).HasColumnName("Monthly_Payment");

                entity.Property(e => e.NewScopeIdOrOnAccountOfSubcontractor).HasColumnName("NewScope_ID_OR_On_Account_Of_Subcontractor");

                entity.Property(e => e.OnAccountOfSubcontractorSupplierId).HasColumnName("On_Account_Of_Subcontractor_Supplier_ID");

                entity.Property(e => e.OnDelivery).HasDefaultValueSql("((0))");

                entity.Property(e => e.PerformanceBond).HasColumnName("Performance_Bond");

                entity.Property(e => e.PerofrmanceBond).HasColumnName("Perofrmance_Bond");

                entity.Property(e => e.ProEngineerDate)
                    .HasColumnName("Pro_Engineer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProEngineerUserId)
                    .HasColumnName("Pro_Engineer_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcAndControlsManagerComment)
                    .HasColumnName("Proc_And_ControlsManager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.ProcControlManagerDate)
                    .HasColumnName("Proc_Control_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcControlManagerUserId)
                    .HasColumnName("Proc_Control_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcEngineer)
                    .HasColumnName("Proc_Engineer")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcEngineerDate)
                    .HasColumnName("Proc_Engineer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManager)
                    .HasColumnName("Proc_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcManagerDate)
                    .HasColumnName("Proc_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManagerDate1)
                    .HasColumnName("Proc_Manager__Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcManagerUserId)
                    .HasColumnName("Proc_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcUnitHead)
                    .HasColumnName("Proc_UnitHead")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcUnitHeadDate)
                    .HasColumnName("Proc_UnitHead_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcurementManagerComment)
                    .HasColumnName("Procurement_Manager_Comment")
                    .HasMaxLength(500);

                entity.Property(e => e.QuantitiesNotExceedTheRemaining).HasColumnName("Quantities_Not_Exceed_The_Remaining");

                entity.Property(e => e.Retenation).HasDefaultValueSql("((0))");

                entity.Property(e => e.ScopQtyDoesntAwardedBefore).HasColumnName("Scop_Qty_Doesnt_Awarded_Before");

                entity.Property(e => e.SensiorControlsManagerDate)
                    .HasColumnName("SensiorControls_Manager_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SensiorControlsManagerUserId)
                    .HasColumnName("SensiorControls_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TermsOfPayment).HasColumnName("Terms_Of_Payment");

                entity.Property(e => e.TotalCashPaid).HasColumnName("Total_Cash_Paid");

                entity.Property(e => e.TotalGuarantees).HasColumnName("Total_Guarantees");
            });

            modelBuilder.Entity<TprAanApprovalSupplier>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo, e.SupplierId });

                entity.ToTable("TPR_AAN_Approval_Supplier");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprAanApproval)
                    .WithMany(p => p.TprAanApprovalSupplier)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId, d.DocNo })
                    .HasConstraintName("FK_TPR_AAN_Approval_Supplier_TPR_AAN_Approval");
            });

            modelBuilder.Entity<TprAanM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId, e.DocNo })
                    .HasName("PK_TPR_AAN");

                entity.ToTable("TPR_AAN_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrentBudget).HasColumnName("Current_Budget");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Delivery).HasMaxLength(500);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Price).HasMaxLength(500);

                entity.Property(e => e.RequiredOnSiteDate)
                    .HasColumnName("Required_On_Site_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Technically).HasMaxLength(500);
            });

            modelBuilder.Entity<TprAanNegotiationD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId, e.DocNo, e.SupplierId1 });

                entity.ToTable("TPR_AAN_Negotiation_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.SupplierId1)
                    .HasColumnName("Supplier_ID1")
                    .HasMaxLength(20);

                entity.Property(e => e.FinalDelivery).HasColumnName("Final_Delivery");

                entity.Property(e => e.FinalPrice).HasColumnName("Final_Price");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.QuotedDelivery).HasColumnName("Quoted_Delivery");

                entity.Property(e => e.QuotedPrice).HasColumnName("Quoted_Price");

                entity.Property(e => e.VarianceAmount).HasColumnName("Variance_Amount");

                entity.Property(e => e.VariancePrecentage).HasColumnName("Variance_Precentage");

                entity.Property(e => e.VendorList).HasColumnName("Vendor_List");

                entity.HasOne(d => d.TprAanApproval)
                    .WithMany(p => p.TprAanNegotiationD)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId, d.DocNo })
                    .HasConstraintName("FK_TPR_AAN_Negotiation_d_TPR_AAN_Negotiation_d");
            });

            modelBuilder.Entity<TprBoqCostD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.TypeOfWorkId, e.ItemNo });

                entity.ToTable("TPR_BOQ_Cost_d");

                entity.HasIndex(e => e.ItemNo)
                    .HasName("IX_TPR_BOQ_Cost_d")
                    .IsUnique();

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TypeOfWorkId)
                    .HasColumnName("TypeOfWork_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.HasOne(d => d.TprBoqCostM)
                    .WithMany(p => p.TprBoqCostD)
                    .HasForeignKey(d => new { d.ProjectId, d.TypeOfWorkId })
                    .HasConstraintName("FK_TPR_BOQ_Cost_d_TPR_BOQ_Cost_m");
            });

            modelBuilder.Entity<TprBoqCostM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.TypeOfWorkId });

                entity.ToTable("TPR_BOQ_Cost_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TypeOfWorkId)
                    .HasColumnName("TypeOfWork_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprBoqD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.ItemNo })
                    .HasName("PK_TBOQ");

                entity.ToTable("TPR_BOQ_d");

                entity.HasIndex(e => new { e.ProjectId, e.ItemNo })
                    .HasName("IX_TPR_BOQ_d")
                    .IsUnique();

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.CcWorkPackageId)
                    .HasColumnName("CC_WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ParentItem).HasMaxLength(20);

                entity.Property(e => e.QtyOut)
                    .HasColumnName("Qty_Out")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remain).HasComputedColumnSql("(isnull([Qty],(0))-isnull([Qty_out],(0)))");

                entity.Property(e => e.TypeOfWorkId)
                    .IsRequired()
                    .HasColumnName("TypeOfWork_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.HasOne(d => d.TypeOfWork)
                    .WithMany(p => p.TprBoqD)
                    .HasForeignKey(d => d.TypeOfWorkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPR_BOQ_d_TPR_TypeOfWork");

                entity.HasOne(d => d.TprBoqM)
                    .WithMany(p => p.TprBoqD)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_BOQ_d_TPR_BOQ_m");
            });

            modelBuilder.Entity<TprBoqM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_BOQ_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprBrand>(entity =>
            {
                entity.HasKey(e => e.BrandId);

                entity.ToTable("TPR_Brand");

                entity.Property(e => e.BrandId)
                    .HasColumnName("Brand_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.BrandName)
                    .HasColumnName("Brand_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.WorkPackageId)
                    .IsRequired()
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TprComparisonFinalItemsD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("TPR_Comparison_Final_Items_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(500);

                entity.HasOne(d => d.TprComparisonQuotedFinalM)
                    .WithMany(p => p.TprComparisonFinalItemsD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Comparison_Final_Items_d_TPR_Comparison_Quoted_Final_m");
            });

            modelBuilder.Entity<TprComparisonFinalSuppliersD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("TPR_Comparison_Final_Suppliers_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprComparisonQuotedFinalM)
                    .WithMany(p => p.TprComparisonFinalSuppliersD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Comparison_Final_Suppliers_d_TPR_Comparison_Quoted_Final_m");
            });

            modelBuilder.Entity<TprComparisonNegotiationM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId })
                    .HasName("PK_TPR_Comparison_negotiation");

                entity.ToTable("TPR_Comparison_Negotiation_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AdvancePayment).HasColumnName("Advance_Payment");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Delivery).HasMaxLength(2000);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LetterOfGuarantee)
                    .HasColumnName("Letter_Of_Guarantee")
                    .HasMaxLength(2000);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaymentOnDelivery).HasColumnName("Payment_on_Delivery");

                entity.Property(e => e.TermsOfPayments)
                    .HasColumnName("Terms_OF_Payments")
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<TprComparisonNegotiationSuppliersD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("TPR_Comparison_Negotiation_Suppliers_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.SendRegretLetter).HasColumnName("Send_Regret_Letter");

                entity.HasOne(d => d.TprComparisonNegotiationM)
                    .WithMany(p => p.TprComparisonNegotiationSuppliersD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Comparison_Negotiation_Suppliers_d_TPR_Comparison_Negotiation_m");
            });

            modelBuilder.Entity<TprComparisonQuotedFinalM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Comparison_Quoted_Final_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AdvancePayment).HasColumnName("Advance_Payment");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Delivery).HasMaxLength(2000);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LetterOfGuarantee)
                    .HasColumnName("Letter_Of_Guarantee")
                    .HasMaxLength(2000);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaymentOnDelivery).HasColumnName("Payment_on_Delivery");

                entity.Property(e => e.TermsOfPayments)
                    .HasColumnName("Terms_OF_Payments")
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<TprComparisonQuotedItemsD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("TPR_Comparison_Quoted_Items_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.HasOne(d => d.TprComparisonQuotedM)
                    .WithMany(p => p.TprComparisonQuotedItemsD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Comparison_Quoted_Items_d_TPR_Comparison_Quoted_m");
            });

            modelBuilder.Entity<TprComparisonQuotedItemsNegotiationD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("TPR_Comparison_Quoted_Items_Negotiation_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.HasOne(d => d.TprComparisonNegotiationM)
                    .WithMany(p => p.TprComparisonQuotedItemsNegotiationD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Comparison_Quoted_Items_Negotiation_d_TPR_Comparison_Negotiation_m");
            });

            modelBuilder.Entity<TprComparisonQuotedM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId })
                    .HasName("PK_TPR_Comparison_Qouted");

                entity.ToTable("TPR_Comparison_Quoted_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AdvancePayment).HasColumnName("Advance_Payment");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Delivery).HasMaxLength(2000);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LetterOfGuarantee)
                    .HasColumnName("Letter_Of_Guarantee")
                    .HasMaxLength(2000);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaymentOnDelivery).HasColumnName("Payment_on_Delivery");

                entity.Property(e => e.TermsOfPayments)
                    .HasColumnName("Terms_OF_Payments")
                    .HasMaxLength(2000);
            });

            modelBuilder.Entity<TprComparisonQuotedSuppliersD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("TPR_Comparison_Quoted_Suppliers_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprComparisonQuotedM)
                    .WithMany(p => p.TprComparisonQuotedSuppliersD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Comparison_Quoted_Suppliers_d_TPR_Comparison_Quoted_m");
            });

            modelBuilder.Entity<TprContractAdminForm>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.DocNo });

                entity.ToTable("TPR_Contract_Admin_Form");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.Adpayment).HasColumnName("ADPayment");

                entity.Property(e => e.AdpaymentVs).HasColumnName("ADPayment_VS");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.MainScopeId)
                    .HasColumnName("MainScope_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentTerms)
                    .HasColumnName("Payment_Terms")
                    .HasMaxLength(500);

                entity.Property(e => e.PerformanceBond).HasColumnName("Performance_Bond");

                entity.Property(e => e.PerformanceBondVs).HasColumnName("Performance_Bond_VS");
            });

            modelBuilder.Entity<TprContractApproval>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Contract_Approval");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprEvalByOperationD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectManagerId, e.SupplierId, e.ParamterId });

                entity.ToTable("TPR_Eval_ByOperation_d");

                entity.Property(e => e.ProjectManagerId)
                    .HasColumnName("ProjectManager_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprEvalByOperationM)
                    .WithMany(p => p.TprEvalByOperationD)
                    .HasForeignKey(d => new { d.ProjectManagerId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Eval_ByOperation_d_TPR_Eval_ByOperation_m");
            });

            modelBuilder.Entity<TprEvalByOperationM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectManagerId, e.SupplierId });

                entity.ToTable("TPR_Eval_ByOperation_m");

                entity.Property(e => e.ProjectManagerId)
                    .HasColumnName("ProjectManager_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FinalValue).HasColumnName("Final_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OrginalValue).HasColumnName("Orginal_Value");
            });

            modelBuilder.Entity<TprEvalByProcD>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.SupplierId, e.ParamterId });

                entity.ToTable("TPR_Eval_By_Proc_d");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprEvalByProcM)
                    .WithMany(p => p.TprEvalByProcD)
                    .HasForeignKey(d => new { d.UserId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Eval_By_Proc_d_TPR_Eval_ByProc_m");
            });

            modelBuilder.Entity<TprEvalByProcD1>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId, e.ParamterId });

                entity.ToTable("TPR_Eval_ByProc_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprEvalM)
                    .WithMany(p => p.TprEvalByProcD1)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Eval_ByProc_d_TPR_Eval_m");
            });

            modelBuilder.Entity<TprEvalByProcM>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.SupplierId });

                entity.ToTable("TPR_Eval_ByProc_m");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FinalValue).HasColumnName("Final_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OrginalValue).HasColumnName("Orginal_Value");
            });

            modelBuilder.Entity<TprEvalD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId, e.ParamterId });

                entity.ToTable("TPR_Eval_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.AboveAverage)
                    .HasColumnName("Above_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Average).HasDefaultValueSql("((0))");

                entity.Property(e => e.BelowAverage)
                    .HasColumnName("Below_Average")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Ideal)
                    .HasColumnName("IDEAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Poor).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnAcceptable)
                    .HasColumnName("Un_Acceptable")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprEvalM)
                    .WithMany(p => p.TprEvalD)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Eval_d_TPR_Eval_m");
            });

            modelBuilder.Entity<TprEvalM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("TPR_Eval_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FinalValue).HasColumnName("Final_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OrginalValue).HasColumnName("Orginal_Value");
            });

            modelBuilder.Entity<TprEvlParamter>(entity =>
            {
                entity.HasKey(e => e.ParamterId);

                entity.ToTable("TPR_Evl_Paramter");

                entity.Property(e => e.ParamterId)
                    .HasColumnName("Paramter_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ParamterName)
                    .HasColumnName("Paramter_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ParamterType)
                    .HasColumnName("Paramter_Type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TprExpType>(entity =>
            {
                entity.HasKey(e => e.ExpType);

                entity.ToTable("TPR_EXP_Type");

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Cost).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpDescription)
                    .HasColumnName("EXP_Description")
                    .HasMaxLength(500);

                entity.Property(e => e.ExpTypeCat)
                    .HasColumnName("EXP_Type_Cat")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprExpTypeCat>(entity =>
            {
                entity.HasKey(e => e.ExpTypeCat);

                entity.ToTable("TPR_EXP_Type_Cat");

                entity.Property(e => e.ExpTypeCat)
                    .HasColumnName("EXP_Type_Cat")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ExpTypeText)
                    .HasColumnName("EXP_Type_Text")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TprExpedPlanComments>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.RecordId });

                entity.ToTable("TPR_ExpedPlan_Comments");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.UserComments)
                    .HasColumnName("User_Comments")
                    .HasMaxLength(500);

                entity.HasOne(d => d.TprExpedPlanM)
                    .WithMany(p => p.TprExpedPlanComments)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_ExpedPlan_Comments_TPR_ExpedPlan_m");
            });

            modelBuilder.Entity<TprExpedPlanD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.StepNo });

                entity.ToTable("TPR_ExpedPlan_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.Day).HasMaxLength(50);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PlanningDate).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.Property(e => e.WeightExp).HasColumnName("Weight_Exp");

                entity.HasOne(d => d.TprExpedPlanM)
                    .WithMany(p => p.TprExpedPlanD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_ExpedPlan_d_TPR_ExpedPlan_m");
            });

            modelBuilder.Entity<TprExpedPlanM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_ExpedPlan_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AggrementName)
                    .HasColumnName("Aggrement_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwardingPlanDate).HasColumnType("date");

                entity.Property(e => e.BackReson)
                    .HasColumnName("Back_Reson")
                    .HasMaxLength(1000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.Ignore).HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Manual).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Submit).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TprExpedPlanSteps>(entity =>
            {
                entity.HasKey(e => e.StepNo)
                    .HasName("PK_TPR_ExpedPlanSteps_m");

                entity.ToTable("TPR_ExpedPlanSteps");

                entity.Property(e => e.StepNo)
                    .HasColumnName("Step_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DefaultWeight).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcPlanStep).HasColumnName("Proc_Plan_Step");

                entity.Property(e => e.StepName)
                    .HasColumnName("Step_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TprFrmEnquery>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Frm_Enquery");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AdvancePaymentApproval).HasColumnName("Advance_Payment_Approval");

                entity.Property(e => e.ContractType).HasColumnName("Contract_Type");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LcRequest).HasColumnName("LC_Request");

                entity.Property(e => e.LetterOfIntent).HasColumnName("Letter_Of_Intent");

                entity.Property(e => e.MakeOrBuy).HasColumnName("Make_Or_Buy");

                entity.Property(e => e.ManufacturingPeriod)
                    .HasColumnName("Manufacturing_Period")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OnSite).HasMaxLength(20);

                entity.Property(e => e.ProposedFormToBeUsed)
                    .HasColumnName("Proposed_Form_to_be_Used")
                    .HasMaxLength(20);

                entity.Property(e => e.PurchasingOrder).HasMaxLength(20);

                entity.Property(e => e.RegretLetter).HasColumnName("Regret_letter");

                entity.Property(e => e.RelatedMileStonesWithLd).HasColumnName("Related_Mile_Stones_with_LD");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpDatingTbeForm).HasColumnName("Up_dating_TBE_Form");

                entity.Property(e => e.VendorRecommendationRequest).HasColumnName("Vendor_Recommendation_Request");
            });

            modelBuilder.Entity<TprMainScope>(entity =>
            {
                entity.HasKey(e => e.MainScopeId);

                entity.ToTable("TPR_MainScope");

                entity.Property(e => e.MainScopeId)
                    .HasColumnName("MainScope_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MainScopeTitle)
                    .HasColumnName("MainScope_Title")
                    .HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprMileStones>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.RecordId });

                entity.ToTable("TPR_MileStones");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Date2)
                    .HasColumnName("Date_2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DescriptionDate)
                    .HasColumnName("Description_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprNotification>(entity =>
            {
                entity.HasKey(e => new { e.Serial, e.Type });

                entity.ToTable("TPR_Notification");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.FromUserId)
                    .HasColumnName("From_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Notification).HasMaxLength(2000);

                entity.Property(e => e.Notified).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TaskId).HasColumnName("Task_ID");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TprPlan>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountingNo).HasMaxLength(50);

                entity.Property(e => e.AggrementName)
                    .IsRequired()
                    .HasColumnName("Aggrement_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.Approved1).HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractNo)
                    .HasColumnName("Contract_No")
                    .HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.EndDateOnSite).HasColumnType("datetime");

                entity.Property(e => e.EngineerUserId)
                    .IsRequired()
                    .HasColumnName("Engineer_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Isprocurement).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MrMrcode)
                    .HasColumnName("MR_MRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.MrReceivedDate)
                    .HasColumnName("MR_Received_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OldAgreement).HasColumnName("Old_Agreement");

                entity.Property(e => e.OldDate)
                    .HasColumnName("Old_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PaymentCondition)
                    .HasColumnName("Payment_Condition")
                    .HasMaxLength(500);

                entity.Property(e => e.PlanType).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanningControlsManager).HasMaxLength(500);

                entity.Property(e => e.ReferAgreement).HasColumnName("Refer_Agreement");

                entity.Property(e => e.SeniorProcManager).HasMaxLength(4);

                entity.Property(e => e.Submit).HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TeamLeaderUserId)
                    .IsRequired()
                    .HasColumnName("TeamLeader_User_ID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanActualDateD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_ActualDate_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(1000);

                entity.Property(e => e.SubmitalDate)
                    .HasColumnName("Submital_Date")
                    .HasColumnType("date");

                entity.Property(e => e.SubmitalReplay)
                    .HasColumnName("Submital_Replay")
                    .HasColumnType("date");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TprPlanActualDateD)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_TPR_Plan_ActualDate_d_TPR_Plan_ActualDate_m");
            });

            modelBuilder.Entity<TprPlanActualDateM>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TPR_Plan_ActualDate_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<TprPlanAuth>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.StepNo })
                    .HasName("PK_TPR_Plan_Auth_1");

                entity.ToTable("TPR_Plan_Auth");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.ApprovedUser).HasColumnName("Approved_User");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.HasRevised).HasColumnName("Has_Revised");

                entity.Property(e => e.HasSubmit).HasColumnName("Has_Submit");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.RevisedUser).HasColumnName("Revised_User");

                entity.Property(e => e.SubmitUser).HasColumnName("Submit_User");
            });

            modelBuilder.Entity<TprPlanContractInternalReview>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Contract_Internal_Review");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.StepNo });

                entity.ToTable("TPR_Plan_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.Day).HasMaxLength(50);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PlanningDate).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprPlan)
                    .WithMany(p => p.TprPlanD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Plan_d_TPR_Plan");
            });

            modelBuilder.Entity<TprPlanExpdWorkFlow>(entity =>
            {
                entity.HasKey(e => new { e.Serial, e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_PlanExpdWorkFlow");

                entity.Property(e => e.Serial).ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Read).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.SubmitDate).HasColumnType("datetime");

                entity.Property(e => e.SubmitedToUser)
                    .HasColumnName("Submited_To_User")
                    .HasMaxLength(20);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("User_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TprPlanLetterOfIntent>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Letter_OF_Intent");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MailBody)
                    .HasColumnName("Mail_Body")
                    .HasMaxLength(4000);

                entity.Property(e => e.MailSent).HasColumnName("Mail_Sent");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanLongLeadD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("TPR_Plan_LongLead_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.AdvancePaymentOrLgAct)
                    .HasColumnName("Advance_payment_or_LG_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdvancePaymentOrLgPln)
                    .HasColumnName("Advance_payment_or_LG_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.InspectionAct)
                    .HasColumnName("Inspection_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.InspectionPln)
                    .HasColumnName("Inspection_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnName("Item_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.MaterialOnSiteDateForItem)
                    .HasColumnName("Material_ON_Site_Date_For_Item")
                    .HasColumnType("datetime");

                entity.Property(e => e.MirFromConsultantAct)
                    .HasColumnName("MIR_from_consultant_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.MirFromConsultantPln)
                    .HasColumnName("MIR_from_consultant_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.POIssuingDateAct)
                    .HasColumnName("P_O_issuing_date_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.POIssuingDatePln)
                    .HasColumnName("P_O_issuing_date_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDeliveryAct)
                    .HasColumnName("Start_delivery_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDeliveryPln)
                    .HasColumnName("Start_delivery_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartFabricationDateAct)
                    .HasColumnName("Start_Fabrication_date_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartFabricationDatePln)
                    .HasColumnName("Start_Fabrication_date_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.TechnicalSubmittalApprovalAct)
                    .HasColumnName("Technical_submittal_approval_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.TechnicalSubmittalApprovalPln)
                    .HasColumnName("Technical_submittal_approval_PLN")
                    .HasColumnType("datetime");

                entity.Property(e => e.TechnicalSubmittalToConsultantAct)
                    .HasColumnName("Technical_Submittal_to_consultant_ACT")
                    .HasColumnType("datetime");

                entity.Property(e => e.TechnicalSubmittalToConsultantPln)
                    .HasColumnName("Technical_Submittal_to_consultant_PLN")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.TprPlanLongLeadM)
                    .WithMany(p => p.TprPlanLongLeadD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Plan_LongLead_d_TPR_Plan_LongLead_m");
            });

            modelBuilder.Entity<TprPlanLongLeadM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_LongLead_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Descrp).HasMaxLength(500);
            });

            modelBuilder.Entity<TprPlanMakeOrBuyAnalysis>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_MakeOr_Buy_Analysis");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AttFile)
                    .HasColumnName("Att_File")
                    .HasColumnType("image");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FileExt)
                    .HasColumnName("File_Ext")
                    .HasMaxLength(50);

                entity.Property(e => e.FilePath).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanManualD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.RecordId, e.ItemNo });

                entity.ToTable("TPR_Plan_Manual_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.TotalOffer).HasColumnName("Total_Offer");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitOffer).HasColumnName("Unit_Offer");

                entity.HasOne(d => d.TprPlanManualM)
                    .WithMany(p => p.TprPlanManualD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Plan_Manual_d_TPR_Plan_Manual_m");
            });

            modelBuilder.Entity<TprPlanManualM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Manual_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AggrementName)
                    .IsRequired()
                    .HasColumnName("Aggrement_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.EngineerUserId)
                    .IsRequired()
                    .HasColumnName("Engineer_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TeamLeaderUserId)
                    .IsRequired()
                    .HasColumnName("TeamLeader_User_ID")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanRegertLetter>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Regert_Letter");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp)
                    .HasMaxLength(4000)
                    .HasDefaultValueSql(@"(N'Dear Engineer -------,									
We would like to thank you for submitting your quotation for the subject order. However, we regret to inform you that your bid has been unsuccessful.	
	
										
We appreciate your genuine efforts for making your bid competitive, and look forward to receiving your offer for future orders.')");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MailForm).HasMaxLength(4000);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanRegertLetterD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("TPR_Plan_Regert_Letter_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanRequestForQoutation>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_RequestForQoutation");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp)
                    .HasMaxLength(4000)
                    .HasDefaultValueSql(@"(N'Dear  ----------,							
We are Hassan Allam Construction – Egypt, We have awarded to above mentioned project and we would like to invite your esteemed company to  provide us a competitive bid for the attached B.O.Q in accordance with the drawings, specifications, design etc., and our general terms and conditions as given in attachments.	
	
	
Please indicate the price basis and elements separately in the offer			
The prices should be based on an itemized (No Suggestions) with each item priced separately. Words such as "" Included"" will not be acceptable.

You are requested to submit your offer on or before the deadline indicated above.	
The offer has to be submitted in two parts Priced (Commercial offer) and Un-priced (Technical Offer)
 
 
For any further question. Please don’t hesitate to contact me')");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanSteps>(entity =>
            {
                entity.HasKey(e => e.StepNo);

                entity.ToTable("TPR_PlanSteps");

                entity.Property(e => e.StepNo)
                    .HasColumnName("Step_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ColorName).HasMaxLength(50);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DefaultApprovedUser).HasColumnName("Default_Approved_User");

                entity.Property(e => e.DefaultHasRevised).HasColumnName("Default_Has_Revised");

                entity.Property(e => e.DefaultHasSubmit).HasColumnName("Default_Has_Submit");

                entity.Property(e => e.DefaultRevisedUser).HasColumnName("Default_Revised_User");

                entity.Property(e => e.DefaultSubmitUser).HasColumnName("Default_Submit_User");

                entity.Property(e => e.DefaultWeight).HasDefaultValueSql("((0))");

                entity.Property(e => e.FormName).HasMaxLength(300);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OutOfEgypt).HasDefaultValueSql("((0))");

                entity.Property(e => e.StepName)
                    .HasColumnName("Step_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UniqeName)
                    .HasColumnName("Uniqe_Name")
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<TprPlanStepsDescription>(entity =>
            {
                entity.HasKey(e => new { e.StepDescriptionNo, e.StepNo, e.PlanStruct });

                entity.ToTable("TPR_PlanSteps_Description");

                entity.Property(e => e.StepDescriptionNo).HasColumnName("Step_Description_No");

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.StepDescription).HasMaxLength(500);

                entity.Property(e => e.TargetUser).HasMaxLength(500);
            });

            modelBuilder.Entity<TprPlanStepsUsers>(entity =>
            {
                entity.HasKey(e => new { e.Serial, e.StepDescriptionNo, e.StepNo, e.UserId });

                entity.ToTable("TPR_PlanSteps_Users");

                entity.Property(e => e.Serial).ValueGeneratedOnAdd();

                entity.Property(e => e.StepDescriptionNo).HasColumnName("Step_Description_No");

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanStructD>(entity =>
            {
                entity.HasKey(e => new { e.PlanStruct, e.StepNo });

                entity.ToTable("TPR_PlanStruct_d");

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.HasOne(d => d.PlanStructNavigation)
                    .WithMany(p => p.TprPlanStructD)
                    .HasForeignKey(d => d.PlanStruct)
                    .HasConstraintName("FK_TPR_PlanStruct_d_TPR_PlanStruct_m");
            });

            modelBuilder.Entity<TprPlanStructM>(entity =>
            {
                entity.HasKey(e => e.PlanStruct)
                    .HasName("PK_TPR_PlanStruct");

                entity.ToTable("TPR_PlanStruct_m");

                entity.Property(e => e.PlanStruct).ValueGeneratedNever();

                entity.Property(e => e.PlanStructName)
                    .HasColumnName("PlanStruct_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TprPlanSubcontractorSignature>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Subcontractor_Signature");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanSystemType>(entity =>
            {
                entity.HasKey(e => e.SystemTypeId);

                entity.ToTable("TPR_Plan_SystemType");

                entity.Property(e => e.SystemTypeId)
                    .HasColumnName("SystemType_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SystemTypeName)
                    .HasColumnName("SystemType_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TprPlanTechinalSubmittalApproval>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Techinal_Submittal_Approval");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AttFile)
                    .HasColumnName("Att_File")
                    .HasColumnType("image");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FileExt)
                    .HasColumnName("File_Ext")
                    .HasMaxLength(50);

                entity.Property(e => e.FilePath).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanTechnicalSubmittalDataToSite>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Plan_Technical_Submittal_Data_To_Site");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprPlanType>(entity =>
            {
                entity.HasKey(e => e.PlanType);

                entity.ToTable("TPR_Plan_Type");

                entity.Property(e => e.PlanType).ValueGeneratedNever();

                entity.Property(e => e.PlanTypeName).HasMaxLength(500);
            });

            modelBuilder.Entity<TprPlanUsers>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.UserId });

                entity.ToTable("TPR_Plan_Users");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprPlan)
                    .WithMany(p => p.TprPlanUsers)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Plan_Users_TPR_Plan");
            });

            modelBuilder.Entity<TprPlanWorkFlow>(entity =>
            {
                entity.HasKey(e => new { e.Serial, e.DocNo, e.ProjectId, e.WorkPackageId, e.StepNo, e.StepDescriptionNo });

                entity.ToTable("TPR_PlanWorkFlow");

                entity.Property(e => e.Serial).ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StepNo).HasColumnName("Step_No");

                entity.Property(e => e.StepDescriptionNo).HasColumnName("Step_Description_No");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Read).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubmitDate).HasColumnType("datetime");

                entity.Property(e => e.SubmitedToUser)
                    .HasColumnName("Submited_To_User")
                    .HasMaxLength(20);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("User_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TprProjectManager>(entity =>
            {
                entity.HasKey(e => e.ProjectManagerId);

                entity.ToTable("TPR_ProjectManager");

                entity.Property(e => e.ProjectManagerId)
                    .HasColumnName("ProjectManager_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.ProjectManager).HasColumnName("Project_Manager");

                entity.Property(e => e.ProjectManagerName)
                    .IsRequired()
                    .HasColumnName("Project_Manager_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TprQuotationD1>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.ItemNo });

                entity.ToTable("TPR_Quotation_d1");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BUnitPrice).HasColumnName("B_Unit_Price");

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PrevTotal).HasColumnName("Prev_Total");

                entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");

                entity.Property(e => e.SalesTaxPerc).HasColumnName("Sales_Tax_Perc");

                entity.Property(e => e.TotalCurr).HasColumnName("Total_Curr");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.HasOne(d => d.TprQuotationM)
                    .WithMany(p => p.TprQuotationD1)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Quotation_d1_TPR_Quotation_m");
            });

            modelBuilder.Entity<TprQuotationD2>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.ItemNo });

                entity.ToTable("TPR_Quotation_d2");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BUnitPrice).HasColumnName("B_Unit_Price");

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PrevTotal).HasColumnName("Prev_Total");

                entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");

                entity.Property(e => e.SalesTaxPerc).HasColumnName("Sales_Tax_Perc");

                entity.Property(e => e.TotalCurr).HasColumnName("Total_Curr");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.HasOne(d => d.TprQuotationM)
                    .WithMany(p => p.TprQuotationD2)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Quotation_d2_TPR_Quotation_m");
            });

            modelBuilder.Entity<TprQuotationD3>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId, e.ItemNo });

                entity.ToTable("TPR_Quotation_d3");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BUnitPrice).HasColumnName("B_Unit_Price");

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PrevTotal).HasColumnName("Prev_Total");

                entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");

                entity.Property(e => e.SalesTaxPerc).HasColumnName("Sales_Tax_Perc");

                entity.Property(e => e.TotalCurr).HasColumnName("Total_Curr");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.HasOne(d => d.TprQuotationM)
                    .WithMany(p => p.TprQuotationD3)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId, d.SupplierId })
                    .HasConstraintName("FK_TPR_Quotation_d3_TPR_Quotation_m");
            });

            modelBuilder.Entity<TprQuotationM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_TPR_Quotation_m_1");

                entity.ToTable("TPR_Quotation_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AdvPLgOrChq).HasColumnName("AdvP_LG_or_CHQ");

                entity.Property(e => e.AdvPayment).HasColumnName("Adv_Payment");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.CurrenyQuoted).HasColumnName("Curreny_Quoted");

                entity.Property(e => e.CustomDutiesLearance).HasColumnName("Custom_Duties_learance");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeliveryBasdon)
                    .HasColumnName("Delivery_Basdon")
                    .HasMaxLength(10);

                entity.Property(e => e.DeliveryDate)
                    .HasColumnName("Delivery_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeliveryFrom)
                    .HasColumnName("Delivery_From")
                    .HasMaxLength(2);

                entity.Property(e => e.DeliveryTo)
                    .HasColumnName("Delivery_To")
                    .HasMaxLength(2);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.DiscountD1).HasColumnName("Discount_d1");

                entity.Property(e => e.DiscountD2).HasColumnName("Discount_d2");

                entity.Property(e => e.DiscountD3).HasColumnName("Discount_d3");

                entity.Property(e => e.ExchangeRateUsed).HasColumnName("Exchange_Rate_Used");

                entity.Property(e => e.FeesTaxes).HasColumnName("Fees_Taxes");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LoadingTransportation).HasColumnName("Loading_Transportation");

                entity.Property(e => e.MaterialDeliveryPeriod)
                    .HasColumnName("Material_Delivery_Period")
                    .HasMaxLength(20);

                entity.Property(e => e.Misc).HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OffLoadingAtSite).HasColumnName("Off_Loading_AtSite");

                entity.Property(e => e.PackingTransportation).HasColumnName("Packing_Transportation");

                entity.Property(e => e.PaymentConditions).HasMaxLength(500);

                entity.Property(e => e.PaymentConditionsOther)
                    .HasColumnName("PaymentConditions_Other")
                    .HasMaxLength(500);

                entity.Property(e => e.PaymentOnDelivery).HasColumnName("Payment_On_Delivery");

                entity.Property(e => e.PaymentOnInstallation).HasColumnName("Payment_On_Installation");

                entity.Property(e => e.PbLgOrChq).HasColumnName("PB_LG_or_CHQ");

                entity.Property(e => e.PerformanceBond).HasColumnName("Performance_Bond");

                entity.Property(e => e.Rate).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TprRecommendClientD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_TPR_Client_Recommend");

                entity.ToTable("TPR_Recommend_Client_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprRecommendM)
                    .WithMany(p => p.TprRecommendClientD)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Recommend_Client_d_TPR_Recommend_m");
            });

            modelBuilder.Entity<TprRecommendM>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Recommend_m");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprRecommendTenderD>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_TPR_Tender_Recommend");

                entity.ToTable("TPR_Recommend_Tender_d");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.TprRecommendM)
                    .WithMany(p => p.TprRecommendTenderD)
                    .HasForeignKey(d => new { d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Recommend_Tender_d_TPR_Recommend_m");
            });

            modelBuilder.Entity<TprSupermission>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ProjectId })
                    .HasName("PK_TPR_SUPermission_1");

                entity.ToTable("TPR_SUPermission");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprSupermissionProject>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ProjectId, e.DisciplineCode });

                entity.ToTable("TPR_SUPermission_Project");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DisciplineCode)
                    .HasColumnName("Discipline_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprSupermissionWp>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.WorkPackageId });

                entity.ToTable("TPR_SUPermission_WP");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprTadPayment>(entity =>
            {
                entity.HasKey(e => e.AdPaymentId)
                    .HasName("PK_TPR_AD.Payment");

                entity.ToTable("TPR_TAD_Payment");

                entity.Property(e => e.AdPaymentId)
                    .HasColumnName("AD_Payment_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(10);
            });

            modelBuilder.Entity<TprTask>(entity =>
            {
                entity.HasKey(e => e.TaskId);

                entity.ToTable("TPR_Task");

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Deadline).HasColumnType("datetime");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TaskDescription)
                    .HasColumnName("Task_Description")
                    .HasMaxLength(4000);

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasColumnName("Task_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.UserComments)
                    .HasColumnName("User_Comments")
                    .HasMaxLength(4000);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TprTaskD>(entity =>
            {
                entity.HasKey(e => new { e.TaskId, e.UserId });

                entity.ToTable("TPR_Task_d");

                entity.Property(e => e.TaskId).HasColumnName("Task_ID");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TprTaskD)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_TPR_Task_d_TPR_Task");
            });

            modelBuilder.Entity<TprTaskTemplate>(entity =>
            {
                entity.HasKey(e => e.TaskTemplateId);

                entity.ToTable("TPR_TaskTemplate");

                entity.Property(e => e.TaskTemplateId)
                    .HasColumnName("TaskTemplate_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaskDescription)
                    .HasColumnName("Task_Description")
                    .HasMaxLength(4000);

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasColumnName("Task_Name")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<TprTaskUserComments>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.TaskId });

                entity.ToTable("TPR_Task_User_Comments");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TaskId).HasColumnName("Task_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.UserComments)
                    .HasColumnName("User_Comments")
                    .HasMaxLength(500);

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TprTaskUserComments)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_TPR_Task_User_Comments_TPR_Task");
            });

            modelBuilder.Entity<TprTpaymentsOndelivery>(entity =>
            {
                entity.HasKey(e => e.PaymentsondeliveryId);

                entity.ToTable("TPR_TPaymentsOndelivery");

                entity.Property(e => e.PaymentsondeliveryId)
                    .HasColumnName("Paymentsondelivery_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(10);
            });

            modelBuilder.Entity<TprTretention>(entity =>
            {
                entity.HasKey(e => e.RetentionId);

                entity.ToTable("TPR_TRetention");

                entity.Property(e => e.RetentionId)
                    .HasColumnName("Retention_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(10);
            });

            modelBuilder.Entity<TprTypeOfWork>(entity =>
            {
                entity.HasKey(e => e.TypeOfWorkId)
                    .HasName("PK_TPR_WorkPackage");

                entity.ToTable("TPR_TypeOfWork");

                entity.Property(e => e.TypeOfWorkId)
                    .HasColumnName("TypeOfWork_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TypeOfWork).HasMaxLength(500);
            });

            modelBuilder.Entity<TprTypeOfWorkProject>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.TypeOfWorkId });

                entity.ToTable("TPR_TypeOfWork_Project");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TypeOfWorkId)
                    .HasColumnName("TypeOfWork_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TprTypeOfWorkProject)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_TPR_TypeOfWork_Project_TProject");
            });

            modelBuilder.Entity<TprVendorEvaluotionRequest>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Vendor_Evaluotion_Request");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprVendorEvalutionUpdate>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Vendor_Evalution_Update");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprVendorRecommendationClientD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_TPR_Vendor_Recommendation_Other_d");

                entity.ToTable("TPR_Vendor_Recommendation_Client_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ForNeg)
                    .HasColumnName("For_Neg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OnlyRfq)
                    .HasColumnName("Only_RFQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecReq)
                    .HasColumnName("Rec_Req")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.TprVendorRecommendationM)
                    .WithMany(p => p.TprVendorRecommendationClientD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Vendor_Recommendation_Client_d_TPR_Vendor_Recommendation_m");
            });

            modelBuilder.Entity<TprVendorRecommendationCompanyD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId })
                    .HasName("PK_TPR_Vendor_Recommendation_Company_d_1");

                entity.ToTable("TPR_Vendor_Recommendation_Company_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ForNeg)
                    .HasColumnName("For_Neg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OnlyRfq)
                    .HasColumnName("Only_RFQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecReq).HasColumnName("Rec_Req");

                entity.HasOne(d => d.TprVendorRecommendationM)
                    .WithMany(p => p.TprVendorRecommendationCompanyD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Vendor_Recommendation_Company_d_TPR_Vendor_Recommendation_m");
            });

            modelBuilder.Entity<TprVendorRecommendationEvalD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.ParamterId })
                    .HasName("PK_TPR_Vendor_Recommendation_Eval_d_1");

                entity.ToTable("TPR_Vendor_Recommendation_Eval_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ParamterId).HasColumnName("Paramter_ID");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprVendorRecommendationM)
                    .WithMany(p => p.TprVendorRecommendationEvalD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Vendor_Recommendation_Eval_d_TPR_Vendor_Recommendation_m");
            });

            modelBuilder.Entity<TprVendorRecommendationM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Vendor_Recommendation_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateRequest)
                    .HasColumnName("Date_Request")
                    .HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp)
                    .HasMaxLength(4000)
                    .HasDefaultValueSql(@"(N'Dear Engineer ----------,								
Kindly Findbelow / attached list of Package Name suppliers/subcontractors for the above mentioned project for your recommendation and advice')");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MailSent).HasDefaultValueSql("((0))");

                entity.Property(e => e.MailSentDate).HasColumnType("datetime");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprVendorRecommendationTenderD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId, e.SupplierId });

                entity.ToTable("TPR_Vendor_Recommendation_Tender_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ForNeg)
                    .HasColumnName("For_Neg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OnlyRfq)
                    .HasColumnName("Only_RFQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecReq)
                    .HasColumnName("Rec_Req")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.TprVendorRecommendationM)
                    .WithMany(p => p.TprVendorRecommendationTenderD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Vendor_Recommendation_Tender_d_TPR_Vendor_Recommendation_m");
            });

            modelBuilder.Entity<TprVendorSelectionD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId, e.ProjectId, e.WorkPackageId })
                    .HasName("PK_TPR_Vendor_Selection_d_1");

                entity.ToTable("TPR_Vendor_Selection_d");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_TPR_Vendor_Selection_d")
                    .IsUnique();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(4000);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ForNeg)
                    .HasColumnName("For_Neg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.OnlyRfq)
                    .HasColumnName("Only_RFQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.TprVendorSelectionM)
                    .WithMany(p => p.TprVendorSelectionD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_Vendor_Selection_d_TPR_Vendor_Selection_m");
            });

            modelBuilder.Entity<TprVendorSelectionM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId });

                entity.ToTable("TPR_Vendor_Selection_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateRequest)
                    .HasColumnName("Date_Request")
                    .HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.MailSent).HasDefaultValueSql("((0))");

                entity.Property(e => e.MailSentDate).HasColumnType("datetime");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TprWpagreementD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo })
                    .HasName("PK_TPR_Aggremant_d");

                entity.ToTable("TPR_WPAgreement_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BQty)
                    .HasColumnName("B_Qty")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BTotal)
                    .HasColumnName("B_Total")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.BoqItem)
                    .HasColumnName("BOQ_Item")
                    .HasMaxLength(4000);

                entity.Property(e => e.BoqItemId)
                    .HasColumnName("BOQ_Item_ID")
                    .HasMaxLength(4000);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ItemResource)
                    .HasColumnName("Item_Resource")
                    .HasMaxLength(100);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Select).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalBudget)
                    .HasColumnName("Total_Budget")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TprWpagreementM)
                    .WithMany(p => p.TprWpagreementD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_WPAgreement_d_TPR_WPAgreement_m");
            });

            modelBuilder.Entity<TprWpagreementM>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ProjectId, e.WorkPackageId })
                    .HasName("PK_TPR_Aggremant_m");

                entity.ToTable("TPR_WPAgreement_m");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AccountingNo).HasMaxLength(50);

                entity.Property(e => e.CostControlUseComment).HasMaxLength(2000);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(4000);

                entity.Property(e => e.ExpType)
                    .HasColumnName("EXP_Type")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PaymentCondition)
                    .HasColumnName("Payment_Condition")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TprWpagreementManualD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.ProjectId, e.WorkPackageId, e.ItemNo });

                entity.ToTable("TPR_WPAgreement_Manual_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemNo)
                    .HasColumnName("Item_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BoqItem)
                    .HasColumnName("BOQ_Item")
                    .HasMaxLength(20);

                entity.Property(e => e.BoqItemId)
                    .HasColumnName("BOQ_Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("Division_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Select).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalBudget).HasColumnName("Total_Budget");

                entity.Property(e => e.TotalOffer).HasColumnName("Total_Offer");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitBudget)
                    .HasColumnName("Unit_Budget")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitOffer).HasColumnName("Unit_Offer");

                entity.HasOne(d => d.TprPlan)
                    .WithMany(p => p.TprWpagreementManualD)
                    .HasForeignKey(d => new { d.DocNo, d.ProjectId, d.WorkPackageId })
                    .HasConstraintName("FK_TPR_WPAgreement_Manual_d_TPR_Plan");
            });

            modelBuilder.Entity<Tproject>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TProject");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcomCurrentPaidCost).HasColumnName("Acom_Current_Paid_Cost");

                entity.Property(e => e.AcomCurrentPlanMonth).HasColumnName("Acom_Current_Plan_Month");

                entity.Property(e => e.AcomEndDate)
                    .HasColumnName("Acom_End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcomRemainingCost).HasColumnName("Acom_Remaining_Cost");

                entity.Property(e => e.AcomStartDate)
                    .HasColumnName("Acom_Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AcomTotalBudget).HasColumnName("Acom_Total_Budget");

                entity.Property(e => e.AdPaymentIdManager)
                    .HasColumnName("AD_Payment_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AdPaymentIdTeam)
                    .HasColumnName("AD_Payment_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AwardedDate)
                    .HasColumnName("Awarded_Date")
                    .HasColumnType("date");

                entity.Property(e => e.BudgetingEngineerUserId)
                    .HasColumnName("Budgeting_Engineer_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.BudgetingManagerUserId)
                    .HasColumnName("Budgeting_Manager_User_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.Ceo)
                    .HasColumnName("CEO")
                    .HasMaxLength(4);

                entity.Property(e => e.ClientId)
                    .HasColumnName("Client_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ConsultantId)
                    .HasColumnName("Consultant_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ContactTypeTypeId)
                    .HasColumnName("ContactType_Type_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ContractAdministrator)
                    .HasColumnName("Contract_Administrator")
                    .HasMaxLength(4);

                entity.Property(e => e.ControlsEngineer).HasMaxLength(4);

                entity.Property(e => e.ControlsManager).HasMaxLength(4);

                entity.Property(e => e.ControlsSeniorsEngineer).HasMaxLength(4);

                entity.Property(e => e.CostControlEngineer).HasMaxLength(50);

                entity.Property(e => e.CountryId)
                    .IsRequired()
                    .HasColumnName("Country_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(5);

                entity.Property(e => e.CurrentContractValue).HasColumnName("Current_Contract_Value");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(10);

                entity.Property(e => e.DbId1)
                    .HasColumnName("DB_ID1")
                    .HasMaxLength(50);

                entity.Property(e => e.Dc)
                    .HasColumnName("DC")
                    .HasMaxLength(4);

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.EstimatedGrossMargin).HasColumnName("Estimated_Gross_Margin");

                entity.Property(e => e.FinishDate).HasColumnType("datetime");

                entity.Property(e => e.FirstInvoiceMonth).HasColumnName("FirstInvoice_Month");

                entity.Property(e => e.FirstInvoiceYear).HasColumnName("FirstInvoice_Year");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JvPerc).HasColumnName("JV_Perc");

                entity.Property(e => e.LastInvoiceMonth).HasColumnName("LastInvoice_Month");

                entity.Property(e => e.LastInvoiceYear).HasColumnName("LastInvoice_Year");

                entity.Property(e => e.Levl).HasColumnName("levl");

                entity.Property(e => e.LongLeadItemUser)
                    .HasColumnName("LongLeadItem_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Main).HasDefaultValueSql("((0))");

                entity.Property(e => e.Mdoperation)
                    .HasColumnName("MDOperation")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Months).HasMaxLength(50);

                entity.Property(e => e.OdAssistant1)
                    .HasColumnName("OD_Assistant1")
                    .HasMaxLength(50);

                entity.Property(e => e.OdAssistant2)
                    .HasColumnName("OD_Assistant2")
                    .HasMaxLength(50);

                entity.Property(e => e.OperationManager)
                    .HasColumnName("Operation_Manager")
                    .HasMaxLength(50);

                entity.Property(e => e.OriginalContractValue).HasColumnName("Original_Contract_Value");

                entity.Property(e => e.ParentId)
                    .HasColumnName("Parent_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.PartnershipTypeId)
                    .HasColumnName("Partnership_Type_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentsondeliveryIdManager)
                    .HasColumnName("Paymentsondelivery_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentsondeliveryIdTeam)
                    .HasColumnName("Paymentsondelivery_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanningControlsManager)
                    .HasColumnName("Planning_Controls_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ProcAndcontrolManager).HasMaxLength(4);

                entity.Property(e => e.ProcManager)
                    .HasColumnName("Proc_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectAccountId)
                    .HasColumnName("Project_Account_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectDirector)
                    .HasColumnName("Project_Director")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectManager)
                    .HasColumnName("Project_Manager")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RetentionIdManager)
                    .HasColumnName("Retention_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionIdTeam)
                    .HasColumnName("Retention_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskEngineer)
                    .HasColumnName("Risk_Engineer")
                    .HasMaxLength(4);

                entity.Property(e => e.ScDepreciationPercent).HasColumnName("SC_Depreciation_Percent");

                entity.Property(e => e.SeniorControlsManager).HasMaxLength(4);

                entity.Property(e => e.SeniorPlanningControlsManager)
                    .HasColumnName("Senior_Planning_Controls_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.SubContractingSeniorManager).HasMaxLength(4);

                entity.Property(e => e.SupplyChainSectionHead)
                    .HasColumnName("Supply_Chain_Section_Head")
                    .HasMaxLength(4);

                entity.Property(e => e.SupplyChainSectionManager)
                    .HasColumnName("Supply_Chain_Section_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.UserRiskManager)
                    .HasColumnName("User_Risk_Manager")
                    .HasMaxLength(4);

                entity.Property(e => e.Weeks).HasMaxLength(50);
            });

            modelBuilder.Entity<TprojectCurrency>(entity =>
            {
                entity.HasKey(e => new { e.CurrencyId, e.ProjectId });

                entity.ToTable("TProject_Currency");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("Currency_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TprojectCurrency)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_TProject_Currency_TProject");
            });

            modelBuilder.Entity<TrackingPurchasingApproval>(entity =>
            {
                entity.HasKey(e => e.ApprovalId);

                entity.ToTable("Tracking_Purchasing_Approval");

                entity.Property(e => e.ApprovalId)
                    .HasColumnName("Approval_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalDescription)
                    .HasColumnName("Approval_Description")
                    .HasMaxLength(500);

                entity.Property(e => e.Index).HasColumnName("_Index");
            });

            modelBuilder.Entity<TrackingPurchasingM>(entity =>
            {
                entity.HasKey(e => e.MrId);

                entity.ToTable("Tracking_Purchasing_M");

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.MrAttachment)
                    .HasColumnName("Mr_Attachment")
                    .HasMaxLength(50);

                entity.Property(e => e.MrDate)
                    .HasColumnName("Mr_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrNo)
                    .IsRequired()
                    .HasColumnName("Mr_No")
                    .HasMaxLength(20);

                entity.Property(e => e.MrReceivingDate)
                    .HasColumnName("Mr_ReceivingDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TypeOfWork)
                    .HasColumnName("Type_Of_Work")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TrackingPurchasingPoM>(entity =>
            {
                entity.HasKey(e => e.PoId);

                entity.ToTable("Tracking_Purchasing_PO_M");

                entity.Property(e => e.PoId).HasColumnName("Po_ID");

                entity.Property(e => e.Comment).HasMaxLength(50);

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.HoldReason).HasMaxLength(100);

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InDate1)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.InUser1)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.PoAttach).HasMaxLength(50);

                entity.Property(e => e.PoDate)
                    .HasColumnName("Po_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PoNo)
                    .HasColumnName("Po_No")
                    .HasMaxLength(50);

                entity.Property(e => e.RePoAttach).HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TotalAmount).HasMaxLength(50);
            });

            modelBuilder.Entity<TrainingEvaluationCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("Training_Evaluation_Category");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CategoryName)
                    .HasColumnName("Category_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TrainingEvaluationCourses>(entity =>
            {
                entity.HasKey(e => e.CourseId)
                    .HasName("PK_Training_Evaluation_M");

                entity.ToTable("Training_Evaluation_Courses");

                entity.Property(e => e.CourseId).HasColumnName("Course_ID");

                entity.Property(e => e.Cost).HasMaxLength(50);

                entity.Property(e => e.CourseName)
                    .HasColumnName("Course_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.Provider).HasMaxLength(50);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.Trainer).HasMaxLength(50);
            });

            modelBuilder.Entity<TrainingEvaluationD>(entity =>
            {
                entity.HasKey(e => e.CourseDetId);

                entity.ToTable("Training_Evaluation_d");

                entity.Property(e => e.CourseDetId).HasColumnName("Course_DetID");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.CourseDet).HasColumnName("Course_Det");

                entity.Property(e => e.ElementsId).HasColumnName("Elements_ID");

                entity.Property(e => e.ElementsValue)
                    .HasColumnName("Elements_Value")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<TrainingEvaluationElements>(entity =>
            {
                entity.HasKey(e => e.ElementsId);

                entity.ToTable("Training_Evaluation_Elements");

                entity.Property(e => e.ElementsId).HasColumnName("Elements_ID");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.ElementsAr)
                    .HasColumnName("Elements_AR")
                    .HasMaxLength(500);

                entity.Property(e => e.ElementsEn)
                    .HasColumnName("Elements_EN")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TrainingEvaluationM>(entity =>
            {
                entity.HasKey(e => e.CourseDet)
                    .HasName("PK_Training_Evaluation_d_M");

                entity.ToTable("Training_Evaluation_M");

                entity.Property(e => e.CourseDet).HasColumnName("Course_Det");

                entity.Property(e => e.CourseId).HasColumnName("Course_ID");

                entity.Property(e => e.ElementDidntLike)
                    .HasColumnName("Element_DidntLike")
                    .HasMaxLength(500);

                entity.Property(e => e.ElementLikedMost)
                    .HasColumnName("Element_likedMost")
                    .HasMaxLength(500);

                entity.Property(e => e.ElementSuggestions)
                    .HasColumnName("Element_Suggestions")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Trank>(entity =>
            {
                entity.HasKey(e => e.RankName);

                entity.ToTable("TRank");

                entity.Property(e => e.RankName)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<TrkProcuremantComments>(entity =>
            {
                entity.HasKey(e => e.ComId);

                entity.ToTable("TRK_Procuremant_Comments");

                entity.Property(e => e.ComId).HasColumnName("Com_ID");

                entity.Property(e => e.ComDate)
                    .HasColumnName("Com_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcurementId).HasColumnName("Procurement_ID");

                entity.HasOne(d => d.Procurement)
                    .WithMany(p => p.TrkProcuremantComments)
                    .HasForeignKey(d => d.ProcurementId)
                    .HasConstraintName("FK_TRK_Procuremant_Comments_TRK_Procurement");
            });

            modelBuilder.Entity<TrkProcurement>(entity =>
            {
                entity.HasKey(e => e.ProcurementId)
                    .HasName("PK_PRC_MRTracking");

                entity.ToTable("TRK_Procurement");

                entity.Property(e => e.ProcurementId).HasColumnName("Procurement_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DelvPart1)
                    .HasColumnName("DelvPart_1")
                    .HasMaxLength(50);

                entity.Property(e => e.DelvPart1date)
                    .HasColumnName("DelvPart_1Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPart2)
                    .HasColumnName("DelvPart_2")
                    .HasMaxLength(50);

                entity.Property(e => e.DelvPart2date)
                    .HasColumnName("DelvPart_2Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPart3)
                    .HasColumnName("DelvPart_3")
                    .HasMaxLength(50);

                entity.Property(e => e.DelvPart3date)
                    .HasColumnName("DelvPart_3Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPart4)
                    .HasColumnName("DelvPart_4")
                    .HasMaxLength(50);

                entity.Property(e => e.DelvPart4date)
                    .HasColumnName("DelvPart_4Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPartDateRec1)
                    .HasColumnName("DelvPart_Date_Rec1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPartDateRec2)
                    .HasColumnName("DelvPart_Date_Rec2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPartDateRec3)
                    .HasColumnName("DelvPart_Date_Rec3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DelvPartDateRec4)
                    .HasColumnName("DelvPart_Date_Rec4")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.FileAttached).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.LgAdvPayAmount)
                    .HasColumnName("LG_AdvPay_Amount")
                    .HasMaxLength(50);

                entity.Property(e => e.Lgperformance).HasColumnName("LGPerformance");

                entity.Property(e => e.PoAmount)
                    .HasColumnName("PO_Amount")
                    .HasMaxLength(50);

                entity.Property(e => e.PoAmountCur)
                    .HasColumnName("PO_Amount_Cur")
                    .HasMaxLength(20);

                entity.Property(e => e.PoAp)
                    .HasColumnName("PO_AP")
                    .HasMaxLength(50);

                entity.Property(e => e.PoApAmountCur)
                    .HasColumnName("PO_AP_Amount_Cur")
                    .HasMaxLength(20);

                entity.Property(e => e.PoApRate)
                    .HasColumnName("PO_AP_Rate")
                    .HasMaxLength(50);

                entity.Property(e => e.PoBudget).HasColumnName("PO_Budget");

                entity.Property(e => e.PoDate)
                    .HasColumnName("PO_Date")
                    .HasColumnType("date");

                entity.Property(e => e.PoDelevryTerms).HasColumnName("PO_DelevryTerms");

                entity.Property(e => e.PoRetention)
                    .HasColumnName("PO_Retention")
                    .HasMaxLength(50);

                entity.Property(e => e.PoRetentionRate)
                    .HasColumnName("PO_Retention_Rate")
                    .HasMaxLength(50);

                entity.Property(e => e.PoStartUp)
                    .HasColumnName("PO_StartUp")
                    .HasMaxLength(50);

                entity.Property(e => e.PoStartUpRate)
                    .HasColumnName("PO_StartUp_Rate")
                    .HasMaxLength(50);

                entity.Property(e => e.PoUponDelv)
                    .HasColumnName("PO_UPON_Delv")
                    .HasMaxLength(50);

                entity.Property(e => e.PoUponDelvRate)
                    .HasColumnName("PO_UPON_Delv_Rate")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcTypeId).HasColumnName("Proc_Type_ID");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.WorkPackage)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TrkProcurementAppType>(entity =>
            {
                entity.HasKey(e => e.ProcAppTypeId);

                entity.ToTable("TRK_Procurement_App_Type");

                entity.Property(e => e.ProcAppTypeId).HasColumnName("Proc_AppType_ID");

                entity.Property(e => e.AppTypeDescription)
                    .HasColumnName("AppType_Description")
                    .HasMaxLength(500);
            });








            modelBuilder.Entity<TrkProcurementApproval>(entity =>
            {
                entity.HasKey(e => e.ProcApprovalId)
                    .HasName("PK_PRC_MRTracking_Approval");

                entity.ToTable("TRK_Procurement_Approval");

                entity.Property(e => e.ProcApprovalId)
                    .HasColumnName("Proc_Approval_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalDescription)
                    .HasColumnName("Approval_Description")
                    .HasMaxLength(500);

                entity.Property(e => e.Index).HasColumnName("_Index");

                entity.Property(e => e.ProcAppTypeId).HasColumnName("Proc_AppType_ID");

                entity.Property(e => e.ProcTypeId).HasColumnName("Proc_Type_ID");
            });

            modelBuilder.Entity<TrkProcurementD>(entity =>
            {
                entity.HasKey(e => e.Serial)
                    .HasName("PK_PRC_MRTracking_d_1");

                entity.ToTable("TRK_Procurement_d");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.PlanningDate).HasColumnType("datetime");

                entity.Property(e => e.PrcMrApprovalId).HasColumnName("PRC_MR_Approval_ID");

                entity.Property(e => e.ProcurementId).HasColumnName("Procurement_ID");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.WorkPackage)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Procurement)
                    .WithMany(p => p.TrkProcurementD)
                    .HasForeignKey(d => d.ProcurementId)
                    .HasConstraintName("FK_PRC_MRTracking_d_PRC_MRTracking_d");
            });

            modelBuilder.Entity<TrkProcurementTerms>(entity =>
            {
                entity.HasKey(e => e.TermsId)
                    .HasName("PK_TRK_Delv_Terms");

                entity.ToTable("TRK_Procurement_Terms");

                entity.Property(e => e.TermsId).HasColumnName("Terms_ID");

                entity.Property(e => e.TermsName)
                    .HasColumnName("Terms_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TrkProcurementType>(entity =>
            {
                entity.HasKey(e => e.ProcTypeId)
                    .HasName("PK_PRC_MRTracking_Type");

                entity.ToTable("TRK_Procurement_Type");

                entity.Property(e => e.ProcTypeId)
                    .HasColumnName("Proc_Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(500);
            });

            modelBuilder.Entity<TrkPurchasingApproval>(entity =>
            {
                entity.HasKey(e => e.ApprovalId)
                    .HasName("PK_Trk_Purchasing_Approval");

                entity.ToTable("TRK_Purchasing_Approval");

                entity.Property(e => e.ApprovalId)
                    .HasColumnName("Approval_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalDescription)
                    .HasColumnName("Approval_Description")
                    .HasMaxLength(500);

                entity.Property(e => e.Index).HasColumnName("_Index");
            });

            modelBuilder.Entity<TrkPurchasingContactPersons>(entity =>
            {
                entity.HasKey(e => e.ContactId);

                entity.ToTable("TRK_Purchasing_ContactPersons");

                entity.Property(e => e.ContactId).HasColumnName("Contact_ID");

                entity.Property(e => e.ContactPerso)
                    .HasColumnName("Contact_perso")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_user")
                    .HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.SapCode).HasColumnName("SAP_code");
            });

            modelBuilder.Entity<TrkPurchasingD>(entity =>
            {
                entity.HasKey(e => e.MrDet)
                    .HasName("PK_TRK_Purchasing_d_1");

                entity.ToTable("TRK_Purchasing_d");

                entity.Property(e => e.MrDet).HasColumnName("MR_Det");

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovalId).HasColumnName("Approval_ID");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.PlanningDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TrkPurchasingGroupItems>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("TRK_Purchasing_GroupItems");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupDescId).HasColumnName("Group_Desc_ID");

                entity.Property(e => e.GroupName)
                    .HasColumnName("Group_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TrkPurchasingItemAction>(entity =>
            {
                entity.HasKey(e => e.ItemActionId);

                entity.ToTable("TRK_Purchasing_ItemAction");

                entity.Property(e => e.ItemActionId).HasColumnName("Item_ActionID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.ItemCode)
                    .HasColumnName("Item_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemComment)
                    .HasColumnName("Item_Comment")
                    .HasMaxLength(100);

                entity.Property(e => e.ItemCount).HasColumnName("Item_Count");

                entity.Property(e => e.MrDet).HasColumnName("Mr_Det");

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");
            });

            modelBuilder.Entity<TrkPurchasingItemInMr>(entity =>
            {
                entity.HasKey(e => new { e.ItemCode, e.MrId });

                entity.ToTable("TRK_Purchasing_ItemInMr");

                entity.Property(e => e.ItemCode).HasColumnName("Item_code");

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.ItemComment)
                    .HasColumnName("Item_Comment")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemCount).HasColumnName("Item_Count");

                entity.Property(e => e.ItemName)
                    .HasColumnName("Item_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ItemUnit)
                    .HasColumnName("Item_unit")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TrkPurchasingItemStoreReply>(entity =>
            {
                entity.HasKey(e => e.ItemActionId);

                entity.ToTable("TRK_Purchasing_ItemStoreReply");

                entity.Property(e => e.ItemActionId).HasColumnName("Item_ActionID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.ItemCode)
                    .HasColumnName("Item_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemComment)
                    .HasColumnName("Item_Comment")
                    .HasMaxLength(100);

                entity.Property(e => e.ItemCount).HasColumnName("Item_Count");

                entity.Property(e => e.MrDet).HasColumnName("Mr_Det");

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");
            });

            modelBuilder.Entity<TrkPurchasingItems>(entity =>
            {
                entity.HasKey(e => e.ItemCode);

                entity.ToTable("TRK_Purchasing_Items");

                entity.Property(e => e.ItemCode).HasColumnName("Item_code");

                entity.Property(e => e.AssetCode).HasMaxLength(100);

                entity.Property(e => e.ItemCoding)
                    .HasColumnName("Item_coding")
                    .HasMaxLength(100);

                entity.Property(e => e.ItemCount).HasColumnName("Item_Count");

                entity.Property(e => e.ItemName)
                    .HasColumnName("Item_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.ItemNameAr)
                    .HasColumnName("Item_name_Ar")
                    .HasMaxLength(200);

                entity.Property(e => e.ItemUnit)
                    .HasColumnName("Item_unit")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TrkPurchasingM>(entity =>
            {
                entity.HasKey(e => e.MrId)
                    .HasName("PK_TRK_Purchasing_M_1");

                entity.ToTable("TRK_Purchasing_M");

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.Approval).HasMaxLength(2);

                entity.Property(e => e.CancelReason).HasMaxLength(200);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Dateview).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.MgAprrovedDate)
                    .HasColumnName("Mg_Aprroved_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrAttachment)
                    .HasColumnName("Mr_Attachment")
                    .HasMaxLength(50);

                entity.Property(e => e.MrAttachment2)
                    .HasColumnName("Mr_Attachment2")
                    .HasMaxLength(50);

                entity.Property(e => e.MrAttachment3)
                    .HasColumnName("Mr_Attachment3")
                    .HasMaxLength(50);

                entity.Property(e => e.MrDate)
                    .HasColumnName("Mr_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrNo)
                    .IsRequired()
                    .HasColumnName("Mr_No")
                    .HasMaxLength(20);

                entity.Property(e => e.MrReceivingDate)
                    .HasColumnName("Mr_ReceivingDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TypeOfWork)
                    .HasColumnName("Type_Of_Work")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TrkPurchasingPoD>(entity =>
            {
                entity.HasKey(e => e.PoDId);

                entity.ToTable("TRK_Purchasing_Po_d");

                entity.Property(e => e.PoDId).HasColumnName("PO_D_ID");

                entity.Property(e => e.MrId).HasColumnName("MR_ID");

                entity.Property(e => e.PoId).HasColumnName("Po_ID");
            });

            modelBuilder.Entity<TrkPurchasingPoM>(entity =>
            {
                entity.HasKey(e => e.PoId);

                entity.ToTable("TRK_Purchasing_Po_M");

                entity.Property(e => e.PoId).HasColumnName("Po_ID");

                entity.Property(e => e.Comment).HasMaxLength(50);

                entity.Property(e => e.DelieveryTerms).HasMaxLength(500);

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.PaymentTerms).HasMaxLength(500);

                entity.Property(e => e.PoApAmountCur)
                    .HasColumnName("PO_AP_Amount_Cur")
                    .HasMaxLength(50);

                entity.Property(e => e.PoAttach).HasMaxLength(50);

                entity.Property(e => e.PoDate)
                    .HasColumnName("Po_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PoNo)
                    .HasColumnName("Po_No")
                    .HasMaxLength(50);

                entity.Property(e => e.RePoAttach).HasMaxLength(50);

                entity.Property(e => e.SpecialTerms).HasMaxLength(500);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.TotalAmount).HasMaxLength(50);
            });

            modelBuilder.Entity<TrkPurchasingPropNewItms>(entity =>
            {
                entity.HasKey(e => e.PropItmsId);

                entity.ToTable("TRK_Purchasing_PropNewItms");

                entity.Property(e => e.PropItmsId).HasColumnName("PropItms_ID");

                entity.Property(e => e.Comment).HasMaxLength(200);

                entity.Property(e => e.EmailTo).HasMaxLength(100);

                entity.Property(e => e.Img)
                    .HasColumnName("img")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemCode).HasMaxLength(500);

                entity.Property(e => e.ItemName).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TrkPurchasingPtM>(entity =>
            {
                entity.HasKey(e => e.PtId);

                entity.ToTable("TRK_Purchasing_PT_M");

                entity.Property(e => e.PtId).HasColumnName("PT_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("MR_ID");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.PtDate)
                    .HasColumnName("PT_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TrkPurchasingQuotationD>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Trk_Purchasing_Quotation_d");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.DiscountPerc).HasColumnName("Discount_Perc");

                entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemCode)
                    .HasColumnName("Item_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RfqSerial).HasColumnName("Rfq_serial");

                entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");

                entity.Property(e => e.SalesTaxPerc).HasColumnName("Sales_Tax_Perc");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");
            });

            modelBuilder.Entity<TrkPurchasingQuotationM>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("TRK_Purchasing_Quotation_m");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.DeliveryPeriod).HasMaxLength(200);

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.ModDate).HasColumnType("datetime");

                entity.Property(e => e.ModUser).HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RfqSerial).HasColumnName("Rfq_serial");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.Property(e => e.TermsofPayment).HasMaxLength(200);
            });

            modelBuilder.Entity<TrkPurchasingSelectedSuppliers>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("TRK_Purchasing_SelectedSuppliers");

                entity.Property(e => e.ItemCode)
                    .HasColumnName("Item_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("Mr_ID");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");
            });

            modelBuilder.Entity<TrkPurchasingSuppliers>(entity =>
            {
                entity.HasKey(e => e.SapCode)
                    .HasName("PK_supp$");

                entity.ToTable("TRK_Purchasing_Suppliers");

                entity.Property(e => e.SapCode).HasColumnName("SAP_code");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AlphaCode).HasColumnName("Alpha_Code");

                entity.Property(e => e.EMail)
                    .HasColumnName("E_Mail")
                    .HasMaxLength(255);

                entity.Property(e => e.MobilePhone)
                    .HasColumnName("Mobile_Phone")
                    .HasMaxLength(255);

                entity.Property(e => e.NameAr)
                    .HasColumnName("NameAR")
                    .HasMaxLength(255);

                entity.Property(e => e.NameEn)
                    .HasColumnName("NameEN")
                    .HasMaxLength(255);

                entity.Property(e => e.Telephone).HasMaxLength(255);
            });

            modelBuilder.Entity<TrkPurchasingTqD>(entity =>
            {
                entity.HasKey(e => e.TqDId);

                entity.ToTable("TRK_Purchasing_TQ_D");

                entity.Property(e => e.TqDId).HasColumnName("TQ_D_ID");

                entity.Property(e => e.ItemUnit).HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("MR_ID");

                entity.Property(e => e.TqId).HasColumnName("TQ_ID");
            });

            modelBuilder.Entity<TrkPurchasingTqM>(entity =>
            {
                entity.HasKey(e => e.TqId);

                entity.ToTable("TRK_Purchasing_TQ_M");

                entity.Property(e => e.TqId).HasColumnName("TQ_ID");

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.MrId).HasColumnName("MR_ID");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.TqDate)
                    .HasColumnName("TQ_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TrkPurchasingUnits>(entity =>
            {
                entity.HasKey(e => e.UnitId);

                entity.ToTable("TRK_Purchasing_Units");

                entity.Property(e => e.UnitId).HasColumnName("Unit_ID");

                entity.Property(e => e.UnitName)
                    .HasColumnName("Unit_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TrkUsers>(entity =>
            {
                entity.HasKey(e => e.TrkId);

                entity.ToTable("TRK_Users");

                entity.Property(e => e.TrkId).HasColumnName("TRK_ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.TrkUserHrcode)
                    .HasColumnName("TRK_User_HRCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TrkUsersPermission>(entity =>
            {
                entity.HasKey(e => e.PermId);

                entity.ToTable("TRK_Users_Permission");

                entity.Property(e => e.PermId).HasColumnName("Perm_ID");

                entity.Property(e => e.CostControlEngineer).HasMaxLength(50);

                entity.Property(e => e.OdAssistant1)
                    .HasColumnName("OD_Assistant1")
                    .HasMaxLength(50);

                entity.Property(e => e.OdAssistant2)
                    .HasColumnName("OD_Assistant2")
                    .HasMaxLength(50);

                entity.Property(e => e.OperationManager)
                    .HasColumnName("Operation_Manager")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectDirector)
                    .HasColumnName("Project_Director")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectManager)
                    .HasColumnName("Project_Manager")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tsupplier>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("TSupplier");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Capital).HasMaxLength(50);

                entity.Property(e => e.CommercialRegistry)
                    .HasColumnName("Commercial_Registry")
                    .HasMaxLength(500);

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .HasMaxLength(4);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Direction).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FolderNum).HasMaxLength(500);

                entity.Property(e => e.GovernorateId).HasColumnName("Governorate_ID");

                entity.Property(e => e.HaHcoCode).HasColumnName("HaHCo_Code");

                entity.Property(e => e.Idnum)
                    .HasColumnName("IDNum")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.InitialAcceptancedate).HasColumnType("datetime");

                entity.Property(e => e.LastAcceptancedate).HasColumnType("datetime");

                entity.Property(e => e.MethodofEvaluation).HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.NameA).HasMaxLength(500);

                entity.Property(e => e.NameE).HasMaxLength(500);

                entity.Property(e => e.NextEvaluationdate).HasColumnType("datetime");

                entity.Property(e => e.Prequalification).HasMaxLength(500);

                entity.Property(e => e.QualifiedInNuclearProjectUpToDate).HasColumnType("datetime");

                entity.Property(e => e.QualifiedInNuclearProjectUpToDateComments).HasMaxLength(1000);

                entity.Property(e => e.Ranking).HasMaxLength(50);

                entity.Property(e => e.RegionId).HasColumnName("Region_ID");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SapId)
                    .HasColumnName("SAP_ID")
                    .HasMaxLength(500);

                entity.Property(e => e.Score).HasMaxLength(4);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasColumnName("Supplier_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.TaxesCard)
                    .HasColumnName("Taxes_Card")
                    .HasMaxLength(500);

                entity.Property(e => e.TechnicalSpecsData)
                    .HasColumnName("Technical_Specs_Data")
                    .HasMaxLength(500);

                entity.Property(e => e.TypeofService).HasMaxLength(500);

                entity.Property(e => e.VendorId)
                    .HasColumnName("Vendor_ID")
                    .HasMaxLength(200);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<TsupplierBrand>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.BrandId })
                    .HasName("PK_TSupplier_Brand_1");

                entity.ToTable("TSupplier_Brand");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.BrandId)
                    .HasColumnName("Brand_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TsupplierContact>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.RecordId });

                entity.ToTable("TSupplier_Contact");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Idnum)
                    .HasColumnName("IDNUM")
                    .HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.Mobile2).HasMaxLength(500);

                entity.Property(e => e.Mobile3).HasMaxLength(500);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.Position).HasMaxLength(500);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TsupplierContact)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_TSupplier_Contact_TSupplier");
            });

            modelBuilder.Entity<TsupplierPhone>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.RecordId });

                entity.ToTable("TSupplier_Phone");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.PhoneType).HasMaxLength(50);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TsupplierPhone)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_TSupplier_Phone_TSupplier");
            });

            modelBuilder.Entity<TsupplierTypeCode>(entity =>
            {
                entity.HasKey(e => e.SupplierTypeCode);

                entity.ToTable("TSupplierTypeCode");

                entity.Property(e => e.SupplierTypeCode)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.SupplierTypeName).HasMaxLength(200);
            });

            modelBuilder.Entity<TsupplierTypeCodeD>(entity =>
            {
                entity.HasKey(e => new { e.SupplierTypeCode, e.SupplierId })
                    .HasName("PK_TSupplierTypeCode_m");

                entity.ToTable("TSupplierTypeCode_d");

                entity.Property(e => e.SupplierTypeCode).HasMaxLength(20);

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TsupplierTypeCodeD)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_TSupplierTypeCode_d_TSupplier");

                entity.HasOne(d => d.SupplierTypeCodeNavigation)
                    .WithMany(p => p.TsupplierTypeCodeD)
                    .HasForeignKey(d => d.SupplierTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSupplierTypeCode_d_TSupplierTypeCode");
            });

            modelBuilder.Entity<TsupplierWorkPackage>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.WorkPackageId })
                    .HasName("PK_TSupplier_WorkPackage_1");

                entity.ToTable("TSupplier_WorkPackage");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("Supplier_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TsupplierWorkPackage)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_TSupplier_WorkPackage_TSupplier");
            });

            modelBuilder.Entity<Ttask>(entity =>
            {
                entity.HasKey(e => e.TaskId);

                entity.ToTable("TTask");

                entity.Property(e => e.TaskId)
                    .HasColumnName("Task_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.BusinessTypeId)
                    .HasColumnName("BusinessType_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaskName).HasMaxLength(500);

                entity.Property(e => e.TaskNameE)
                    .HasColumnName("TaskName_e")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TunitType>(entity =>
            {
                entity.HasKey(e => e.UnitType);

                entity.ToTable("TUnit_Type");

                entity.Property(e => e.UnitType)
                    .HasColumnName("Unit_Type")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TwebAchievement>(entity =>
            {
                entity.HasKey(e => e.AchievementId);

                entity.ToTable("TWeb_Achievement");

                entity.Property(e => e.AchievementId).HasColumnName("Achievement_ID");

                entity.Property(e => e.AchievementDescription).HasColumnName("Achievement_Description");

                entity.Property(e => e.AchievementTitle)
                    .HasColumnName("Achievement_Title")
                    .HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FUserId)
                    .HasColumnName("fUser_ID")
                    .HasMaxLength(500);

                entity.Property(e => e.Hrapprove)
                    .HasColumnName("HRApprove")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManagerApprove).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebAnnounces>(entity =>
            {
                entity.HasKey(e => e.AnnounceId);

                entity.ToTable("TWeb_Announces");

                entity.Property(e => e.AnnounceId).HasColumnName("Announce_ID");

                entity.Property(e => e.AnnounceBody).HasColumnName("Announce_Body");

                entity.Property(e => e.AnnounceBodyAr)
                    .HasColumnName("Announce_Body_ar")
                    .HasMaxLength(50);

                entity.Property(e => e.AnnounceDate)
                    .HasColumnName("Announce_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AnnounceTitle)
                    .HasColumnName("Announce_Title")
                    .HasMaxLength(200);

                entity.Property(e => e.AnnounceTitleAr)
                    .HasColumnName("Announce_Title_ar")
                    .HasMaxLength(200);

                entity.Property(e => e.Findex).HasColumnName("findex");
            });

            modelBuilder.Entity<TwebArea>(entity =>
            {
                entity.ToTable("TWEB_Area");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Area).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfAreas>(entity =>
            {
                entity.ToTable("Twebwf_Areas");

                entity.Property(e => e.Id).HasColumnName("Area_ID");

                entity.Property(e => e.Area).HasColumnName("Area_name").HasMaxLength(50);
            });




            modelBuilder.Entity<TwebBenefits>(entity =>
            {
                entity.HasKey(e => e.BenefitsId);

                entity.ToTable("TWeb_Benefits");

                entity.Property(e => e.BenefitsId).HasColumnName("Benefits_ID");

                entity.Property(e => e.BenefitsDescription)
                    .HasColumnName("Benefits_Description")
                    .HasMaxLength(4000);

                entity.Property(e => e.BenefitsDescriptionShort)
                    .HasColumnName("Benefits_Description_Short")
                    .HasMaxLength(4000);

                entity.Property(e => e.BenefitsName)
                    .HasColumnName("Benefits_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.CatId).HasColumnName("Cat_ID");

                entity.Property(e => e.DiscountPercent)
                    .HasColumnName("Discount_Percent")
                    .HasMaxLength(500);

                entity.Property(e => e.DiscountType)
                    .HasColumnName("Discount_Type")
                    .HasMaxLength(500);

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<TwebBenefitsCat>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("TWeb_Benefits_Cat");

                entity.Property(e => e.CatId)
                    .HasColumnName("Cat_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CatName)
                    .HasColumnName("Cat_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebBuOrganization>(entity =>
            {
                entity.HasKey(e => e.BuOrganizationId)
                    .HasName("PK_Bu_Organization");

                entity.ToTable("TWebBu_Organization");

                entity.Property(e => e.BuOrganizationId)
                    .HasColumnName("Bu_Organization_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.BuOrganizationName)
                    .HasColumnName("Bu_Organization_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebCity>(entity =>
            {
                entity.ToTable("TWEB_City");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.City).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebClipping>(entity =>
            {
                entity.HasKey(e => e.ClippingId);

                entity.ToTable("TWebClipping");

                entity.Property(e => e.ClippingId).HasColumnName("Clipping_ID");

                entity.Property(e => e.ClippingDescr)
                    .HasColumnName("Clipping_Descr")
                    .HasMaxLength(4000);

                entity.Property(e => e.ClippingTitle)
                    .HasColumnName("Clipping_Title")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<TwebClippingVideo>(entity =>
            {
                entity.HasKey(e => e.ClippingId);

                entity.ToTable("TWebClipping_Video");

                entity.Property(e => e.ClippingId)
                    .HasColumnName("Clipping_ID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClippingDescr)
                    .HasColumnName("Clipping_Descr")
                    .HasMaxLength(4000);

                entity.Property(e => e.ClippingTitle)
                    .HasColumnName("Clipping_Title")
                    .HasMaxLength(4000);

                entity.Property(e => e.VidoeName).HasMaxLength(500);
            });

            modelBuilder.Entity<TwebConAttendanceSummary>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.ProjectId, e.JobListId });

                entity.ToTable("TWebCON_AttendanceSummary");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.JobListId)
                    .HasColumnName("JobList_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwebConAttendanceSummaryM>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.ProjectId });

                entity.ToTable("TWebCON_AttendanceSummary_m");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebConJobList>(entity =>
            {
                entity.HasKey(e => e.JobListId);

                entity.ToTable("TWebCON_JobList");

                entity.Property(e => e.JobListId)
                    .HasColumnName("JobList_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.JobListCat)
                    .HasColumnName("Job_List_Cat")
                    .HasMaxLength(20);

                entity.Property(e => e.JobListName)
                    .HasColumnName("JobList_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebConJobListCat>(entity =>
            {
                entity.HasKey(e => e.JobListCat);

                entity.ToTable("TWebCON_JobListCat");

                entity.Property(e => e.JobListCat)
                    .HasColumnName("Job_List_Cat")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.JobListCatName)
                    .HasColumnName("Job_List_Cat_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebContactList>(entity =>
            {
                entity.HasKey(e => e.ConId);

                entity.ToTable("TWEB_ContactList");

                entity.Property(e => e.ConId).HasColumnName("Con_ID");

                entity.Property(e => e.AccessCode).HasMaxLength(50);

                entity.Property(e => e.CarNo).HasMaxLength(50);

                entity.Property(e => e.ConEmail)
                    .HasColumnName("Con_Email")
                    .HasMaxLength(100);

                entity.Property(e => e.ConExt)
                    .HasColumnName("Con_Ext")
                    .HasMaxLength(50);

                entity.Property(e => e.ConName)
                    .HasColumnName("Con_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.ExternalNo)
                    .HasColumnName("External_No")
                    .HasMaxLength(50);

                entity.Property(e => e.Floor).HasMaxLength(50);

                entity.Property(e => e.IpPhone)
                    .HasColumnName("IP_Phone")
                    .HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.SubDepartmentId).HasColumnName("SubDepartment_ID");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);

                entity.HasOne(d => d.SubDepartment)
                    .WithMany(p => p.TwebContactList)
                    .HasForeignKey(d => d.SubDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWEB_ContactList_TWEB_SubDepartment");
            });

            modelBuilder.Entity<TwebDepartment>(entity =>
            {
                entity.HasKey(e => e.DepartmentId);

                entity.ToTable("TWeb_Department");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.BusUnite)
                    .HasColumnName("Bus_unite")
                    .HasMaxLength(10);

                entity.Property(e => e.DepatmentName)
                    .HasColumnName("Depatment_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebElearn>(entity =>
            {
                entity.HasKey(e => e.ElearnId);

                entity.ToTable("TWEB_ELearn");

                entity.Property(e => e.ElearnId).HasColumnName("ELearn_ID");

                entity.Property(e => e.BookName)
                    .HasColumnName("Book_Name")
                    .HasMaxLength(4000);

                entity.Property(e => e.ShortDescription)
                    .HasColumnName("Short_Description")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<TwebEmpDepartment>(entity =>
            {
                entity.HasKey(e => e.EmpDepartmentId)
                    .HasName("PK_Emp_Department");

                entity.ToTable("TWebEmp_Department");

                entity.Property(e => e.EmpDepartmentId)
                    .HasColumnName("Emp_Department_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmpDepartmentName)
                    .HasColumnName("Emp_Department_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebEmpGrade>(entity =>
            {
                entity.HasKey(e => e.EmpGradeId);

                entity.ToTable("TwebEmp_Grade");

                entity.Property(e => e.EmpGradeId)
                    .HasColumnName("Emp_Grade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmpGradeName)
                    .HasColumnName("Emp_Grade_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebHrAttendanceSummary>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.ProjectId, e.JobListId });

                entity.ToTable("TWebHR_AttendanceSummary");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.JobListId)
                    .HasColumnName("JobList_ID")
                    .HasMaxLength(20);

                entity.HasOne(d => d.JobList)
                    .WithMany(p => p.TwebHrAttendanceSummary)
                    .HasForeignKey(d => d.JobListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWebHR_AttendanceSummary_TWebHR_JobList");

                entity.HasOne(d => d.TwebHrAttendanceSummaryM)
                    .WithMany(p => p.TwebHrAttendanceSummary)
                    .HasForeignKey(d => new { d.Date, d.ProjectId })
                    .HasConstraintName("FK_TWebHR_AttendanceSummary_TWebHR_AttendanceSummary");
            });

            modelBuilder.Entity<TwebHrAttendanceSummaryM>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.ProjectId });

                entity.ToTable("TWebHR_AttendanceSummary_m");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Approved).HasDefaultValueSql("((0))");

                entity.Property(e => e.Revised).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebHrEmployee>(entity =>
            {
                entity.HasKey(e => e.EmployeeNo);

                entity.ToTable("TWebHR_Employee");

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IdCardNo)
                    .IsRequired()
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<TwebHrJobList>(entity =>
            {
                entity.HasKey(e => e.JobListId);

                entity.ToTable("TWebHR_JobList");

                entity.Property(e => e.JobListId)
                    .HasColumnName("JobList_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.JobListCat)
                    .HasColumnName("Job_List_Cat")
                    .HasMaxLength(20);

                entity.Property(e => e.JobListName)
                    .HasColumnName("JobList_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebHrJobListCat>(entity =>
            {
                entity.HasKey(e => e.JobListCat);

                entity.ToTable("TWebHR_JobListCat");

                entity.Property(e => e.JobListCat)
                    .HasColumnName("Job_List_Cat")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.JobListCatName)
                    .HasColumnName("Job_List_Cat_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebHrProject>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TWebHR_Project");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.ConcreteUser)
                    .HasColumnName("Concrete_User")
                    .HasMaxLength(20);

                entity.Property(e => e.HrUser)
                    .HasColumnName("HR_User")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectCat)
                    .HasColumnName("Project_Cat")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectManagerUser)
                    .HasColumnName("Project_Manager_User")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SecondLineUser)
                    .HasColumnName("Second_Line_User")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwebHrProjectCat>(entity =>
            {
                entity.HasKey(e => e.ProjectCat)
                    .HasName("PK_TWebHR_JobCat");

                entity.ToTable("TWebHR_ProjectCat");

                entity.Property(e => e.ProjectCat)
                    .HasColumnName("Project_Cat")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ProjectName)
                    .HasColumnName("Project_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebHrusers>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("TWebHRUsers");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(500);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.UserFullName)
                    .HasColumnName("User_Full_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebInfraStructureServices>(entity =>
            {
                entity.HasKey(e => e.InfraStructureServicesId)
                    .HasName("PK_InfraStructure_Services");

                entity.ToTable("TWebInfraStructure_Services");

                entity.Property(e => e.InfraStructureServicesId)
                    .HasColumnName("InfraStructure_Services_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.InfraStructureServicesName)
                    .HasColumnName("InfraStructure_Services_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebInternalServices>(entity =>
            {
                entity.HasKey(e => e.InternalServiceId);

                entity.ToTable("TWeb_InternalServices");

                entity.Property(e => e.InternalServiceId).HasColumnName("Internal_ServiceID");

                entity.Property(e => e.IntSerName)
                    .HasColumnName("Int_Ser_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebInternalTrainers>(entity =>
            {
                entity.ToTable("TWeb_InternalTrainers");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulativeGrade).HasMaxLength(50);

                entity.Property(e => e.CvName)
                    .HasColumnName("CV_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_ID");

                entity.Property(e => e.Faculty).HasMaxLength(50);

                entity.Property(e => e.GraduationYear).HasColumnName("Graduation_Year");

                entity.Property(e => e.HiringDate)
                    .HasColumnName("Hiring_Date")
                    .HasColumnType("date");

                entity.Property(e => e.InternalServiceId).HasColumnName("Internal_ServiceID");

                entity.Property(e => e.Major).HasMaxLength(100);

                entity.Property(e => e.MilitaryStatus).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(50);

                entity.Property(e => e.PostGrade)
                    .HasColumnName("Post_Grade")
                    .HasMaxLength(4000);

                entity.Property(e => e.PostGraduate)
                    .HasColumnName("Post_Graduate")
                    .HasMaxLength(100);

                entity.Property(e => e.PostUniversity)
                    .HasColumnName("Post_University")
                    .HasMaxLength(100);

                entity.Property(e => e.PostYear).HasColumnName("Post_Year");

                entity.Property(e => e.Programs).HasMaxLength(4000);

                entity.Property(e => e.Project)
                    .HasColumnName("project")
                    .HasMaxLength(100);

                entity.Property(e => e.Reasons).HasMaxLength(4000);

                entity.Property(e => e.University).HasMaxLength(100);
            });

            modelBuilder.Entity<TwebItEmployee>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("TWebIT_Employee");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_Hr_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ArabicName).HasMaxLength(500);

                entity.Property(e => e.BbService).HasColumnName("BB_Service");

                entity.Property(e => e.DeskPhone).HasMaxLength(500);

                entity.Property(e => e.DisplayName).HasMaxLength(500);

                entity.Property(e => e.EmailAddress).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.FullName).HasMaxLength(500);

                entity.Property(e => e.ItCompanyId).HasColumnName("IT_Company_ID");

                entity.Property(e => e.ItGroupIdId).HasColumnName("IT_Group_ID_ID");

                entity.Property(e => e.ItJobId).HasColumnName("IT_Job_ID");

                entity.Property(e => e.ItLocationId).HasColumnName("IT_Location_ID");

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.LocalPrinter).HasColumnName("Local_Printer");

                entity.Property(e => e.MidlleName).HasMaxLength(500);

                entity.Property(e => e.OfficePhone).HasMaxLength(500);

                entity.Property(e => e.PcName)
                    .HasColumnName("PC_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.PcOrLt)
                    .HasColumnName("PC_Or_LT")
                    .HasMaxLength(50);

                entity.Property(e => e.PrinteerNu)
                    .HasColumnName("Printeer_NU")
                    .HasMaxLength(500);

                entity.Property(e => e.ServiceStatus).HasColumnName("Service_Status");

                entity.Property(e => e.TelephoneNumber).HasMaxLength(500);

                entity.Property(e => e.UsbExceptions).HasColumnName("USB_Exceptions");

                entity.Property(e => e.Userprincipalname)
                    .HasColumnName("userprincipalname")
                    .HasMaxLength(500);

                entity.Property(e => e.Vbn).HasColumnName("VBN");

                entity.Property(e => e.WindowsAccount).HasMaxLength(500);
            });

            modelBuilder.Entity<TwebItawarenes>(entity =>
            {
                entity.HasKey(e => e.ItawarenesId);

                entity.ToTable("TWebITAwarenes");

                entity.Property(e => e.ItawarenesId)
                    .HasColumnName("ITAwarenes_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.ItawarenesName)
                    .HasColumnName("ITAwarenesName")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebItbusinessProcess>(entity =>
            {
                entity.HasKey(e => e.ItbusinessProcessId);

                entity.ToTable("TWebITBusinessProcess");

                entity.Property(e => e.ItbusinessProcessId)
                    .HasColumnName("ITBusinessProcess_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.ItbusinessProcessName)
                    .HasColumnName("ITBusinessProcess_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebItcommitments>(entity =>
            {
                entity.HasKey(e => e.ItcommitmentsyId)
                    .HasName("PK_ITWebCommitments");

                entity.ToTable("TWebITCommitments");

                entity.Property(e => e.ItcommitmentsyId)
                    .HasColumnName("ITCommitmentsy_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.ItcommitmentsName)
                    .HasColumnName("ITCommitments_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebItkpi>(entity =>
            {
                entity.HasKey(e => e.ItawarenesId);

                entity.ToTable("TWebITKPI");

                entity.Property(e => e.ItawarenesId)
                    .HasColumnName("ITAwarenes_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.ItawarenesName)
                    .HasColumnName("ITAwarenesName")
                    .HasMaxLength(500);

                entity.Property(e => e.Year).HasMaxLength(20);
            });

            modelBuilder.Entity<TwebItpolicy>(entity =>
            {
                entity.HasKey(e => e.ItpolicyId);

                entity.ToTable("TWebITPolicy");

                entity.Property(e => e.ItpolicyId)
                    .HasColumnName("ITPolicy_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.ItpolicyName)
                    .HasColumnName("ITPolicy_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebLog>(entity =>
            {
                entity.HasKey(e => e.Serl);

                entity.ToTable("TWEB_Log");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateOnly).HasColumnType("date");

                entity.Property(e => e.UserEmail)
                    .HasColumnName("User_Email")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebNews>(entity =>
            {
                entity.HasKey(e => e.NewsId)
                    .HasName("PK_Tnews");

                entity.ToTable("TWeb_News");

                entity.Property(e => e.NewsId).HasColumnName("News_ID");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.FIndex).HasColumnName("fIndex");

                entity.Property(e => e.Ftype)
                    .HasColumnName("ftype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NewsBody).HasColumnName("News_Body");

                entity.Property(e => e.NewsBodyAr)
                    .HasColumnName("News_Body_ar")
                    .HasMaxLength(200);

                entity.Property(e => e.NewsDate)
                    .HasColumnName("News_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NewsDescription)
                    .HasColumnName("News_Description")
                    .HasMaxLength(4000);

                entity.Property(e => e.NewsTitle)
                    .HasColumnName("News_Title")
                    .HasMaxLength(200);

                entity.Property(e => e.NewsTitleAr)
                    .HasColumnName("News_Title_ar")
                    .HasMaxLength(200);

                entity.Property(e => e.NewsType).HasColumnName("News_type");
            });

            modelBuilder.Entity<TwebProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TWebProjects");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ProjectName)
                    .HasColumnName("Project_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ShortDescription).HasColumnName("Short_Description");
            });

            modelBuilder.Entity<TwebQuality>(entity =>
            {
                entity.HasKey(e => e.QualityId);

                entity.ToTable("TWebQuality");

                entity.Property(e => e.QualityId)
                    .HasColumnName("QualityID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.QualityName)
                    .HasColumnName("Quality_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebServiceRequest>(entity =>
            {
                entity.HasKey(e => e.ReqNo);

                entity.ToTable("TWeb_Service_Request");

                entity.Property(e => e.ReqNo).HasColumnName("Req_No");

                entity.Property(e => e.BuOrganizationId)
                    .HasColumnName("Bu_Organization_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.EmpDepartmentId)
                    .HasColumnName("Emp_Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.EmpGrade)
                    .HasColumnName("Emp_Grade")
                    .HasMaxLength(20);

                entity.Property(e => e.EmpName)
                    .HasColumnName("Emp_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.EmpTitleId)
                    .HasColumnName("Emp_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.EmployNo).HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser).HasColumnName("In_User");

                entity.Property(e => e.RequesterName)
                    .HasColumnName("Requester_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.SiteOrLocation).HasMaxLength(500);
            });

            modelBuilder.Entity<TwebSubDepartment>(entity =>
            {
                entity.HasKey(e => e.SubDepartmentId)
                    .HasName("PK_TWEBSubDepartment");

                entity.ToTable("TWEB_SubDepartment");

                entity.Property(e => e.SubDepartmentId).HasColumnName("SubDepartment_ID");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.SubDepartmentName)
                    .HasColumnName("SubDepartment_Name")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.TwebSubDepartment)
                    .HasForeignKey(d => d.DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWEB_SubDepartment_TWeb_Department");
            });

            modelBuilder.Entity<Main_Departments>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("PK_Main_Departments");

                entity.ToTable("Main_Departments");

            });

            modelBuilder.Entity<TwebSummerTraining>(entity =>
            {
                entity.ToTable("TWeb_SummerTraining");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CvName)
                    .HasColumnName("CV_Name")
                    .HasMaxLength(800);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Faculty).HasMaxLength(500);

                entity.Property(e => e.Governorate).HasMaxLength(50);

                entity.Property(e => e.GraduationYear).HasColumnName("Graduation_Year");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Major).HasMaxLength(100);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(200);

                entity.Property(e => e.University).HasMaxLength(100);
            });

            modelBuilder.Entity<TwebSupportServices>(entity =>
            {
                entity.HasKey(e => e.SupportServicesId);

                entity.ToTable("TWebSupport_Services");

                entity.Property(e => e.SupportServicesId)
                    .HasColumnName("Support_Services_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasColumnName("File_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.SupportServicesName)
                    .HasColumnName("Support_Services_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebUser>(entity =>
            {
                entity.HasKey(e => e.FUserId);

                entity.ToTable("TWeb_User");

                entity.Property(e => e.FUserId).HasColumnName("fUser_ID");

                entity.Property(e => e.AddDate).HasColumnType("datetime");

                entity.Property(e => e.Admin).HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirmed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.FLastIp)
                    .HasColumnName("fLastIP")
                    .HasMaxLength(50);

                entity.Property(e => e.FLastLoginDate)
                    .HasColumnName("fLastLoginDate")
                    .HasColumnType("date");

                entity.Property(e => e.FUserName)
                    .HasColumnName("fUserName")
                    .HasMaxLength(500);

                entity.Property(e => e.FUserPassWord)
                    .HasColumnName("fUserPassWord")
                    .HasMaxLength(500);

                entity.Property(e => e.FamilyName).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.FullName).HasMaxLength(500);

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.LastLogin).HasColumnType("datetime");

                entity.Property(e => e.Manager).HasDefaultValueSql("((0))");

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(200);

                entity.Property(e => e.PersonalEmail).HasMaxLength(200);

                entity.Property(e => e.PhoneExt)
                    .HasColumnName("Phone_EXT")
                    .HasMaxLength(10);

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.UseNationaId)
                    .HasColumnName("UseNationaID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserContinuous).HasColumnName("User_Continuous");

                entity.Property(e => e.UserEmail)
                    .HasColumnName("User_Email")
                    .HasMaxLength(300);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.UserMobile1)
                    .HasColumnName("User_Mobile1")
                    .HasMaxLength(15);

                entity.Property(e => e.UserMobile2)
                    .HasColumnName("User_Mobile2")
                    .HasMaxLength(15);

                entity.Property(e => e.UserPassword)
                    .HasColumnName("User_Password")
                    .HasMaxLength(50);

                entity.Property(e => e.UserSignature)
                    .HasColumnName("User_Signature")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<TwebUserManagers>(entity =>
            {
                entity.HasKey(e => e.UserEmail);

                entity.ToTable("TWeb_User_Managers");

                entity.Property(e => e.UserEmail)
                    .HasColumnName("User_Email")
                    .HasMaxLength(300)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<TwebWfEmpEducation>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.RecordId });

                entity.ToTable("TWebWF_EmpEducation");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Collage).HasMaxLength(100);

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.To).HasColumnType("date");

                entity.Property(e => e.University).HasMaxLength(100);
            });

            modelBuilder.Entity<TwebWfEmpInterest>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.RecordId });

                entity.ToTable("TWebWF_EmpInterest");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebWfEmpLanguage>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.LangSkillLevelId, e.LanguageId })
                    .HasName("PK_TwebWF_EmpLanguage");

                entity.ToTable("TWebWF_EmpLanguage");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.LangSkillLevelId).HasColumnName("Lang_Skill_level_ID");

                entity.Property(e => e.LanguageId).HasColumnName("Language_ID");
            });

            modelBuilder.Entity<TwebWfEmpSkillsD>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.RecordId })
                    .HasName("PK_TwebWF_EmpSkills_d");

                entity.ToTable("TWebWF_EmpSkills_d");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.LangSkillLevelId).HasColumnName("Lang_Skill_level_ID");

                entity.Property(e => e.SkillsName)
                    .HasColumnName("Skills_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebWfEmpWorkExperience>(entity =>
            {
                entity.HasKey(e => new { e.UserHrCode, e.RecordId })
                    .HasName("PK_TwebWF_EmpWork_Experience");

                entity.ToTable("TWebWF_EmpWork_Experience");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CompanyName)
                    .HasColumnName("Company_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.IndustryId).HasColumnName("Industry_ID");

                entity.Property(e => e.JobLevel).HasColumnName("Job_Level");

                entity.Property(e => e.JobTitle)
                    .HasColumnName("Job_Title")
                    .HasMaxLength(100);

                entity.Property(e => e.PositionInCompany)
                    .HasColumnName("Position_in_Company")
                    .HasMaxLength(500);

                entity.Property(e => e.To).HasColumnType("date");

                entity.Property(e => e.WorkDescription)
                    .HasColumnName("Work_Description")
                    .HasMaxLength(3000);
            });
            modelBuilder.Entity<TwebWfEmployee>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("TWebWF_Employee");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountStatus)
                    .HasColumnName("Account_Status")
                    .HasMaxLength(20);

                entity.Property(e => e.AddDate).HasColumnType("datetime");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ArabicName)
                    .HasColumnName("Arabic_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.BbService).HasColumnName("BB_Service");

                entity.Property(e => e.Birthdate).HasColumnType("date");

                entity.Property(e => e.ChildrenCount).HasColumnName("Children_count");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Cv)
                    .HasColumnName("CV")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId)
                    .IsRequired()
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DeskPhone)
                    .HasColumnName("Desk_Phone")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImgProfile).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewId).HasColumnName("InterviewID");

                entity.Property(e => e.LastName)
                    .HasColumnName("Last_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.LinkedIn).HasMaxLength(200);

                entity.Property(e => e.LocationId)
                    .IsRequired()
                    .HasColumnName("Location_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Manager).HasMaxLength(50);

                entity.Property(e => e.ManagerCode)
                    .HasColumnName("Manager_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.MiddleName)
                    .HasColumnName("Middle_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Mobile1).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(200);



                entity.Property(e => e.PersonalEmail).HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PrinterNu)
                    .HasColumnName("Printer_Nu")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResidenceId)
                    .HasColumnName("Residence_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Skype).HasMaxLength(200);

                entity.Property(e => e.StName)
                    .HasColumnName("ST_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Street).HasMaxLength(500);

                entity.Property(e => e.SupportFun)
                    .HasColumnName("Support_Fun")
                    .HasMaxLength(100);

                entity.Property(e => e.TagName)
                    .HasColumnName("Tag_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Usb).HasColumnName("USB");

                entity.Property(e => e.Vbn).HasColumnName("VBN");

                entity.Property(e => e.WindowsAccount)
                    .HasColumnName("Windows_Account")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebWfEmployeeExt>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("TwebWF_Employee_EXT");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountStatus)
                    .HasColumnName("Account_Status")
                    .HasMaxLength(20);

                entity.Property(e => e.AddDate).HasColumnType("datetime");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ArabicName)
                    .HasColumnName("Arabic_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.BbService).HasColumnName("BB_Service");

                entity.Property(e => e.Birthdate).HasColumnType("date");

                entity.Property(e => e.ChildrenCount).HasColumnName("Children_count");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Cv)
                    .HasColumnName("CV")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId)
                    .IsRequired()
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DeskPhone)
                    .HasColumnName("Desk_Phone")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImgProfile).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewId).HasColumnName("InterviewID");

                entity.Property(e => e.LastName)
                    .HasColumnName("Last_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.LinkedIn).HasMaxLength(200);

                entity.Property(e => e.LocationId)
                    .IsRequired()
                    .HasColumnName("Location_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Manager).HasMaxLength(50);

                entity.Property(e => e.ManagerCode)
                    .HasColumnName("Manager_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.MiddleName)
                    .HasColumnName("Middle_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Mobile1).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.NationalId)
                    .HasColumnName("NationalID")
                    .HasMaxLength(200);

                entity.Property(e => e.Pcorlab)
                    .HasColumnName("PCORLab")
                    .HasMaxLength(50);

                entity.Property(e => e.PersonalEmail).HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PrinterNu)
                    .HasColumnName("Printer_Nu")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ResidenceId)
                    .HasColumnName("Residence_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Skype).HasMaxLength(200);

                entity.Property(e => e.StName)
                    .HasColumnName("ST_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Street).HasMaxLength(500);

                entity.Property(e => e.SupportFun)
                    .HasColumnName("Support_Fun")
                    .HasMaxLength(100);

                entity.Property(e => e.TagName)
                    .HasColumnName("Tag_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Usb).HasColumnName("USB");

                entity.Property(e => e.Vbn).HasColumnName("VBN");

                entity.Property(e => e.WindowsAccount)
                    .HasColumnName("Windows_Account")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebWfMoqAuthority>(entity =>
            {
                entity.HasKey(e => e.AuthId);

                entity.ToTable("TWebWF_MOQ_Authority");

                entity.Property(e => e.AuthId).HasColumnName("Auth_ID");

                entity.Property(e => e.PageName).HasMaxLength(50);

                entity.Property(e => e.QmId).HasColumnName("QM_ID");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebWfMoqEval>(entity =>
            {
                entity.HasKey(e => e.EvalNo)
                    .HasName("PK_TWebWF_MOQ_Eval_1");

                entity.ToTable("TWebWF_MOQ_Eval");

                entity.Property(e => e.EvalNo).HasColumnName("Eval_No");

                entity.Property(e => e.CriteriaAr)
                    .HasColumnName("Criteria_AR")
                    .HasMaxLength(500);

                entity.Property(e => e.CriteriaEn)
                    .HasColumnName("Criteria_EN")
                    .HasMaxLength(500);

                entity.Property(e => e.QmId).HasColumnName("QM_ID");
            });

            modelBuilder.Entity<TwebWfMoqEvalD>(entity =>
            {
                entity.HasKey(e => new { e.UserRating, e.EvalNo, e.Rank, e.ToUser })
                    .HasName("PK_TWebWF_MOQ_Eval_d_2");

                entity.ToTable("TWebWF_MOQ_Eval_d");

                entity.Property(e => e.UserRating)
                    .HasColumnName("User_Rating")
                    .HasMaxLength(50);

                entity.Property(e => e.EvalNo).HasColumnName("Eval_No");

                entity.Property(e => e.ToUser)
                    .HasColumnName("To_User")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RecordNo).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TwebWfMoqEvalDOld>(entity =>
            {
                entity.HasKey(e => e.RecordNo)
                    .HasName("PK_TWebWF_MOQ_Eval_d");

                entity.ToTable("TWebWF_MOQ_Eval_d_OLD");

                entity.Property(e => e.EvalNo).HasColumnName("Eval_No");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.UserRating)
                    .HasColumnName("User_Rating")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebWfMoqEvalOld>(entity =>
            {
                entity.HasKey(e => e.EvalNo)
                    .HasName("PK_TWebWF_MOQ_Eval");

                entity.ToTable("TWebWF_MOQ_Eval_OLD");

                entity.Property(e => e.EvalNo).HasColumnName("Eval_No");

                entity.Property(e => e.CriteriaAr)
                    .HasColumnName("Criteria_AR")
                    .HasMaxLength(500);

                entity.Property(e => e.CriteriaEn)
                    .HasColumnName("Criteria_EN")
                    .HasMaxLength(500);

                entity.Property(e => e.QmId).HasColumnName("QM_ID");
            });

            modelBuilder.Entity<TwebWfMoqMaster>(entity =>
            {
                entity.HasKey(e => e.QmId)
                    .HasName("PK_TWebWF_MOQ_Master_1");

                entity.ToTable("TWebWF_MOQ_Master");

                entity.Property(e => e.QmId).HasColumnName("QM_ID");

                entity.Property(e => e.DateNo).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");
            });

            modelBuilder.Entity<TwebWfMoqMasterOld>(entity =>
            {
                entity.HasKey(e => e.QmId)
                    .HasName("PK_TWebWF_MOQ_Master");

                entity.ToTable("TWebWF_MOQ_Master_OLD");

                entity.Property(e => e.QmId).HasColumnName("QM_ID");

                entity.Property(e => e.DateNo).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");
            });

            modelBuilder.Entity<TwebWfVacationBalance>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("TWebWF_VacationBalance");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DaysLeft).HasColumnName("Days_Left");

                entity.Property(e => e.DaysTaken).HasColumnName("Days_Taken");

                entity.Property(e => e.VacationBalance).HasColumnName("Vacation_Balance");
            });

            modelBuilder.Entity<TwebwfAchievementCategory>(entity =>
            {
                entity.HasKey(e => e.AchievementCategory);

                entity.ToTable("TWEBWF_AchievementCategory");

                entity.Property(e => e.AchievementCategory)
                    .HasColumnName("Achievement_Category")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AchievementCategoryName)
                    .HasColumnName("Achievement_CategoryName")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfAchievementType>(entity =>
            {
                entity.HasKey(e => e.AchievementTypeId);

                entity.ToTable("TWEBWF_AchievementType");

                entity.Property(e => e.AchievementTypeId)
                    .HasColumnName("AchievementType_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AchievementType).HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfAchieverOfTheYear>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_AchieverOfTheYear");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.AchievementCategory)
                    .HasColumnName("Achievement_Category")
                    .HasMaxLength(20);

                entity.Property(e => e.AchievementDescription)
                    .HasColumnName("Achievement_Description")
                    .HasMaxLength(4000);

                entity.Property(e => e.AchievementTypeId)
                    .HasColumnName("AchievementType_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfAlbums>(entity =>
            {
                entity.HasKey(e => e.AlbumId);

                entity.ToTable("TWEBWF_Albums");

                entity.Property(e => e.AlbumId).HasColumnName("Album_ID");

                entity.Property(e => e.AlbDesc).HasColumnName("Alb_Desc");

                entity.Property(e => e.AlbName)
                    .HasColumnName("Alb_Name")
                    .HasMaxLength(1000);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfAlbumsDet>(entity =>
            {
                entity.ToTable("TWEBWF_Albums_Det");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AlbumId).HasColumnName("Album_ID");

                entity.Property(e => e.ImgDesc).HasMaxLength(2000);

                entity.Property(e => e.ImgName).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsMain).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.TwebwfAlbumsDet)
                    .HasForeignKey(d => d.AlbumId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TWEBWF_Albums_Det_TWEBWF_Albums");
            });

            modelBuilder.Entity<TwebwfApprovalPathBusinessUnitD>(entity =>
            {
                entity.HasKey(e => new { e.ApprovalPathId, e.DepartmentId, e.ServiceId });

                entity.ToTable("TWEBWF_ApprovalPathBusinessUnit_d");

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.HasOne(d => d.ApprovalPath)
                    .WithMany(p => p.TwebwfApprovalPathBusinessUnitD)
                    .HasForeignKey(d => d.ApprovalPathId)
                    .HasConstraintName("FK_TWEBWF_ApprovalPathBusinessUnit_d_TWEBWF_ApprovalPath_m");
            });

            modelBuilder.Entity<TwebwfApprovalPathD>(entity =>
            {
                entity.HasKey(e => new { e.ApprovalPathId, e.TitleId, e.DetailApprovalId });

                entity.ToTable("TWEBWF_ApprovalPath_d");

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DetailApprovalId).HasColumnName("Detail_Approval_ID");

                entity.Property(e => e.DefaultHrCode)
                    .HasColumnName("Default_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.TitleIdAlternative)
                    .HasColumnName("Title_ID_Alternative")
                    .HasMaxLength(20);

                entity.HasOne(d => d.ApprovalPath)
                    .WithMany(p => p.TwebwfApprovalPathD)
                    .HasForeignKey(d => d.ApprovalPathId)
                    .HasConstraintName("FK_TWEBWF_ApprovalPath_d_TWEBWF_ApprovalPath_m1");
            });

            modelBuilder.Entity<TwebwfApprovalPathExceptionD>(entity =>
            {
                entity.HasKey(e => new { e.DetailApprovalId, e.TitleId, e.Serial });

                entity.ToTable("TWEBWF_ApprovalPath_Exception_d");

                entity.Property(e => e.DetailApprovalId).HasColumnName("Detail_Approval_ID");

                entity.Property(e => e.TitleId)
                    .HasColumnName("Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Serial).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TwebwfApprovalPathM>(entity =>
            {
                entity.HasKey(e => e.ApprovalPathId);

                entity.ToTable("TWEBWF_ApprovalPath_m");

                entity.Property(e => e.ApprovalPathId)
                    .HasColumnName("Approval_Path_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathTitle)
                    .HasColumnName("Approval_Path_Title")
                    .HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.NeedDirectorApproval).HasDefaultValueSql("((0))");

                entity.Property(e => e.NeedManagerApproval).HasDefaultValueSql("((0))");

                entity.Property(e => e.NeedProjectManagerApproval).HasDefaultValueSql("((0))");
            });





            modelBuilder.Entity<TwebwfBusinessCard>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_BusinessCard");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.CardName).HasMaxLength(300);

                entity.Property(e => e.CardNo).HasMaxLength(20);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.CostCenter)
                    .HasColumnName("Cost_Center")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ExtNo)
                    .HasColumnName("Ext_No")
                    .HasMaxLength(20);

                entity.Property(e => e.FaxNo)
                    .HasColumnName("Fax_No")
                    .HasMaxLength(20);

                entity.Property(e => e.MobileNo)
                    .HasColumnName("Mobile_No")
                    .HasMaxLength(20);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfBusinessCardManagement>(entity =>
            {
                entity.HasKey(e => e.BusinessCardId);

                entity.ToTable("TWEBWF_BusinessCardManagement");

                entity.Property(e => e.BusinessCardId).HasColumnName("BusinessCard_ID");

                entity.Property(e => e.FullData).HasColumnType("ntext");

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<TwebwfBusinessMission>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_BusinessMission");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromAmpm)
                    .HasColumnName("DateFromAMPM")
                    .HasMaxLength(20);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToAmpm)
                    .HasColumnName("DateToAMPM")
                    .HasMaxLength(20);

                entity.Property(e => e.HourFrom).HasMaxLength(50);

                entity.Property(e => e.HourTo).HasMaxLength(50);

                entity.Property(e => e.MissionLocation).HasMaxLength(20);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfChangeManager>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_ChangeManager");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ManagerCode)
                    .HasColumnName("Manager_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfCodes>(entity =>
            {
                entity.ToTable("TWEBWF_Codes");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfDepartment>(entity =>
            {
                entity.HasKey(e => e.DepartmentId);

                entity.ToTable("TWEBWF_Department");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.DepartmentName)
                    .HasColumnName("Department_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Isproject)
                    .HasColumnName("ISProject")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Shortcut).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfEmbassy>(entity =>
            {
                entity.HasKey(e => e.EmbassyId);

                entity.ToTable("TWEBWF_Embassy");

                entity.Property(e => e.EmbassyId)
                    .HasColumnName("Embassy_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmbassyName)
                    .HasColumnName("Embassy_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfEmbassyLetter>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_EmbassyLetter");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddSalary).HasMaxLength(50);

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.EmbassyId)
                    .HasColumnName("Embassy_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.PassportNo).HasMaxLength(200);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Purpose).HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SocialInsuranceNumber)
                    .HasColumnName("Social_Insurance_Number")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfForgetSign>(entity =>
            {
                entity.HasKey(e => e.RequestNo)
                    .HasName("PK_TWEBWF_ForgetSing");

                entity.ToTable("TWEBWF_ForgetSign");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasMaxLength(20);

                entity.Property(e => e.DateFromAmpm)
                    .HasColumnName("DateFromAMPM")
                    .HasMaxLength(20);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SingDate).HasColumnType("datetime");

                entity.Property(e => e.SingType).HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfGetHrcode>(entity =>
            {
                entity.ToTable("TWEBWF_GetHRCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fname)
                    .HasColumnName("FName")
                    .HasMaxLength(50);

                entity.Property(e => e.HrCode)
                    .HasColumnName("HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lname)
                    .HasColumnName("LName")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfGrade>(entity =>
            {
                entity.HasKey(e => e.GradeId);

                entity.ToTable("TWEBWF_Grade");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeName)
                    .HasColumnName("Grade_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfItaccessRight>(entity =>
            {
                entity.HasKey(e => e.AccessId)
                    .HasName("PK_TWEBWF_ITAccessRight");

                entity.ToTable("TWEBWF_ITAccess_Right");

                entity.Property(e => e.AccessId).HasColumnName("Access_ID");

                entity.Property(e => e.AccessName)
                    .HasColumnName("Access_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.IsUserAccount).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfItapplicationItem>(entity =>
            {
                entity.HasKey(e => e.ApplicationItemId)
                    .HasName("PK_TWEBWF_ApplicationItem");

                entity.ToTable("TWEBWF_ITApplicationItem");

                entity.Property(e => e.ApplicationItemId).HasColumnName("ApplicationITem_ID");

                entity.Property(e => e.ApplicationItemName)
                    .HasColumnName("ApplicationITem_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.EstimatePrice).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItassetsEquipments>(entity =>
            {
                entity.HasKey(e => e.AssetsId);

                entity.ToTable("TWEBWF_ITAssets_Equipments");

                entity.Property(e => e.AssetsId).HasColumnName("Assets_ID");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DeviceName).HasMaxLength(50);

                entity.Property(e => e.DeviceSerial).HasMaxLength(100);

                entity.Property(e => e.HardWareItemId).HasColumnName("HardWareItem_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItdelivered>(entity =>
            {
                entity.HasKey(e => e.DeliveryNo)
                    .HasName("PK_TWEBWF_ITDelivered_1");

                entity.ToTable("TWEBWF_ITDelivered");

                entity.Property(e => e.DeliveryNo).HasColumnName("Delivery_No");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeliveryHrCode)
                    .HasColumnName("Delivery_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfItdeliveredD>(entity =>
            {
                entity.HasKey(e => new { e.DeliveryDetId, e.DeliveryNo })
                    .HasName("PK_TWEBWF_ITDelivered_d_1");

                entity.ToTable("TWEBWF_ITDelivered_d");

                entity.Property(e => e.DeliveryDetId)
                    .HasColumnName("DeliveryDet_ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DeliveryNo).HasColumnName("Delivery_No");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.DelServiceId).HasColumnName("DelService_ID");

                entity.Property(e => e.DeviceName).HasMaxLength(50);

                entity.Property(e => e.HardWareItemId).HasColumnName("HardWareItem_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.HasOne(d => d.DeliveryNoNavigation)
                    .WithMany(p => p.TwebwfItdeliveredD)
                    .HasForeignKey(d => d.DeliveryNo)
                    .HasConstraintName("FK_TWEBWF_ITDelivered_d_TWEBWF_ITDelivered");
            });

            modelBuilder.Entity<TwebwfItdeliveryServices>(entity =>
            {
                entity.HasKey(e => e.DelServiceId);

                entity.ToTable("TWEBWF_ITDelivery_Services");

                entity.Property(e => e.DelServiceId).HasColumnName("DelService_ID");

                entity.Property(e => e.ServiceName)
                    .HasColumnName("Service_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItexecutiveEquipments>(entity =>
            {
                entity.HasKey(e => e.ExeId)
                    .HasName("PK_TWEBWF_ITExecutive_Others");

                entity.ToTable("TWEBWF_ITExecutive_Equipments");

                entity.Property(e => e.ExeId).HasColumnName("Exe_ID");

                entity.Property(e => e.AssignUser)
                    .HasColumnName("Assign_User")
                    .HasMaxLength(20);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DeviceName).HasMaxLength(50);

                entity.Property(e => e.DeviceSerial).HasMaxLength(100);

                entity.Property(e => e.HardWareItemId).HasColumnName("HardWareItem_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwebwfItgroupDescription>(entity =>
            {
                entity.HasKey(e => e.GroupDescId)
                    .HasName("PK_TWEBWF_ITGroups");

                entity.ToTable("TWEBWF_ITGroup_Description");

                entity.Property(e => e.GroupDescId).HasColumnName("Group_Desc_ID");

                entity.Property(e => e.GroupDescName)
                    .HasColumnName("Group_Desc_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItgroups>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("PK_TWEBWF_ITGroups_1");

                entity.ToTable("TWEBWF_ITGroups");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.GroupDescId).HasColumnName("Group_Desc_ID");

                entity.Property(e => e.GroupName)
                    .HasColumnName("Group_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfIthardWareItem>(entity =>
            {
                entity.HasKey(e => e.HardWareItemId)
                    .HasName("PK_TWEBWF_HardWareItem");

                entity.ToTable("TWEBWF_ITHardWareItem");

                entity.Property(e => e.HardWareItemId).HasColumnName("HardWareItem_ID");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.ConIp)
                    .HasColumnName("ConIP")
                    .HasMaxLength(50);

                entity.Property(e => e.ConNetWork).HasMaxLength(50);

                entity.Property(e => e.ConUsb)
                    .HasColumnName("ConUSB")
                    .HasMaxLength(50);

                entity.Property(e => e.DeviceBrand).HasMaxLength(50);

                entity.Property(e => e.DeviceMax).HasMaxLength(50);

                entity.Property(e => e.DeviceModel).HasMaxLength(50);

                entity.Property(e => e.DevicePorts).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.EstimatePrice).HasMaxLength(50);

                entity.Property(e => e.GroupDescId).HasColumnName("Group_Desc_ID");

                entity.Property(e => e.GroupId).HasColumnName("Group_ID");

                entity.Property(e => e.HardModel).HasMaxLength(50);

                entity.Property(e => e.HardSize).HasMaxLength(50);

                entity.Property(e => e.HardType).HasMaxLength(50);

                entity.Property(e => e.HardWareItemName)
                    .IsRequired()
                    .HasColumnName("HardWareItem_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Hdmodel)
                    .HasColumnName("HDModel")
                    .HasMaxLength(50);

                entity.Property(e => e.Hdsize)
                    .HasColumnName("HDSize")
                    .HasMaxLength(50);

                entity.Property(e => e.Hdtype)
                    .HasColumnName("HDType")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemSerial).HasMaxLength(100);

                entity.Property(e => e.MaxReq).HasColumnName("Max_Req");

                entity.Property(e => e.MinStock).HasColumnName("Min_Stock");

                entity.Property(e => e.ParentItemId).HasColumnName("ParentItem_ID");

                entity.Property(e => e.ProcesSpeed).HasMaxLength(50);

                entity.Property(e => e.ProcesType).HasMaxLength(50);

                entity.Property(e => e.RamSize).HasMaxLength(50);

                entity.Property(e => e.RamType).HasMaxLength(50);

                entity.Property(e => e.RequiredEmp)
                    .HasColumnName("Required_Emp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.TypeId).HasColumnName("Type_ID");

                entity.Property(e => e.UnitType)
                    .HasColumnName("Unit_Type")
                    .HasMaxLength(50);

                entity.Property(e => e.Vgachipset)
                    .HasColumnName("VGAChipset")
                    .HasMaxLength(50);

                entity.Property(e => e.Vgasize)
                    .HasColumnName("VGASize")
                    .HasMaxLength(50);

                entity.Property(e => e.Vgatype)
                    .HasColumnName("VGAType")
                    .HasMaxLength(50);

                entity.Property(e => e.Windows).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfIthardWareItemtemp>(entity =>
            {
                entity.HasKey(e => e.HardWareItemId);

                entity.ToTable("TWEBWF_ITHardWareItemtemp");

                entity.Property(e => e.HardWareItemId)
                    .HasColumnName("HardWareItem_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemSerial).HasMaxLength(100);
            });

            modelBuilder.Entity<TwebwfItincludePr>(entity =>
            {
                entity.HasKey(e => e.IncludeId)
                    .HasName("PK_TWEBWF_ITIncludePR_1");

                entity.ToTable("TWEBWF_ITIncludePR");

                entity.Property(e => e.IncludeId).HasColumnName("Include_ID");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.InDate)
                    .HasColumnName("IN_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUserCode)
                    .HasColumnName("IN_User_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.NecessaryFor).HasMaxLength(4000);

                entity.Property(e => e.OrderParty)
                    .HasColumnName("Order_Party")
                    .HasMaxLength(1000);

                entity.Property(e => e.PrId).HasColumnName("PrID");

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwebwfItincludePrD>(entity =>
            {
                entity.HasKey(e => new { e.IncludeDetId, e.IncludeId });

                entity.ToTable("TWEBWF_ITIncludePR_d");

                entity.Property(e => e.IncludeDetId)
                    .HasColumnName("IncludeDet_ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IncludeId).HasColumnName("Include_ID");

                entity.Property(e => e.Approved).HasDefaultValueSql("((1))");

                entity.Property(e => e.Chk).HasColumnName("chk");

                entity.Property(e => e.HardWareItemId)
                    .IsRequired()
                    .HasColumnName("HardWareItem_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.RejectedHrCode)
                    .HasColumnName("Rejected_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.HasOne(d => d.Include)
                    .WithMany(p => p.TwebwfItincludePrD)
                    .HasForeignKey(d => d.IncludeId)
                    .HasConstraintName("FK_TWEBWF_ITIncludePR_d_TWEBWF_ITIncludePR");
            });

            modelBuilder.Entity<TwebwfItitemTypes>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("TWEBWF_ITItemTypes");

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.TypeName)
                    .HasColumnName("Type_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItnewUser>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_ITNewUser");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.CostId)
                    .HasColumnName("Cost_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EmployeeName).HasMaxLength(400);

                entity.Property(e => e.JustifyApplication)
                    .HasColumnName("Justify_Application")
                    .HasMaxLength(500);

                entity.Property(e => e.JustifyServices)
                    .HasColumnName("Justify_Services")
                    .HasMaxLength(500);

                entity.Property(e => e.JustifySoftware)
                    .HasColumnName("Justify_Software")
                    .HasMaxLength(500);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfItnewUserApplicationD>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationItemId, e.RequestNo })
                    .HasName("PK_TWEBWF_ITApplication_d");

                entity.ToTable("TWEBWF_ITNewUserApplication_d");

                entity.Property(e => e.ApplicationItemId)
                    .HasColumnName("ApplicationITem_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.Chk).HasColumnName("chk");
            });

            modelBuilder.Entity<TwebwfItnewUserHardWareD>(entity =>
            {
                entity.HasKey(e => new { e.HardWareItemId, e.RequestNo });

                entity.ToTable("TWEBWF_ITNewUser_HardWare_d");

                entity.Property(e => e.HardWareItemId)
                    .HasColumnName("HardWareItem_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.Chk).HasColumnName("chk");
            });

            modelBuilder.Entity<TwebwfItnewUserServiceItemD>(entity =>
            {
                entity.HasKey(e => new { e.ItserviceItemId, e.RequestNo });

                entity.ToTable("TWEBWF_ITNewUserServiceItem_d");

                entity.Property(e => e.ItserviceItemId)
                    .HasColumnName("ITServiceItem_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.Chk).HasColumnName("chk");
            });

            modelBuilder.Entity<TwebwfItnewUserSoftWareD>(entity =>
            {
                entity.HasKey(e => new { e.SoftwareItemId, e.RequestNo });

                entity.ToTable("TWEBWF_ITNewUserSoftWare_d");

                entity.Property(e => e.SoftwareItemId)
                    .HasColumnName("SoftwareITem_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.Chk).HasColumnName("chk");
            });

            modelBuilder.Entity<TwebwfItrequestAccessRight>(entity =>
            {
                entity.HasKey(e => e.RequestNo)
                    .HasName("PK_TWEBWF_ITRequestAccessRight");

                entity.ToTable("TWEBWF_ITRequest_AccessRight");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FilePdf).HasMaxLength(50);

                entity.Property(e => e.OwnerEmailDisabled)
                    .HasColumnName("Owner_EmailDisabled")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerFullName)
                    .HasColumnName("Owner_FullName")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.OwnerLocation)
                    .HasColumnName("Owner_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerMobile)
                    .HasColumnName("Owner_Mobile")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerTitle)
                    .HasColumnName("Owner_Title")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReRequestCode).HasColumnName("Re_RequestCode");

                entity.Property(e => e.RejectedHrCode)
                    .HasColumnName("Rejected_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestHrCode)
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfItrequestAccessRightD>(entity =>
            {
                entity.ToTable("TWEBWF_ITRequest_AccessRight_d");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccessId).HasColumnName("Access_ID");

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.HasOne(d => d.Access)
                    .WithMany(p => p.TwebwfItrequestAccessRightD)
                    .HasForeignKey(d => d.AccessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWEBWF_ITRequest_AccessRight_d_TWEBWF_ITAccess_Right");

                entity.HasOne(d => d.RequestNoNavigation)
                    .WithMany(p => p.TwebwfItrequestAccessRightD)
                    .HasForeignKey(d => d.RequestNo)
                    .HasConstraintName("FK_TWEBWF_ITRequest_AccessRight_d_TWEBWF_ITRequest_AccessRight");
            });

            modelBuilder.Entity<TwebwfItrequestApplications>(entity =>
            {
                entity.HasKey(e => e.RequestNo)
                    .HasName("PK_TWEBWF_Request_Applications");

                entity.ToTable("TWEBWF_ITRequest_Applications");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.OwnerFullName)
                    .HasColumnName("Owner_FullName")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerGroupPermission)
                    .HasColumnName("Owner_GroupPermission")
                    .HasMaxLength(100);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.OwnerLocation)
                    .HasColumnName("Owner_Location")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerMobile)
                    .HasColumnName("Owner_Mobile")
                    .HasMaxLength(50);

                entity.Property(e => e.OwnerTitle)
                    .HasColumnName("Owner_Title")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.RejectedHrCode)
                    .HasColumnName("Rejected_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestHrCode)
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfItrequestApplicationsD>(entity =>
            {
                entity.ToTable("TWEBWF_ITRequest_Applications_d");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationItemId).HasColumnName("ApplicationITem_ID");

                entity.Property(e => e.Other).HasMaxLength(50);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.HasOne(d => d.RequestNoNavigation)
                    .WithMany(p => p.TwebwfItrequestApplicationsD)
                    .HasForeignKey(d => d.RequestNo)
                    .HasConstraintName("FK_TWEBWF_ITRequest_Applications_d_TWEBWF_ITRequest_Applications");
            });

            modelBuilder.Entity<TwebwfItrequestClose>(entity =>
            {
                entity.HasKey(e => e.ClId);

                entity.ToTable("TWEBWF_ITRequestClose");

                entity.Property(e => e.ClId).HasColumnName("CL_ID");

                entity.Property(e => e.ClBody)
                    .HasColumnName("CL_Body")
                    .HasMaxLength(500);

                entity.Property(e => e.ClRequestNo).HasColumnName("CL_RequestNo");

                entity.Property(e => e.ClService)
                    .HasColumnName("CL_Service")
                    .HasMaxLength(50);

                entity.Property(e => e.ClToEmail)
                    .HasColumnName("CL_ToEmail")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItrequestContract>(entity =>
            {
                entity.HasKey(e => e.RequestNo)
                    .HasName("PK_IT_Contract_D_1");

                entity.ToTable("TWEBWF_ITRequest_Contract");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comment).HasMaxLength(50);

                entity.Property(e => e.Confirm1).HasColumnName("confirm_1");

                entity.Property(e => e.Confirm1User)
                    .HasColumnName("Confirm_1_USer")
                    .HasMaxLength(50);

                entity.Property(e => e.Confirm1UserDate)
                    .HasColumnName("Confirm_1_USer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Confirm2)
                    .HasColumnName("Confirm_2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm2User)
                    .HasColumnName("Confirm_2_USer")
                    .HasMaxLength(50);

                entity.Property(e => e.Confirm2UserDate)
                    .HasColumnName("Confirm_2_USer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Confirm3)
                    .HasColumnName("Confirm_3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Confirm3User)
                    .HasColumnName("Confirm_3_USer")
                    .HasMaxLength(50);

                entity.Property(e => e.Confirm3UserDate)
                    .HasColumnName("Confirm_3_USer_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_USer")
                    .HasMaxLength(50);

                entity.Property(e => e.Paymenttype).HasColumnName("paymenttype");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReRequestCode).HasColumnName("Re_RequestCode");

                entity.Property(e => e.RejectedHrCode)
                    .HasColumnName("Rejected_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestHrCode)
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItrequestEquipment>(entity =>
            {
                entity.HasKey(e => e.RequestNo)
                    .HasName("PK_TWEBWF_Hardware_Request");

                entity.ToTable("TWEBWF_ITRequest_Equipment");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.LocationId)
                    .HasColumnName("Location_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ReRequestCode).HasColumnName("Re_RequestCode");

                entity.Property(e => e.RequestHrCode)
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                //entity.Property(e => e.MainDepartment).HasColumnType("int").HasColumnName("MainDepartment");
                

            });

            modelBuilder.Entity<TwebwfItrequestEquipmentD>(entity =>
            {
                entity.HasKey(e => new { e.HardWareItemId, e.RequestNo, e.OwnerHrCode })
                    .HasName("PK_TWEBWF_Hardware_Request_d");

                entity.ToTable("TWEBWF_ITRequest_Equipment_d");

                entity.Property(e => e.HardWareItemId)
                    .HasColumnName("HardWareItem_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Approved).HasDefaultValueSql("((1))");

                entity.Property(e => e.Chk).HasColumnName("chk");

                entity.Property(e => e.RejectedHrCode)
                    .HasColumnName("Rejected_HR_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfItrequestMobileService>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_ITRequest_MobileService");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.IsPermanent).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ReRequestCode).HasColumnName("Re_RequestCode");

                entity.Property(e => e.RejectedHrCode)
                    .HasColumnName("Rejected_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestHrCode)
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfItserviceItem>(entity =>
            {
                entity.HasKey(e => e.ItserviceItemId);

                entity.ToTable("TWEBWF_ITServiceItem");

                entity.Property(e => e.ItserviceItemId).HasColumnName("ITServiceItem_ID");

                entity.Property(e => e.ItserviceItemName)
                    .HasColumnName("ITServiceItem_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfItsoftwareItem>(entity =>
            {
                entity.HasKey(e => e.SoftwareItemId);

                entity.ToTable("TWEBWF_ITSoftwareItem");

                entity.Property(e => e.SoftwareItemId).HasColumnName("SoftwareITem_ID");

                entity.Property(e => e.EstimatePrice).HasMaxLength(50);

                entity.Property(e => e.SoftwareItemName)
                    .HasColumnName("SoftwareITem_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfLocation>(entity =>
            {
                entity.HasKey(e => e.LocationId);

                entity.ToTable("TWEBWF_Location");

                entity.Property(e => e.LocationId)
                    .HasColumnName("Location_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DirectorUserHrCode)
                    .HasColumnName("Director_User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.LocationName)
                    .HasColumnName("Location_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.NewProjectCode).HasColumnName("New_ProjectCode");

                entity.Property(e => e.OldLocationId).HasColumnName("OldLocationID");

                entity.Property(e => e.OldLocationName).HasMaxLength(500);

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfLogHrrequests>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("TWEBWF_LogHRRequests");

                entity.Property(e => e.LogId).HasColumnName("Log_ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfMapTitle>(entity =>
            {
                entity.ToTable("TWEBWF_MapTitle");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<TwebwfMissionLocation>(entity =>
            {
                entity.HasKey(e => e.MissionLocation);

                entity.ToTable("TWEBWF_MissionLocation");

                entity.Property(e => e.MissionLocation)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.MissionLocationTitle)
                    .HasColumnName("MissionLocation_Title")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfOfficialHoliday>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("TWEBWF_Official_Holiday");

                entity.Property(e => e.Serial).ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Descrp).HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfOprDirectors>(entity =>
            {
                entity.HasKey(e => e.OprId);

                entity.ToTable("TWEBWF_OprDirectors");

                entity.Property(e => e.OprId).HasColumnName("OPR_ID");

                entity.Property(e => e.OprAssistant)
                    .HasColumnName("OPR_Assistant")
                    .HasMaxLength(50);

                entity.Property(e => e.OprAssistant1)
                    .HasColumnName("OPR_Assistant1")
                    .HasMaxLength(50);

                entity.Property(e => e.OprEmail)
                    .HasColumnName("OPR_Email")
                    .HasMaxLength(50);

                entity.Property(e => e.OprHrcode)
                    .HasColumnName("OPR_HRCode")
                    .HasMaxLength(50);

                entity.Property(e => e.OprName)
                    .HasColumnName("OPR_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfPermission>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_Permission");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasMaxLength(20);

                entity.Property(e => e.DateFromAmpm)
                    .HasColumnName("DateFromAMPM")
                    .HasMaxLength(20);

                entity.Property(e => e.DateTo).HasMaxLength(20);

                entity.Property(e => e.DateToAmpm)
                    .HasColumnName("DateToAMPM")
                    .HasMaxLength(20);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.PermissionDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TwebwfPriority>(entity =>
            {
                entity.HasKey(e => e.PriorityId);

                entity.ToTable("TWEBWF_Priority");

                entity.Property(e => e.PriorityId)
                    .HasColumnName("Priority_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.PriorityName)
                    .HasColumnName("Priority_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfProjectSubType>(entity =>
            {
                entity.HasKey(e => e.SubGroupId);

                entity.ToTable("TWEBWF_ProjectSubType");

                entity.Property(e => e.SubGroupId)
                    .HasColumnName("SubGroup_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SubGroupName)
                    .HasColumnName("SubGroup_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfProjectTypes>(entity =>
            {
                entity.HasKey(e => e.ProTypId);

                entity.ToTable("TWEBWF_ProjectTypes");

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");

                entity.Property(e => e.ProTypName)
                    .HasColumnName("ProTyp_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("TWEBWF_Projects");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.AreaId).HasColumnName("area_id");

                entity.Property(e => e.EndAt)
                    .HasColumnName("end_at")
                    .HasColumnType("date");

                entity.Property(e => e.GroupPolicyId).HasColumnName("GroupPolicy_ID");

                entity.Property(e => e.HrAssWages)
                    .HasColumnName("HR_AssWages")
                    .HasMaxLength(50);

                entity.Property(e => e.HrCoordinator)
                    .HasColumnName("HR_Coordinator")
                    .HasMaxLength(50);

                entity.Property(e => e.HrSectionHead)
                    .HasColumnName("HR_SectionHead")
                    .HasMaxLength(50);

                entity.Property(e => e.ProTypId).HasColumnName("ProTyp_ID");

                entity.Property(e => e.ProjectAdmin).HasMaxLength(50);

                entity.Property(e => e.ProjectDirector)
                    .HasColumnName("Project_Director")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectManager)
                    .HasColumnName("Project_Manager")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectsDirector)
                    .HasColumnName("Projects_Director")
                    .HasMaxLength(50);

                entity.Property(e => e.StartAt)
                    .HasColumnName("start_at")
                    .HasColumnType("date");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SubGroupId).HasColumnName("SubGroup_ID");

                entity.Property(e => e.Unit).HasMaxLength(20);

                entity.Property(e => e.WorkDays).HasColumnName("work_days");
            });

            modelBuilder.Entity<TwebwfRss>(entity =>
            {
                entity.HasKey(e => e.RssId);

                entity.ToTable("TWEBWF_RSS");

                entity.Property(e => e.RssId).HasColumnName("RSS_ID");

                entity.Property(e => e.RssInDate)
                    .HasColumnName("RSS_InDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RssInUser)
                    .HasColumnName("RSS_InUser")
                    .HasMaxLength(50);

                entity.Property(e => e.RssSubject)
                    .HasColumnName("RSS_Subject")
                    .HasMaxLength(50);

                entity.Property(e => e.RssTitle)
                    .HasColumnName("RSS_Title")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfService>(entity =>
            {
                entity.HasKey(e => e.ServiceId);

                entity.ToTable("TWEBWF_Service");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.PageName).HasMaxLength(500);

                entity.Property(e => e.ReportName).HasMaxLength(200);

                entity.Property(e => e.SerachFiledName).HasMaxLength(200);

                entity.Property(e => e.ServiceName)
                    .HasColumnName("Service_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.System).HasMaxLength(20);

                entity.Property(e => e.TableName).HasMaxLength(200);
            });

            modelBuilder.Entity<TwebwfSingType>(entity =>
            {
                entity.HasKey(e => e.SingType);

                entity.ToTable("TWEBWF_SingType");

                entity.Property(e => e.SingType)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.SingTypeName)
                    .HasColumnName("SingType_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfSupportEmployee>(entity =>
            {
                entity.HasKey(e => e.HrCode);

                entity.ToTable("TWEBWF_SupportEmployee");

                entity.Property(e => e.HrCode)
                    .HasColumnName("HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfSupportTicket>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_SupportTicket");

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.AgreementNo)
                    .HasColumnName("Agreement_No")
                    .HasMaxLength(500);

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("Application_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AssignUserId)
                    .HasColumnName("Assign_User_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.PriorityId)
                    .HasColumnName("Priority_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(500);

                entity.Property(e => e.ScNo)
                    .HasColumnName("SC_No")
                    .HasMaxLength(500);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.Property(e => e.SupportMessage).HasMaxLength(4000);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfTickets>(entity =>
            {
                entity.ToTable("TWEBWF_Tickets");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DoneBy).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedEndDate).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.RequestedBy).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpDate)
                    .HasColumnName("up_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upuser)
                    .HasColumnName("upuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfTitle>(entity =>
            {
                entity.HasKey(e => e.TitleId);

                entity.ToTable("TWEBWF_Title");

                entity.Property(e => e.TitleId).HasColumnName("Title_ID");

                entity.Property(e => e.DepartmentId)
                    .HasColumnName("Department_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.TitleName)
                    .HasColumnName("Title_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.UpDate)
                    .HasColumnName("UP_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("UP_User")
                    .HasMaxLength(50);
            });



            modelBuilder.Entity<TWEBWFSubsidiaries>(entity =>
            {
                entity.HasKey(e => e.SubID);

                entity.ToTable("TWEBWF_Subsidiaries");

                entity.Property(e => e.SubID).HasColumnName("Sub_ID");

                entity.Property(e => e.SubName).HasColumnName("Sub_Name").HasMaxLength(50);
                entity.Property(e => e.SubIcone).HasColumnName("Sub_Icone").HasMaxLength(50);
                entity.Property(e => e.SubDesc).HasColumnName("Sub_Desc").HasMaxLength(2000);
                entity.Property(e => e.Image1).HasMaxLength(50);
                entity.Property(e => e.Image2).HasMaxLength(50);
                entity.Property(e => e.Image3).HasMaxLength(50);
                entity.Property(e => e.Image4).HasMaxLength(50);
                entity.Property(e => e.InDate).HasColumnName("In_Date").HasColumnType("datetime");
                entity.Property(e => e.InUser).HasColumnName("In_User").HasMaxLength(50);
            });


            modelBuilder.Entity<TWEBWFMedicalRequest>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.ToTable("TWEBWF_MedicalRequest");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.HrCode).HasColumnName("HrCode").HasMaxLength(200);
                entity.Property(e => e.ServiceDate).HasColumnName("Service_Date").HasColumnType("datetime");
                entity.Property(e => e.Beneficiaryname).HasColumnName("Beneficiary_name").HasMaxLength(500);
                entity.Property(e => e.Servicetype).HasColumnName("Service_type").HasMaxLength(50);
                entity.Property(e => e.LabType).HasColumnName("Lab_Type").HasMaxLength(50);
                entity.Property(e => e.InDate).HasColumnName("In_Date").HasColumnType("datetime");
            });



            modelBuilder.Entity<TwebwfVacation>(entity =>
            {
                entity.HasKey(e => e.RequestNo);

                entity.ToTable("TWEBWF_Vacation");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovalPathId).HasColumnName("Approval_Path_ID");

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FileName).HasMaxLength(1000);

                entity.Property(e => e.NewComer).HasDefaultValueSql("((0))");

                entity.Property(e => e.NplusEmail)
                    .HasColumnName("NPlusEmail")
                    .HasMaxLength(500);

                entity.Property(e => e.OwnerHrCode)
                    .HasColumnName("Owner_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ReplacedWith).HasColumnType("datetime");

                entity.Property(e => e.ReplacedWithTo).HasColumnType("datetime");

                entity.Property(e => e.RequestHrCode)
                    .IsRequired()
                    .HasColumnName("Request_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.Responsible).HasMaxLength(50);

                entity.Property(e => e.ServiceId)
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.VacationType).HasMaxLength(20);
            });

            modelBuilder.Entity<TwebwfVacationTmp>(entity =>
            {
                entity.HasKey(e => e.UserHrCode);

                entity.ToTable("TWEBWF_Vacation_tmp");

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.VacationBalance).HasColumnName("Vacation_Balance");
            });

            modelBuilder.Entity<TwebwfVacationType>(entity =>
            {
                entity.HasKey(e => e.VacationType);

                entity.ToTable("TWEBWF_VacationType");

                entity.Property(e => e.VacationType)
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.VacationTypeType)
                    .HasColumnName("VacationType_Type")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwebwfVideoportal>(entity =>
            {
                entity.ToTable("TWEBWF_Videoportal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImageName).HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.IsMain).HasDefaultValueSql("((0))");

                entity.Property(e => e.VideoName).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfVideos>(entity =>
            {
                entity.ToTable("TWEBWF_Videos");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.IsMain).HasDefaultValueSql("((0))");

                entity.Property(e => e.VideoName).HasMaxLength(50);
            });

            modelBuilder.Entity<TwebwfWorkFlow>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("TWEBWF_WorkFlow");

                entity.Property(e => e.Comments).HasMaxLength(2000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DetailApprovalId).HasColumnName("Detail_Approval_ID");

                entity.Property(e => e.Read).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestNo).HasColumnName("Request_No");

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubmitDate).HasColumnType("datetime");

                entity.Property(e => e.SubmitedToUser)
                    .HasColumnName("Submited_To_User")
                    .HasMaxLength(20);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("User_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Twebwfresidence>(entity =>
            {
                entity.HasKey(e => e.ResidenceId);

                entity.ToTable("TWEBWFResidence");

                entity.Property(e => e.ResidenceId)
                    .HasColumnName("Residence_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.ResidenceName)
                    .HasColumnName("Residence_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TworkPackage>(entity =>
            {
                entity.HasKey(e => e.WorkPackageId);

                entity.ToTable("TWorkPackage");

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AdPaymentIdManager)
                    .HasColumnName("AD_Payment_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AdPaymentIdTeam)
                    .HasColumnName("AD_Payment_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.DisciplineCode)
                    .IsRequired()
                    .HasColumnName("Discipline_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.DisciplineCodeNew)
                    .HasColumnName("Discipline_Code_New")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LongLeadItem).HasDefaultValueSql("((0))");

                entity.Property(e => e.MedHigh).HasColumnName("Med_High");

                entity.Property(e => e.MedLow).HasColumnName("Med_Low");

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.NewCode).HasMaxLength(20);

                entity.Property(e => e.NewName).HasMaxLength(2000);

                entity.Property(e => e.PaymentsondeliveryIdManager)
                    .HasColumnName("Paymentsondelivery_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentsondeliveryIdTeam)
                    .HasColumnName("Paymentsondelivery_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionIdManager)
                    .HasColumnName("Retention_ID_Manager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionIdTeam)
                    .HasColumnName("Retention_ID_Team")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkGroupId)
                    .HasColumnName("Work_Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackage)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.WorkTypeId)
                    .HasColumnName("Work_Type_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TworkPackageNewWithCode>(entity =>
            {
                entity.HasKey(e => e.Serial);

                entity.ToTable("TWorkPackage_NEwWithCode");

                entity.Property(e => e.DisciplineCodeNew)
                    .HasColumnName("Discipline_Code_New")
                    .HasMaxLength(20);

                entity.Property(e => e.NewCode).HasMaxLength(20);

                entity.Property(e => e.NewName).HasMaxLength(2000);

                entity.Property(e => e.WorkGroupId)
                    .HasColumnName("Work_Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .IsRequired()
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkTypeId)
                    .HasColumnName("Work_Type_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TworkPackageProjet>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.WorkPackageId });

                entity.ToTable("TWorkPackage_Projet");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.WorkPackageId)
                    .HasColumnName("WorkPackage_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PlanningDate).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TworkPackageProjet)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWorkPackage_Projet_TProject");
            });

            modelBuilder.Entity<TworkPackageWorkGroup>(entity =>
            {
                entity.HasKey(e => e.WorkGroupId);

                entity.ToTable("TWorkPackage_WorkGroup");

                entity.Property(e => e.WorkGroupId)
                    .HasColumnName("Work_Group_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.WorkGroupName)
                    .HasColumnName("Work_Group_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TworkPackageWorkType>(entity =>
            {
                entity.HasKey(e => e.WorkTypeId);

                entity.ToTable("TWorkPackage_WorkType");

                entity.Property(e => e.WorkTypeId)
                    .HasColumnName("Work_Type_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.WorkTypeName)
                    .HasColumnName("Work_Type_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwsBStock>(entity =>
            {
                entity.HasKey(e => new { e.FiscalYear, e.ItemId, e.StockId })
                    .HasName("PK_TWS_B_Balance");

                entity.ToTable("TWS_B_Stock");

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TaxSalesPerc).HasColumnName("TaxSales_Perc");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");
            });

            modelBuilder.Entity<TwsComplainsD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId })
                    .HasName("PK_TWS_Complains");

                entity.ToTable("TWS_Complains_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Complains)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsComplainsD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Complains_d_TJobOrder_m");
            });

            modelBuilder.Entity<TwsComplainsMaintainD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId });

                entity.ToTable("TWS_Complains_Maintain_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Complains)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsComplainsMaintainD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Complains_Maintain_d_TJobOrder_Maintain_m");
            });

            modelBuilder.Entity<TwsCountry>(entity =>
            {
                entity.HasKey(e => new { e.CountryId, e.CountryName });

                entity.ToTable("TWS_Country");

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_ID")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryName)
                    .HasColumnName("Country_Name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TwsCustomer>(entity =>
            {
                entity.HasKey(e => e.CustId);

                entity.ToTable("TWS_Customer");

                entity.Property(e => e.CustId)
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CustName)
                    .HasColumnName("Cust_Name")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwsEquipementType>(entity =>
            {
                entity.HasKey(e => e.EquipementTypeId);

                entity.ToTable("TWS_EquipementType");

                entity.Property(e => e.EquipementTypeId)
                    .HasColumnName("EquipementTypeID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.EquipementTypeName).HasMaxLength(500);
            });

            modelBuilder.Entity<TwsExternalProcess>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId });

                entity.ToTable("TWS_ExternalProcess");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.ExternalCost).HasColumnName("External_Cost");

                entity.Property(e => e.ExternalProcess)
                    .IsRequired()
                    .HasColumnName("External_Process")
                    .HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsExternalProcess)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_ExternalProcess_TJobOrder_m");
            });

            modelBuilder.Entity<TwsExternalProcessMaintain>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.RecordId });

                entity.ToTable("TWS_ExternalProcess_Maintain");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.ExternalCost).HasColumnName("External_Cost");

                entity.Property(e => e.ExternalProcess)
                    .IsRequired()
                    .HasColumnName("External_Process")
                    .HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsExternalProcessMaintain)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_ExternalProcess_Maintain_TJobOrder_Maintain_m");
            });

            modelBuilder.Entity<TwsFuelD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.EquipementId });

                entity.ToTable("TWS_Fuel_d");

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.EquipementId)
                    .HasColumnName("Equipement_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.StandByHours).HasColumnName("StandBy_Hours");

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsFuelD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Fuel_d_TWS_Fuel_m");
            });

            modelBuilder.Entity<TwsFuelM>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("TWS_Fuel_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwsInspection>(entity =>
            {
                entity.HasKey(e => e.InspectionId);

                entity.ToTable("TWS_Inspection");

                entity.Property(e => e.InspectionId)
                    .HasColumnName("Inspection_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.InspectionName)
                    .IsRequired()
                    .HasColumnName("Inspection_Name")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwsInspectionsD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.InspectionId });

                entity.ToTable("TWS_Inspections_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.InspectionId)
                    .HasColumnName("Inspection_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsInspectionsD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Inspections_d_TJobOrder_m");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.TwsInspectionsD)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Inspections_d_TWS_Inspection");
            });

            modelBuilder.Entity<TwsInspectionsMaintainD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.InspectionId });

                entity.ToTable("TWS_Inspections_Maintain_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.InspectionId)
                    .HasColumnName("Inspection_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsInspectionsMaintainD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Inspections_Maintain_d_TJobOrder_Maintain_m");

                entity.HasOne(d => d.Inspection)
                    .WithMany(p => p.TwsInspectionsMaintainD)
                    .HasForeignKey(d => d.InspectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Inspections_Maintain_d_TWS_Inspection");
            });

            modelBuilder.Entity<TwsItem>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_TSparePart");

                entity.ToTable("TWS_Item");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetTag).HasMaxLength(20);

                entity.Property(e => e.CatId)
                    .HasColumnName("Cat_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Made).HasMaxLength(500);

                entity.Property(e => e.PartNo).HasMaxLength(200);

                entity.Property(e => e.Specifications).HasMaxLength(500);

                entity.Property(e => e.Unit).HasMaxLength(20);
            });

            modelBuilder.Entity<TwsItemAlt>(entity =>
            {
                entity.HasKey(e => new { e.ItemId, e.AltItemId });

                entity.ToTable("TWS_Item_Alt");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AltItemId)
                    .HasColumnName("Alt_Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Ava).HasColumnName("AVA");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TwsItemAlt)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_TWS_Item_Alt_TWS_Item");
            });

            modelBuilder.Entity<TwsItemCat>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("TWS_Item_Cat");

                entity.Property(e => e.CatId)
                    .HasColumnName("Cat_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.CatName)
                    .HasColumnName("Cat_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<TwsItemOpenBalance>(entity =>
            {
                entity.HasKey(e => new { e.ItemId, e.StockId });

                entity.ToTable("TWS_Item_Open_Balance");

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwsJob>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("TWS_Job");

                entity.Property(e => e.JobId)
                    .HasColumnName("Job_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.JobName).HasMaxLength(500);
            });

            modelBuilder.Entity<TwsPrOrderD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ItemId });

                entity.ToTable("TWS_Pr_Order_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsPrOrderD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Pr_Request_d_TWS_Pr_Request_m");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TwsPrOrderD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Pr_Request_d_TWS_Item");
            });

            modelBuilder.Entity<TwsPrOrderM>(entity =>
            {
                entity.HasKey(e => e.DocNo)
                    .HasName("PK_TWS_Pr_Request_m");

                entity.ToTable("TWS_Pr_Order_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Closed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JobOrderId)
                    .HasColumnName("JobOrder_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.TwsPrOrderM)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_TWS_Pr_Order_m_TJobOrder_m");
            });

            modelBuilder.Entity<TwsPurchaseD>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DocNo, e.ItemId })
                    .HasName("PK_TWS_Purchase_d_1");

                entity.ToTable("TWS_Purchase_d");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaxSalesPerc).HasColumnName("TaxSales_Perc");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.Property(e => e.UsedItem).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TwsPurchaseD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Purchase_d_TWS_Item");

                entity.HasOne(d => d.TwsPurchaseM)
                    .WithMany(p => p.TwsPurchaseD)
                    .HasForeignKey(d => new { d.StockId, d.DocNo })
                    .HasConstraintName("FK_TWS_Purchase_d_TWS_Purchase_m");
            });

            modelBuilder.Entity<TwsPurchaseM>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DocNo });

                entity.ToTable("TWS_Purchase_m");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("Invoice_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("Invoice_No")
                    .HasMaxLength(200);

                entity.Property(e => e.JobOrderId)
                    .HasColumnName("JobOrder_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.PrOrderNo)
                    .HasColumnName("Pr_Order_No")
                    .HasMaxLength(20);

                entity.Property(e => e.SuppId)
                    .IsRequired()
                    .HasColumnName("Supp_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SupplyOrderNo)
                    .HasColumnName("Supply_Order_No")
                    .HasMaxLength(200);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.TwsPurchaseM)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_TWS_Purchase_m_TJobOrder_m");

                entity.HasOne(d => d.PrOrderNoNavigation)
                    .WithMany(p => p.TwsPurchaseM)
                    .HasForeignKey(d => d.PrOrderNo)
                    .HasConstraintName("FK_TWS_Purchase_m_TWS_Pr_Order_m");
            });

            modelBuilder.Entity<TwsSalesD>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DocNo, e.ItemId })
                    .HasName("PK_TWS_Sales_d_1");

                entity.ToTable("TWS_Sales_d");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaxSalesPerc).HasColumnName("TaxSales_Perc");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.Property(e => e.UsedItem).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TwsSalesD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Sales_d_TWS_Item");

                entity.HasOne(d => d.TwsSalesM)
                    .WithMany(p => p.TwsSalesD)
                    .HasForeignKey(d => new { d.StockId, d.DocNo })
                    .HasConstraintName("FK_TWS_Sales_d_TWS_Sales_m");
            });

            modelBuilder.Entity<TwsSalesM>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DocNo });

                entity.ToTable("TWS_Sales_m");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.CustId)
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JobOrderId)
                    .HasColumnName("JobOrder_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.StockRequestNo)
                    .HasColumnName("Stock_RequestNo")
                    .HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.TwsSalesM)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_TWS_Sales_m_TJobOrder_m");
            });

            modelBuilder.Entity<TwsSalesReturnD>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DocNo, e.ItemId });

                entity.ToTable("TWS_Sales_Return_d");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.Property(e => e.TaxSalesPerc).HasColumnName("TaxSales_Perc");

                entity.Property(e => e.UnitPrice).HasColumnName("Unit_Price");

                entity.Property(e => e.UsedItem).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TwsSalesReturnD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Sales_Return_d_TWS_Item");

                entity.HasOne(d => d.TwsSalesReturnM)
                    .WithMany(p => p.TwsSalesReturnD)
                    .HasForeignKey(d => new { d.StockId, d.DocNo })
                    .HasConstraintName("FK_TWS_Sales_Return_d_TWS_Sales_Return_m");
            });

            modelBuilder.Entity<TwsSalesReturnM>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DocNo });

                entity.ToTable("TWS_Sales_Return_m");

                entity.Property(e => e.StockId)
                    .HasColumnName("Stock_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.CustId)
                    .HasColumnName("Cust_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.FiscalYear)
                    .HasColumnName("Fiscal_Year")
                    .HasMaxLength(9);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JobOrderId)
                    .HasColumnName("JobOrder_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.LastDocNo)
                    .IsRequired()
                    .HasColumnName("LastDoc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TwsStockLocation>(entity =>
            {
                entity.HasKey(e => new { e.StockLocationId, e.StockLocationName });

                entity.ToTable("TWS_StockLocation");

                entity.Property(e => e.StockLocationId)
                    .HasColumnName("StockLocation_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StockLocationName)
                    .HasColumnName("StockLocation_Name")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TwsStockOrderD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.ItemId });

                entity.ToTable("TWS_Stock_Order_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ItemId)
                    .HasColumnName("Item_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.LastDateIssue).HasColumnType("datetime");

                entity.Property(e => e.LastJobOrder).HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsStockOrderD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Stock_Order_d_TWS_Stock_Order_m");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TwsStockOrderD)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Stock_Order_d_TWS_Item");
            });

            modelBuilder.Entity<TwsStockOrderM>(entity =>
            {
                entity.HasKey(e => e.DocNo);

                entity.ToTable("TWS_Stock_Order_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Closed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DbId)
                    .HasColumnName("DB_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.Descrp).HasMaxLength(500);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(4);

                entity.Property(e => e.JobOrderId)
                    .HasColumnName("JobOrder_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.ModDate)
                    .HasColumnName("Mod_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModUser)
                    .HasColumnName("Mod_User")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TwsSupplier>(entity =>
            {
                entity.HasKey(e => e.SuppId);

                entity.ToTable("TWS_Supplier");

                entity.Property(e => e.SuppId)
                    .HasColumnName("Supp_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ContactPerson)
                    .HasColumnName("Contact_Person")
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.SuppName)
                    .IsRequired()
                    .HasColumnName("Supp_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Vat)
                    .HasColumnName("VAT")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TwsTechnican>(entity =>
            {
                entity.HasKey(e => e.TechnicanId);

                entity.ToTable("TWS_Technican");

                entity.Property(e => e.TechnicanId)
                    .HasColumnName("Technican_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.JobId)
                    .HasColumnName("Job_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.TechnicanName)
                    .IsRequired()
                    .HasColumnName("Technican_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.WorkLocation).HasMaxLength(500);
            });

            modelBuilder.Entity<TwsTechnicanD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.TechnicanId });

                entity.ToTable("TWS_Technican_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.TechnicanId)
                    .HasColumnName("Technican_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsTechnicanD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Technican_d_TJobOrder_m");

                entity.HasOne(d => d.Technican)
                    .WithMany(p => p.TwsTechnicanD)
                    .HasForeignKey(d => d.TechnicanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Technican_d_TWS_Technican");
            });

            modelBuilder.Entity<TwsTechnicanMaintainD>(entity =>
            {
                entity.HasKey(e => new { e.DocNo, e.TechnicanId });

                entity.ToTable("TWS_Technican_Maintain_d");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .HasMaxLength(20);

                entity.Property(e => e.TechnicanId)
                    .HasColumnName("Technican_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.TwsTechnicanMaintainD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_TWS_Technican_Maintain_d_TJobOrder_Maintain_m");

                entity.HasOne(d => d.Technican)
                    .WithMany(p => p.TwsTechnicanMaintainD)
                    .HasForeignKey(d => d.TechnicanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TWS_Technican_Maintain_d_TWS_Technican");
            });

            modelBuilder.Entity<TypeTaxDeduct>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("_@TypeTaxDeduct");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.TypeDeduct)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeDeductEn)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TypeTaxDeductG>(entity =>
            {
                entity.HasKey(e => e.TypeId);

                entity.ToTable("_@TypeTaxDeduct_g");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.TypeDeduct)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TypeDeductEn).HasMaxLength(50);
            });

            modelBuilder.Entity<TypesAcc>(entity =>
            {
                entity.HasKey(e => e.TypesAcc1);

                entity.ToTable("_@Types_Acc");

                entity.Property(e => e.TypesAcc1)
                    .HasColumnName("Types_Acc")
                    .HasMaxLength(5)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccNature).HasDefaultValueSql("((0))");

                entity.Property(e => e.BGeneral).HasColumnName("B_General");

                entity.Property(e => e.CheckCurrency).HasColumnName("Check_Currency");

                entity.Property(e => e.ClassificationIncomeStatement).HasMaxLength(50);

                entity.Property(e => e.IsAccCashSlandPurshase).HasColumnName("IsAccCash_SLAndPurshase");

                entity.Property(e => e.IsAutoAccumulatedDep).HasColumnName("IsAuto_AccumulatedDep");

                entity.Property(e => e.IsAutoConsignment).HasColumnName("IsAuto_Consignment");

                entity.Property(e => e.IsAutoCostMtr).HasColumnName("IsAuto_CostMtr");

                entity.Property(e => e.IsAutoExpDep).HasColumnName("IsAuto_ExpDep");

                entity.Property(e => e.IsAutoInsuranceConSupp).HasColumnName("IsAuto_InsuranceConSupp");

                entity.Property(e => e.IsAutoInsuranceCustCon).HasColumnName("IsAuto_InsuranceCustCon");

                entity.Property(e => e.IsAutoMkcust).HasColumnName("IsAuto_MKCust");

                entity.Property(e => e.IsAutoPrePaidContSupp).HasColumnName("IsAuto_PrePaidContSupp");

                entity.Property(e => e.IsAutoPrePaidCustCont).HasColumnName("IsAuto_PrePaidCustCont");

                entity.Property(e => e.IsAutoSales).HasColumnName("IsAuto_Sales");

                entity.Property(e => e.IsAutoStorageContSupp).HasColumnName("IsAuto_StorageContSupp");

                entity.Property(e => e.IsAutoStorageCustCont).HasColumnName("IsAuto_StorageCustCont");

                entity.Property(e => e.IsAutoTempDeduct).HasColumnName("IsAuto_TempDeduct");

                entity.Property(e => e.IsAutoTempDeductCustCont).HasColumnName("IsAuto_TempDeductCustCont");

                entity.Property(e => e.IsCustMk).HasColumnName("IsCustMK");

                entity.Property(e => e.IsPandLAccumulated).HasColumnName("IsPAndL_Accumulated");

                entity.Property(e => e.IsPandLPeriod).HasColumnName("IsPAndL_Period");

                entity.Property(e => e.IsTaxDeductForComp).HasColumnName("IsTaxDeduct_ForComp");

                entity.Property(e => e.IsTaxDeductForOth).HasColumnName("IsTaxDeduct_ForOth");

                entity.Property(e => e.IsWorkUnderContCont).HasColumnName("IsWorkUnderCont_Cont");

                entity.Property(e => e.IsWorkUnderContExp).HasColumnName("IsWorkUnderCont_Exp");

                entity.Property(e => e.IsWorkUnderContMtr).HasColumnName("IsWorkUnderCont_Mtr");

                entity.Property(e => e.MainAcc).HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlName)
                    .HasColumnName("Mdl_Name")
                    .HasMaxLength(20);

                entity.Property(e => e.ParentTypes).HasMaxLength(5);

                entity.Property(e => e.TypesName)
                    .IsRequired()
                    .HasColumnName("Types_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.TypesNameEn)
                    .HasColumnName("Types_Name_En")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TypesAccBak>(entity =>
            {
                entity.HasKey(e => e.TypesAcc);

                entity.ToTable("_@Types_Acc_Bak");

                entity.Property(e => e.TypesAcc)
                    .HasColumnName("Types_Acc")
                    .HasMaxLength(5)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccNature).HasDefaultValueSql("((0))");

                entity.Property(e => e.BGeneral).HasColumnName("B_General");

                entity.Property(e => e.IsAccCashSlandPurshase).HasColumnName("IsAccCash_SLAndPurshase");

                entity.Property(e => e.IsAutoAccumulatedDep).HasColumnName("IsAuto_AccumulatedDep");

                entity.Property(e => e.IsAutoConsignment).HasColumnName("IsAuto_Consignment");

                entity.Property(e => e.IsAutoCostMtr).HasColumnName("IsAuto_CostMtr");

                entity.Property(e => e.IsAutoExpDep).HasColumnName("IsAuto_ExpDep");

                entity.Property(e => e.IsAutoInsuranceConSupp).HasColumnName("IsAuto_InsuranceConSupp");

                entity.Property(e => e.IsAutoInsuranceCustCon).HasColumnName("IsAuto_InsuranceCustCon");

                entity.Property(e => e.IsAutoMkcust).HasColumnName("IsAuto_MKCust");

                entity.Property(e => e.IsAutoPrePaidContSupp).HasColumnName("IsAuto_PrePaidContSupp");

                entity.Property(e => e.IsAutoPrePaidCustCont).HasColumnName("IsAuto_PrePaidCustCont");

                entity.Property(e => e.IsAutoSales).HasColumnName("IsAuto_Sales");

                entity.Property(e => e.IsAutoStorageContSupp).HasColumnName("IsAuto_StorageContSupp");

                entity.Property(e => e.IsAutoStorageCustCont).HasColumnName("IsAuto_StorageCustCont");

                entity.Property(e => e.IsAutoTempDeduct).HasColumnName("IsAuto_TempDeduct");

                entity.Property(e => e.IsAutoTempDeductCustCont).HasColumnName("IsAuto_TempDeductCustCont");

                entity.Property(e => e.IsCustMk).HasColumnName("IsCustMK");

                entity.Property(e => e.IsPandLAccumulated).HasColumnName("IsPAndL_Accumulated");

                entity.Property(e => e.IsPandLPeriod).HasColumnName("IsPAndL_Period");

                entity.Property(e => e.IsTaxDeductForComp).HasColumnName("IsTaxDeduct_ForComp");

                entity.Property(e => e.IsTaxDeductForOth).HasColumnName("IsTaxDeduct_ForOth");

                entity.Property(e => e.IsWorkUnderContCont).HasColumnName("IsWorkUnderCont_Cont");

                entity.Property(e => e.IsWorkUnderContExp).HasColumnName("IsWorkUnderCont_Exp");

                entity.Property(e => e.IsWorkUnderContMtr).HasColumnName("IsWorkUnderCont_Mtr");

                entity.Property(e => e.MainAcc).HasDefaultValueSql("((0))");

                entity.Property(e => e.MdlName)
                    .HasColumnName("Mdl_Name")
                    .HasMaxLength(20);

                entity.Property(e => e.ParentTypes).HasMaxLength(5);

                entity.Property(e => e.TypesName)
                    .IsRequired()
                    .HasColumnName("Types_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.TypesNameEn)
                    .HasColumnName("Types_Name_En")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TypesDepositChecks>(entity =>
            {
                entity.HasKey(e => e.TypesNo);

                entity.ToTable("_@Types_DepositChecks");

                entity.HasIndex(e => e.TypesNameAr)
                    .HasName("IX__@Types_DepositChecks")
                    .IsUnique();

                entity.HasIndex(e => e.TypesNameEn)
                    .HasName("IX__@Types_DepositChecks_1")
                    .IsUnique();

                entity.Property(e => e.TypesNo).HasColumnName("Types_No");

                entity.Property(e => e.TypesNameAr)
                    .IsRequired()
                    .HasColumnName("Types_Name_Ar")
                    .HasMaxLength(50);

                entity.Property(e => e.TypesNameEn)
                    .IsRequired()
                    .HasColumnName("Types_Name_En")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<University>(entity =>
            {
                entity.HasKey(e => e.UnivId);

                entity.Property(e => e.UnivId).HasColumnName("Univ_ID");

                entity.Property(e => e.UnivName)
                    .HasColumnName("Univ_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VacancyApply>(entity =>
            {
                entity.ToTable("Vacancy_Apply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CvName)
                    .HasColumnName("CV_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.EmployeeCompany).HasColumnName("Employee_Company");

                entity.Property(e => e.EmployeeEmail)
                    .HasColumnName("Employee_Email")
                    .HasMaxLength(100);

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_ID");

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.ExperienceYear).HasColumnName("Experience_year");

                entity.Property(e => e.GraduationYear).HasColumnName("Graduation_Year");

                entity.Property(e => e.HiringDate)
                    .HasColumnName("Hiring_Date")
                    .HasColumnType("date");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser).HasColumnName("In_User");

                entity.Property(e => e.MajorId).HasColumnName("Major_ID");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("project_ID");

                entity.Property(e => e.VacancyId).HasColumnName("Vacancy_ID");
            });

            modelBuilder.Entity<WagApiAreas>(entity =>
            {
                entity.ToTable("WAG_API_areas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<WagApiFileVersion>(entity =>
            {
                entity.ToTable("WAG_API_FileVersion");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.In_Date)
                    .HasColumnType("In_Date");

                entity.Property(e => e.FilesName)
                    .IsRequired()
                    .HasColumnName("FilesName")
                    .HasMaxLength(510);
            });
            modelBuilder.Entity<WagApiAttendances>(entity =>
            {
                entity.ToTable("WAG_API_attendances");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ArrivalTime).HasColumnName("arrival_time");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.Follow).HasColumnName("follow");

                entity.Property(e => e.FollowComment)
                    .HasColumnName("follow_comment")
                    .HasMaxLength(510);

                entity.Property(e => e.FollowTime).HasColumnName("follow_time");

                entity.Property(e => e.IdNumber)
                    .IsRequired()
                    .HasColumnName("id_number")
                    .HasMaxLength(28);

                entity.Property(e => e.LeaveTime).HasColumnName("leave_time");

                entity.Property(e => e.ProjectId).HasColumnName("project_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });
            modelBuilder.Entity<WagAttendance>(entity =>
            {
                entity.ToTable("WAG_Attendance");
            });
            modelBuilder.Entity<WagApiBlocks>(entity =>
            {
                entity.ToTable("WAG_API_blocks");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BlockFrom).HasColumnName("block_from");

                entity.Property(e => e.BlockTo).HasColumnName("block_to");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdNumber)
                    .IsRequired()
                    .HasColumnName("id_number")
                    .HasMaxLength(28);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<WagApiMigrations>(entity =>
            {
                entity.ToTable("WAG_API_migrations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Batch).HasColumnName("batch");

                entity.Property(e => e.Migration)
                    .IsRequired()
                    .HasColumnName("migration")
                    .HasMaxLength(510);
            });

            modelBuilder.Entity<WagApiModelHasPermissions>(entity =>
            {
                entity.HasKey(e => new { e.PermissionId, e.ModelType, e.ModelId })
                    .HasName("model_has_permissions_permission_model_type_primary");

                entity.ToTable("WAG_API_model_has_permissions");

                entity.Property(e => e.PermissionId).HasColumnName("permission_id");

                entity.Property(e => e.ModelType)
                    .HasColumnName("model_type")
                    .HasMaxLength(510);

                entity.Property(e => e.ModelId).HasColumnName("model_id");
            });

            modelBuilder.Entity<WagApiModelHasRoles>(entity =>
            {
                entity.ToTable("WAG_API_model_has_roles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ModelId).HasColumnName("model_id");

                entity.Property(e => e.ModelType)
                    .IsRequired()
                    .HasColumnName("model_type")
                    .HasMaxLength(510);

                entity.Property(e => e.RoleId).HasColumnName("role_id");
            });

            modelBuilder.Entity<WagApiPermissions>(entity =>
            {
                entity.ToTable("WAG_API_permissions");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuardName)
                    .IsRequired()
                    .HasColumnName("guard_name")
                    .HasMaxLength(510);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<WagApiRoles>(entity =>
            {
                entity.ToTable("WAG_API_roles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(510);

                entity.Property(e => e.GuardName)
                    .IsRequired()
                    .HasColumnName("guard_name")
                    .HasMaxLength(510);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<WagApiUsers>(entity =>
            {
                entity.ToTable("WAG_API_users");

                entity.HasIndex(e => e.Email)
                    .HasName("email")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(20);

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(510);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasColumnName("mobile")
                    .HasMaxLength(60);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(510);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<WagApiProjectsUsers>(entity =>
            {
                entity.ToTable("WAG_API_projects_users");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProjectId).HasColumnName("project_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<WagAreaBuilding>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.BuildingCode });

                entity.ToTable("WAG_Area_Building");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.BuildingCode)
                    .HasColumnName("Building_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.BuildingName)
                    .HasColumnName("Building_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<WagAreaRegion>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.RegionCode });

                entity.ToTable("WAG_Area_Region");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.RegionCode)
                    .HasColumnName("Region_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.RegionName)
                    .HasColumnName("Region_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<WagAreaSegment>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.SegmentCode });

                entity.ToTable("WAG_Area_Segment");

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SegmentCode)
                    .HasColumnName("Segment_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.SegmentName)
                    .HasColumnName("Segment_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<WagBudget>(entity =>
            {
                entity.HasKey(e => e.BdId);

                entity.ToTable("WAG_Budget");

                entity.Property(e => e.BdId).HasColumnName("BD_ID");

                entity.Property(e => e.B1).HasColumnName("B_1");

                entity.Property(e => e.B10).HasColumnName("B_10");

                entity.Property(e => e.B11).HasColumnName("B_11");

                entity.Property(e => e.B12).HasColumnName("B_12");

                entity.Property(e => e.B2).HasColumnName("B_2");

                entity.Property(e => e.B3).HasColumnName("B_3");

                entity.Property(e => e.B4).HasColumnName("B_4");

                entity.Property(e => e.B5).HasColumnName("B_5");

                entity.Property(e => e.B6).HasColumnName("B_6");

                entity.Property(e => e.B7).HasColumnName("B_7");

                entity.Property(e => e.B8).HasColumnName("B_8");

                entity.Property(e => e.B9).HasColumnName("B_9");

                entity.Property(e => e.C1).HasColumnName("C_1");

                entity.Property(e => e.C10).HasColumnName("C_10");

                entity.Property(e => e.C11).HasColumnName("C_11");

                entity.Property(e => e.C12).HasColumnName("C_12");

                entity.Property(e => e.C2).HasColumnName("C_2");

                entity.Property(e => e.C3).HasColumnName("C_3");

                entity.Property(e => e.C4).HasColumnName("C_4");

                entity.Property(e => e.C5).HasColumnName("C_5");

                entity.Property(e => e.C6).HasColumnName("C_6");

                entity.Property(e => e.C7).HasColumnName("C_7");

                entity.Property(e => e.C8).HasColumnName("C_8");

                entity.Property(e => e.C9).HasColumnName("C_9");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.SubCategoryId)
                    .HasColumnName("Sub_Category_ID")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WagCondition>(entity =>
            {
                entity.ToTable("WAG_Condition");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CondNonProductive).HasColumnName("Cond_NonProductive");

                entity.Property(e => e.CondProductive).HasColumnName("Cond_Productive");

                entity.Property(e => e.CondTeamNonProductive).HasColumnName("Cond_Team_NonProductive");

                entity.Property(e => e.CondTeamProductive).HasColumnName("Cond_Team_Productive");
            });

            modelBuilder.Entity<WagEmployee>(entity =>
            {
                entity.ToTable("WAG_Employee");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BlockReason)
                    .HasColumnName("Block_Reason")
                    .HasMaxLength(510);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CriminalRecord)
                    .HasColumnName("criminal_record")
                    .HasMaxLength(510);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IdBack)
                    .HasColumnName("id_back")
                    .HasMaxLength(510);

                entity.Property(e => e.IdCardNo)
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.IdFront)
                    .HasColumnName("id_front")
                    .HasMaxLength(510);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(510);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.IsBlock).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsConfirmed).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.MissionDate)
                    .HasColumnName("Mission_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MissionProId).HasColumnName("Mission_ProID");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.Other)
                    .HasColumnName("other")
                    .HasMaxLength(510);

                entity.Property(e => e.OtherName)
                    .HasColumnName("other_name")
                    .HasMaxLength(510);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<WagEmployeeBlackList>(entity =>
            {
                entity.HasKey(e => e.NationalId);

                entity.ToTable("WAG_EmployeeBlackList");

                entity.Property(e => e.NationalId)
                    .HasColumnName("National_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.FullName).HasMaxLength(500);
            });

            modelBuilder.Entity<WagEmployeeDeleted>(entity =>
            {
                entity.HasKey(e => e.EmployeeNo);

                entity.ToTable("WAG_Employee_Deleted");

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdCardNo)
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<WagEmployeeHistory>(entity =>
            {
                entity.HasKey(e => new { e.RecordNo, e.EmployeeNo });

                entity.ToTable("WAG_Employee_History");

                entity.Property(e => e.RecordNo).ValueGeneratedOnAdd();

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeName)
                    .HasColumnName("Employee_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ExitDate).HasColumnType("datetime");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.IdCardNo)
                    .HasColumnName("ID_CARD_NO")
                    .HasMaxLength(20);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("Job_Title_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Mobile1).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.WorkingHours).HasColumnName("Working_Hours");
            });

            modelBuilder.Entity<WagGrade>(entity =>
            {
                entity.HasKey(e => e.GradeId);

                entity.ToTable("WAG_Grade");

                entity.Property(e => e.GradeId)
                    .HasColumnName("Grade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeTitle)
                    .HasColumnName("Grade_Title")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<WagGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("WAG_Group");

                entity.Property(e => e.GroupId)
                    .HasColumnName("Group_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupTitle)
                    .IsRequired()
                    .HasColumnName("Group_Title")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<WagGroupPolicy>(entity =>
            {
                entity.HasKey(e => e.GroupPolicyId);

                entity.ToTable("WAG_GroupPolicy");

                entity.Property(e => e.GroupPolicyId).HasColumnName("GroupPolicy_ID");

                entity.Property(e => e.GroupPolicyName)
                    .HasColumnName("GroupPolicy_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<WagMainCategory>(entity =>
            {
                entity.HasKey(e => e.MainCategoryId);

                entity.ToTable("WAG_Main_Category");

                entity.Property(e => e.MainCategoryId)
                    .HasColumnName("Main_Category_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.IsProductive).HasDefaultValueSql("((0))");

                entity.Property(e => e.MainCategoryName)
                    .HasColumnName("Main_Category_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.MainCategoryNameArabic)
                    .HasColumnName("Main_Category_Name_Arabic")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<WagMainTrade>(entity =>
            {
                entity.HasKey(e => e.MainTradeId)
                    .HasName("PK_WAG_Main_Trade_1");

                entity.ToTable("WAG_Main_Trade");

                entity.Property(e => e.MainTradeId)
                    .HasColumnName("Main_Trade_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.MainTradeName)
                    .HasColumnName("Main_Trade_Name")
                    .HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(20);
            });

            modelBuilder.Entity<WagMonths>(entity =>
            {
                entity.ToTable("WAG_Months");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FromDate).HasColumnType("date");

                entity.Property(e => e.ToDate).HasColumnType("date");
            });

            modelBuilder.Entity<WagSalaryType>(entity =>
            {
                entity.HasKey(e => e.SalaryTypeId);

                entity.ToTable("WAG_Salary_Type");

                entity.Property(e => e.SalaryTypeId)
                    .HasColumnName("Salary_Type_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.SalaryTypeTitle)
                    .HasColumnName("Salary_Type_Title")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<WagSubCategory>(entity =>
            {
                entity.HasKey(e => e.SubCategoryId);

                entity.ToTable("WAG_Sub_Category");

                entity.Property(e => e.SubCategoryId)
                    .HasColumnName("Sub_Category_ID")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupPolicyId).HasColumnName("GroupPolicy_ID");

                entity.Property(e => e.MainCategoryId)
                    .IsRequired()
                    .HasColumnName("Main_Category_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.MarketDailyRateAtTenderingStageMax).HasColumnName("Market_Daily_Rate_at_Tendering_Stage_Max");

                entity.Property(e => e.MarketDailyRateAtTenderingStageMaxBasicSelected).HasColumnName("Market_Daily_Rate_at_Tendering_Stage_Max_BasicSelected");

                entity.Property(e => e.MarketDailyRateAtTenderingStageMaxWithoutTax).HasColumnName("Market_Daily_Rate_at_Tendering_Stage_Max_WithoutTax");

                entity.Property(e => e.MarketDailyRateAtTenderingStageMin).HasColumnName("Market_Daily_Rate_at_Tendering_Stage_Min");

                entity.Property(e => e.MarketDailyRateAtTenderingStageMinWithoutTax).HasColumnName("Market_Daily_Rate_at_Tendering_Stage_Min_WithoutTax");

                entity.Property(e => e.MarketDailyRateAvg).HasColumnName("Market_Daily_Rate_AVG");

                entity.Property(e => e.MarketDailyRateMax).HasColumnName("Market_Daily_Rate_Max");

                entity.Property(e => e.MarketDailyRateMin).HasColumnName("Market_Daily_Rate_Min");

                entity.Property(e => e.SerialNo).HasMaxLength(20);

                entity.Property(e => e.SubCategoryName)
                    .HasColumnName("Sub_Category_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.SubCategoryNameArabic)
                    .HasColumnName("Sub_Category_Name_Arabic")
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(200);
            });

            modelBuilder.Entity<WagSubTrade>(entity =>
            {
                entity.HasKey(e => new { e.SubTradeId, e.MainTradeId });

                entity.ToTable("WAG_Sub_Trade");

                entity.Property(e => e.SubTradeId)
                    .HasColumnName("Sub_Trade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.MainTradeId)
                    .HasColumnName("Main_Trade_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.SubTradeName)
                    .HasColumnName("Sub_Trade_Name")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<WagUsers>(entity =>
            {
                entity.HasKey(e => e.HrCode);

                entity.ToTable("WAG_Users");

                entity.Property(e => e.HrCode)
                    .HasColumnName("HR_Code")
                    .HasMaxLength(20)
                    .ValueGeneratedNever();

                entity.Property(e => e.FullName).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<WagWagesD>(entity =>
            {
                entity.HasKey(e => new { e.RecordId, e.DocNo, e.EmployeeNo });

                entity.ToTable("WAG_Wages_d");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DocNo).HasColumnName("Doc_No");

                entity.Property(e => e.EmployeeNo)
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.BuildingCode)
                    .HasColumnName("Building_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.CostCode).HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode)
                    .HasColumnName("Region_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.SegmentCode)
                    .HasColumnName("Segment_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);

                entity.HasOne(d => d.DocNoNavigation)
                    .WithMany(p => p.WagWagesD)
                    .HasForeignKey(d => d.DocNo)
                    .HasConstraintName("FK_WAG_Wages_d_WAG_Wages_m");
            });

            modelBuilder.Entity<WagWagesDeductions>(entity =>
            {
                entity.HasKey(e => e.DedId)
                    .HasName("PK_WAG_Wages_Deductions_d");

                entity.ToTable("WAG_Wages_Deductions");

                entity.Property(e => e.DedId).HasColumnName("Ded_ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasColumnName("Employee_No")
                    .HasMaxLength(20);

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);
            });

            modelBuilder.Entity<WagWagesM>(entity =>
            {
                entity.HasKey(e => e.DocNo)
                    .HasName("PK_WAG_Wages_m_1");

                entity.ToTable("WAG_Wages_m");

                entity.Property(e => e.DocNo)
                    .HasColumnName("Doc_No")
                    .ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.InDate)
                    .HasColumnName("In_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InUser)
                    .HasColumnName("In_User")
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasColumnName("Project_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(20);

                entity.Property(e => e.Scorhac)
                    .HasColumnName("SCORHAC")
                    .HasMaxLength(20);

                entity.Property(e => e.SiteEngineerUserHrCode)
                    .HasColumnName("Site_Engineer_User_HR_Code")
                    .HasMaxLength(20);

                entity.Property(e => e.UpDate)
                    .HasColumnName("Up_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpUser)
                    .HasColumnName("Up_User")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkType).HasMaxLength(20);
            });

            modelBuilder.Entity<_000contactListNew>(entity =>
            {
                entity.ToTable("000ContactList_New");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccessCode).HasMaxLength(50);

                entity.Property(e => e.Department).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.ExternalNo)
                    .HasColumnName("External_No")
                    .HasMaxLength(50);

                entity.Property(e => e.Floor).HasMaxLength(50);

                entity.Property(e => e.IpPhone)
                    .HasColumnName("IP_Phone")
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NewExt)
                    .HasColumnName("New_Ext")
                    .HasMaxLength(50);

                entity.Property(e => e.UserHrCode)
                    .HasColumnName("User_HR_Code")
                    .HasMaxLength(50);
            });


            modelBuilder.Entity<TravelRequest>(entity =>
            {
                entity.HasKey(e => e.RequestNo)
                    .HasName("PK_Travel_request");

                entity.ToTable("Travel_request");

                entity.Property(e => e.RequestNo)
                    .HasColumnName("Request_No")
                    .ValueGeneratedNever();


                entity.Property(e => e.ServiceID)
                    .IsRequired()
                    .HasColumnName("Service_ID")
                    .HasMaxLength(20);
                entity.Property(e => e.RequestType)
                  .IsRequired()
                  .HasColumnName("RequestType")
                  .HasMaxLength(20);

                entity.Property(e => e.RequestHRCode)
                .IsRequired()
                .HasColumnName("Request_HR_Code")
                .HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("RequestDate");
                entity.Property(e => e.OwnerHrCode)
                .IsRequired()
                .HasColumnName("Owner_Hr_Code")
                .HasMaxLength(50);


                entity.Property(e => e.OwnerLocation)
               .IsRequired()
               .HasColumnName("Owner_Location")
               .HasMaxLength(50);

                entity.Property(e => e.OwnerProjectManager)
               .IsRequired()
               .HasColumnName("Owner_ProjectManager")
               .HasMaxLength(50);

                entity.Property(e => e.OwnerprojectDirector)
             .IsRequired()
             .HasColumnName("Owner_projectDirector")
             .HasMaxLength(50);

                entity.Property(e => e.OwnerFirstname)
          .IsRequired()
          .HasColumnName("Owner_Firstname")
          .HasMaxLength(50);

                entity.Property(e => e.OwnerLastname)

            .HasColumnName("Owner_Lastname")
            .HasMaxLength(50);

                entity.Property(e => e.OwnerMiddlename)

          .HasColumnName("Owner_Middlename")
          .HasMaxLength(50);



                entity.Property(e => e.OwnerTitle)

             .HasColumnName("Owner_Title")
             .HasMaxLength(50);



                entity.Property(e => e.OwnerNationality)

                .HasColumnName("Owner_Nationality")
                .HasMaxLength(50);


                entity.Property(e => e.OwnerPassno)

             .HasColumnName("Owner_Passno")
             .HasMaxLength(50);

                entity.Property(e => e.Ownerpassexpirydate).HasColumnName("Owner_passexpirydate").HasColumnType("datetime");




                entity.Property(e => e.Travelfrom)
               .HasColumnName("Travelfrom")
              .HasMaxLength(50);

                entity.Property(e => e.Travelto)
               .HasColumnName("Travelto")
               .HasMaxLength(50);

                entity.Property(e => e.Depurturedate).HasColumnType("datetime");
                entity.Property(e => e.Returndate).HasColumnType("datetime");

                entity.Property(e => e.Travelreason)
              .HasColumnName("Travelreason")
              .HasMaxLength(1000);

                entity.Property(e => e.costallocation)
              .HasColumnName("costallocation")
              .HasMaxLength(50);
                entity.Property(e => e.AirTicket).HasDefaultValueSql("((0))");
                entity.Property(e => e.HotelBooking).HasDefaultValueSql("((0))");
                entity.Property(e => e.Visa).HasDefaultValueSql("((0))");

                entity.Property(e => e.AirTicketcostperunit)
           .HasColumnName("AirTicket_costperunit")
           .HasMaxLength(100);

                entity.Property(e => e.AirTicketTotalcost)
                .HasColumnName("AirTicket_Totalcost")
                .HasMaxLength(100);

                entity.Property(e => e.AirTicketvedor)
               .HasColumnName("AirTicket_vedor")
               .HasMaxLength(50);

                entity.Property(e => e.Hotelbookingcostperunit)
           .HasColumnName("Hotelbooking_costperunit")
           .HasMaxLength(50);

                entity.Property(e => e.Hotelbookingtotalcost)
           .HasColumnName("Hotelbooking_totalcost")
           .HasMaxLength(50);

                entity.Property(e => e.Visacostperunit)
           .HasColumnName("Visa_costperunit")
           .HasMaxLength(50);

                entity.Property(e => e.VisaTotalcost)
           .HasColumnName("Visa_Totalcost")
           .HasMaxLength(50);

                entity.Property(e => e.perdiemcostperunit)
           .HasColumnName("perdiem_costperunit")
           .HasMaxLength(50);

                entity.Property(e => e.perdiemtotalcost)
           .HasColumnName("perdiem_totalcost")
           .HasMaxLength(50);

                entity.Property(e => e.othercostperunit)
           .HasColumnName("other_costperunit")
           .HasMaxLength(50);

                entity.Property(e => e.othertotalcost)
           .HasColumnName("other_totalcost")
           .HasMaxLength(50);
                entity.Property(e => e.totalapproxcostperunit)
    .HasColumnName("totalapproxcostperunit")
    .HasMaxLength(50);

                entity.Property(e => e.totalapproxtotalcost)
                 .HasColumnName("totalapproxtotalcost")
                .HasMaxLength(50);

                entity.Property(e => e.attach1)
          .HasColumnName("attach1")
         .HasMaxLength(50);

                entity.Property(e => e.attach2)
.HasColumnName("attach2")
.HasMaxLength(50);

                entity.Property(e => e.attach3)
.HasColumnName("attach3")
.HasMaxLength(50);

                entity.Property(e => e.attach4)
.HasColumnName("attach4")
.HasMaxLength(50);

                entity.Property(e => e.attach5)
.HasColumnName("attach5")
.HasMaxLength(50);

                entity.Property(e => e.Inuser)
.HasColumnName("In_user")
.HasMaxLength(50);
                entity.Property(e => e.Indate).HasColumnName("In_date").HasColumnType("datetime");

                entity.Property(e => e.Status)
                 .HasColumnName("Status");




                entity.Property(e => e.ClosedDate).HasColumnType("datetime");
                entity.Property(e => e.MeetAssist).HasColumnName("Meet_Assist").HasDefaultValueSql("((0))");
                entity.Property(e => e.partners)
               .HasColumnName("partners")
               .HasMaxLength(50);


                entity.Property(e => e.Insurance).HasDefaultValueSql("((0))");
                entity.Property(e => e.Car).HasDefaultValueSql("((0))");
                entity.Property(e => e.Train).HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
.HasColumnName("Comments")
.HasMaxLength(50);


            });


            modelBuilder.Entity<TravelRequestService>(entity =>
            {
                entity.HasKey(e => e.servID)
                    .HasName("PK_TravelRequest_Services");

                entity.ToTable("TravelRequest_Services");

                entity.Property(e => e.servID)
                    .HasColumnName("serv_ID")
                    .ValueGeneratedNever();


                entity.Property(e => e.servname)
                    .IsRequired()
                    .HasColumnName("serv_name")
                    .HasMaxLength(20);


            });

        }
    }
}
